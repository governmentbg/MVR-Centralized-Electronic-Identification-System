/*
 * ISCEI HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.RequestFromDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eid.sdk.iscei.JSON;

/**
 * ApprovalRequestResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-11T13:52:49.955870100+03:00[Europe/Kiev]", comments = "Generator version: 7.13.0")
public class ApprovalRequestResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private String username;

  /**
   * Gets or Sets levelOfAssurance
   */
  @JsonAdapter(LevelOfAssuranceEnum.Adapter.class)
  public enum LevelOfAssuranceEnum {
    LOW("LOW"),
    
    SUBSTANTIAL("SUBSTANTIAL"),
    
    HIGH("HIGH");

    private String value;

    LevelOfAssuranceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelOfAssuranceEnum fromValue(String value) {
      for (LevelOfAssuranceEnum b : LevelOfAssuranceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LevelOfAssuranceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelOfAssuranceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelOfAssuranceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LevelOfAssuranceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LevelOfAssuranceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEVEL_OF_ASSURANCE = "levelOfAssurance";
  @SerializedName(SERIALIZED_NAME_LEVEL_OF_ASSURANCE)
  @javax.annotation.Nullable
  private LevelOfAssuranceEnum levelOfAssurance;

  public static final String SERIALIZED_NAME_REQUEST_FROM = "requestFrom";
  @SerializedName(SERIALIZED_NAME_REQUEST_FROM)
  @javax.annotation.Nullable
  private RequestFromDto requestFrom;

  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_MAX_TTL = "maxTtl";
  @SerializedName(SERIALIZED_NAME_MAX_TTL)
  @javax.annotation.Nullable
  private Long maxTtl;

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expiresIn";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  @javax.annotation.Nullable
  private Long expiresIn;

  public ApprovalRequestResponse() {
  }

  public ApprovalRequestResponse id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public ApprovalRequestResponse username(@javax.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }


  public ApprovalRequestResponse levelOfAssurance(@javax.annotation.Nullable LevelOfAssuranceEnum levelOfAssurance) {
    this.levelOfAssurance = levelOfAssurance;
    return this;
  }

  /**
   * Get levelOfAssurance
   * @return levelOfAssurance
   */
  @javax.annotation.Nullable
  public LevelOfAssuranceEnum getLevelOfAssurance() {
    return levelOfAssurance;
  }

  public void setLevelOfAssurance(@javax.annotation.Nullable LevelOfAssuranceEnum levelOfAssurance) {
    this.levelOfAssurance = levelOfAssurance;
  }


  public ApprovalRequestResponse requestFrom(@javax.annotation.Nullable RequestFromDto requestFrom) {
    this.requestFrom = requestFrom;
    return this;
  }

  /**
   * Get requestFrom
   * @return requestFrom
   */
  @javax.annotation.Nullable
  public RequestFromDto getRequestFrom() {
    return requestFrom;
  }

  public void setRequestFrom(@javax.annotation.Nullable RequestFromDto requestFrom) {
    this.requestFrom = requestFrom;
  }


  public ApprovalRequestResponse createDate(@javax.annotation.Nullable OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(@javax.annotation.Nullable OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public ApprovalRequestResponse maxTtl(@javax.annotation.Nullable Long maxTtl) {
    this.maxTtl = maxTtl;
    return this;
  }

  /**
   * Get maxTtl
   * @return maxTtl
   */
  @javax.annotation.Nullable
  public Long getMaxTtl() {
    return maxTtl;
  }

  public void setMaxTtl(@javax.annotation.Nullable Long maxTtl) {
    this.maxTtl = maxTtl;
  }


  public ApprovalRequestResponse expiresIn(@javax.annotation.Nullable Long expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * Get expiresIn
   * @return expiresIn
   */
  @javax.annotation.Nullable
  public Long getExpiresIn() {
    return expiresIn;
  }

  public void setExpiresIn(@javax.annotation.Nullable Long expiresIn) {
    this.expiresIn = expiresIn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApprovalRequestResponse approvalRequestResponse = (ApprovalRequestResponse) o;
    return Objects.equals(this.id, approvalRequestResponse.id) &&
        Objects.equals(this.username, approvalRequestResponse.username) &&
        Objects.equals(this.levelOfAssurance, approvalRequestResponse.levelOfAssurance) &&
        Objects.equals(this.requestFrom, approvalRequestResponse.requestFrom) &&
        Objects.equals(this.createDate, approvalRequestResponse.createDate) &&
        Objects.equals(this.maxTtl, approvalRequestResponse.maxTtl) &&
        Objects.equals(this.expiresIn, approvalRequestResponse.expiresIn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, username, levelOfAssurance, requestFrom, createDate, maxTtl, expiresIn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApprovalRequestResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    levelOfAssurance: ").append(toIndentedString(levelOfAssurance)).append("\n");
    sb.append("    requestFrom: ").append(toIndentedString(requestFrom)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    maxTtl: ").append(toIndentedString(maxTtl)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("username");
    openapiFields.add("levelOfAssurance");
    openapiFields.add("requestFrom");
    openapiFields.add("createDate");
    openapiFields.add("maxTtl");
    openapiFields.add("expiresIn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApprovalRequestResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApprovalRequestResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApprovalRequestResponse is not found in the empty JSON string", ApprovalRequestResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApprovalRequestResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApprovalRequestResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("levelOfAssurance") != null && !jsonObj.get("levelOfAssurance").isJsonNull()) && !jsonObj.get("levelOfAssurance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `levelOfAssurance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("levelOfAssurance").toString()));
      }
      // validate the optional field `levelOfAssurance`
      if (jsonObj.get("levelOfAssurance") != null && !jsonObj.get("levelOfAssurance").isJsonNull()) {
        LevelOfAssuranceEnum.validateJsonElement(jsonObj.get("levelOfAssurance"));
      }
      // validate the optional field `requestFrom`
      if (jsonObj.get("requestFrom") != null && !jsonObj.get("requestFrom").isJsonNull()) {
        RequestFromDto.validateJsonElement(jsonObj.get("requestFrom"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApprovalRequestResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApprovalRequestResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApprovalRequestResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApprovalRequestResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ApprovalRequestResponse>() {
           @Override
           public void write(JsonWriter out, ApprovalRequestResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApprovalRequestResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApprovalRequestResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApprovalRequestResponse
   * @throws IOException if the JSON string is invalid with respect to ApprovalRequestResponse
   */
  public static ApprovalRequestResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApprovalRequestResponse.class);
  }

  /**
   * Convert an instance of ApprovalRequestResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

