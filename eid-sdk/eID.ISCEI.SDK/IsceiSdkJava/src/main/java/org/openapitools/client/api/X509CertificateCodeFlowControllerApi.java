/*
 * ISCEI HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import eid.sdk.iscei.ApiCallback;
import eid.sdk.iscei.ApiClient;
import eid.sdk.iscei.ApiException;
import eid.sdk.iscei.ApiResponse;
import eid.sdk.iscei.Configuration;
import eid.sdk.iscei.Pair;
import eid.sdk.iscei.ProgressRequestBody;
import eid.sdk.iscei.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.Set;
import org.openapitools.client.model.SignedChallenge;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class X509CertificateCodeFlowControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public X509CertificateCodeFlowControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public X509CertificateCodeFlowControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for codeFlowAuth
     * @param clientId  (required)
     * @param responseType  (required)
     * @param state  (required)
     * @param redirectUri  (required)
     * @param codeChallenge  (required)
     * @param codeChallengeMethod  (required)
     * @param signedChallenge  (required)
     * @param scope  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeFlowAuthCall(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull String responseType, @javax.annotation.Nonnull String state, @javax.annotation.Nonnull String redirectUri, @javax.annotation.Nonnull String codeChallenge, @javax.annotation.Nonnull String codeChallengeMethod, @javax.annotation.Nonnull SignedChallenge signedChallenge, @javax.annotation.Nullable Set<String> scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signedChallenge;

        // create path and map variables
        String localVarPath = "/api/v1/code-flow/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (responseType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_type", responseType));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (scope != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "scope", scope));
        }

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uri", redirectUri));
        }

        if (codeChallenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code_challenge", codeChallenge));
        }

        if (codeChallengeMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code_challenge_method", codeChallengeMethod));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ISCEI" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeFlowAuthValidateBeforeCall(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull String responseType, @javax.annotation.Nonnull String state, @javax.annotation.Nonnull String redirectUri, @javax.annotation.Nonnull String codeChallenge, @javax.annotation.Nonnull String codeChallengeMethod, @javax.annotation.Nonnull SignedChallenge signedChallenge, @javax.annotation.Nullable Set<String> scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling codeFlowAuth(Async)");
        }

        // verify the required parameter 'responseType' is set
        if (responseType == null) {
            throw new ApiException("Missing the required parameter 'responseType' when calling codeFlowAuth(Async)");
        }

        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling codeFlowAuth(Async)");
        }

        // verify the required parameter 'redirectUri' is set
        if (redirectUri == null) {
            throw new ApiException("Missing the required parameter 'redirectUri' when calling codeFlowAuth(Async)");
        }

        // verify the required parameter 'codeChallenge' is set
        if (codeChallenge == null) {
            throw new ApiException("Missing the required parameter 'codeChallenge' when calling codeFlowAuth(Async)");
        }

        // verify the required parameter 'codeChallengeMethod' is set
        if (codeChallengeMethod == null) {
            throw new ApiException("Missing the required parameter 'codeChallengeMethod' when calling codeFlowAuth(Async)");
        }

        // verify the required parameter 'signedChallenge' is set
        if (signedChallenge == null) {
            throw new ApiException("Missing the required parameter 'signedChallenge' when calling codeFlowAuth(Async)");
        }

        return codeFlowAuthCall(clientId, responseType, state, redirectUri, codeChallenge, codeChallengeMethod, signedChallenge, scope, _callback);

    }

    /**
     * 
     * 
     * @param clientId  (required)
     * @param responseType  (required)
     * @param state  (required)
     * @param redirectUri  (required)
     * @param codeChallenge  (required)
     * @param codeChallengeMethod  (required)
     * @param signedChallenge  (required)
     * @param scope  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String codeFlowAuth(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull String responseType, @javax.annotation.Nonnull String state, @javax.annotation.Nonnull String redirectUri, @javax.annotation.Nonnull String codeChallenge, @javax.annotation.Nonnull String codeChallengeMethod, @javax.annotation.Nonnull SignedChallenge signedChallenge, @javax.annotation.Nullable Set<String> scope) throws ApiException {
        ApiResponse<String> localVarResp = codeFlowAuthWithHttpInfo(clientId, responseType, state, redirectUri, codeChallenge, codeChallengeMethod, signedChallenge, scope);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param clientId  (required)
     * @param responseType  (required)
     * @param state  (required)
     * @param redirectUri  (required)
     * @param codeChallenge  (required)
     * @param codeChallengeMethod  (required)
     * @param signedChallenge  (required)
     * @param scope  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> codeFlowAuthWithHttpInfo(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull String responseType, @javax.annotation.Nonnull String state, @javax.annotation.Nonnull String redirectUri, @javax.annotation.Nonnull String codeChallenge, @javax.annotation.Nonnull String codeChallengeMethod, @javax.annotation.Nonnull SignedChallenge signedChallenge, @javax.annotation.Nullable Set<String> scope) throws ApiException {
        okhttp3.Call localVarCall = codeFlowAuthValidateBeforeCall(clientId, responseType, state, redirectUri, codeChallenge, codeChallengeMethod, signedChallenge, scope, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param clientId  (required)
     * @param responseType  (required)
     * @param state  (required)
     * @param redirectUri  (required)
     * @param codeChallenge  (required)
     * @param codeChallengeMethod  (required)
     * @param signedChallenge  (required)
     * @param scope  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeFlowAuthAsync(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull String responseType, @javax.annotation.Nonnull String state, @javax.annotation.Nonnull String redirectUri, @javax.annotation.Nonnull String codeChallenge, @javax.annotation.Nonnull String codeChallengeMethod, @javax.annotation.Nonnull SignedChallenge signedChallenge, @javax.annotation.Nullable Set<String> scope, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeFlowAuthValidateBeforeCall(clientId, responseType, state, redirectUri, codeChallenge, codeChallengeMethod, signedChallenge, scope, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeFlowToken
     * @param clientId  (required)
     * @param grantType  (required)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param codeVerifier  (optional)
     * @param refreshToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeFlowTokenCall(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull String grantType, @javax.annotation.Nullable String code, @javax.annotation.Nullable String redirectUri, @javax.annotation.Nullable String codeVerifier, @javax.annotation.Nullable String refreshToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/code-flow/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (grantType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("grant_type", grantType));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uri", redirectUri));
        }

        if (codeVerifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code_verifier", codeVerifier));
        }

        if (refreshToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refresh_token", refreshToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ISCEI" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeFlowTokenValidateBeforeCall(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull String grantType, @javax.annotation.Nullable String code, @javax.annotation.Nullable String redirectUri, @javax.annotation.Nullable String codeVerifier, @javax.annotation.Nullable String refreshToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling codeFlowToken(Async)");
        }

        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling codeFlowToken(Async)");
        }

        return codeFlowTokenCall(clientId, grantType, code, redirectUri, codeVerifier, refreshToken, _callback);

    }

    /**
     * 
     * 
     * @param clientId  (required)
     * @param grantType  (required)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param codeVerifier  (optional)
     * @param refreshToken  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String codeFlowToken(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull String grantType, @javax.annotation.Nullable String code, @javax.annotation.Nullable String redirectUri, @javax.annotation.Nullable String codeVerifier, @javax.annotation.Nullable String refreshToken) throws ApiException {
        ApiResponse<String> localVarResp = codeFlowTokenWithHttpInfo(clientId, grantType, code, redirectUri, codeVerifier, refreshToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param clientId  (required)
     * @param grantType  (required)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param codeVerifier  (optional)
     * @param refreshToken  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> codeFlowTokenWithHttpInfo(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull String grantType, @javax.annotation.Nullable String code, @javax.annotation.Nullable String redirectUri, @javax.annotation.Nullable String codeVerifier, @javax.annotation.Nullable String refreshToken) throws ApiException {
        okhttp3.Call localVarCall = codeFlowTokenValidateBeforeCall(clientId, grantType, code, redirectUri, codeVerifier, refreshToken, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param clientId  (required)
     * @param grantType  (required)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param codeVerifier  (optional)
     * @param refreshToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeFlowTokenAsync(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull String grantType, @javax.annotation.Nullable String code, @javax.annotation.Nullable String redirectUri, @javax.annotation.Nullable String codeVerifier, @javax.annotation.Nullable String refreshToken, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeFlowTokenValidateBeforeCall(clientId, grantType, code, redirectUri, codeVerifier, refreshToken, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
