/*
 * ISCEI HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RequestFromDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eid.sdk.iscei.JSON;

/**
 * ApprovalAuthenticationRequestDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-11T13:52:49.955870100+03:00[Europe/Kiev]", comments = "Generator version: 7.13.0")
public class ApprovalAuthenticationRequestDto {
  /**
   * Gets or Sets levelOfAssurance
   */
  @JsonAdapter(LevelOfAssuranceEnum.Adapter.class)
  public enum LevelOfAssuranceEnum {
    LOW("LOW"),
    
    SUBSTANTIAL("SUBSTANTIAL"),
    
    HIGH("HIGH");

    private String value;

    LevelOfAssuranceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelOfAssuranceEnum fromValue(String value) {
      for (LevelOfAssuranceEnum b : LevelOfAssuranceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LevelOfAssuranceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelOfAssuranceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelOfAssuranceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LevelOfAssuranceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LevelOfAssuranceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEVEL_OF_ASSURANCE = "levelOfAssurance";
  @SerializedName(SERIALIZED_NAME_LEVEL_OF_ASSURANCE)
  @javax.annotation.Nullable
  private LevelOfAssuranceEnum levelOfAssurance;

  public static final String SERIALIZED_NAME_CITIZEN_NUMBER = "citizenNumber";
  @SerializedName(SERIALIZED_NAME_CITIZEN_NUMBER)
  @javax.annotation.Nonnull
  private String citizenNumber;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EGN("EGN"),
    
    LNCH("LNCh");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  @javax.annotation.Nullable
  private String phoneNumber;

  public static final String SERIALIZED_NAME_REQUEST_FROM = "requestFrom";
  @SerializedName(SERIALIZED_NAME_REQUEST_FROM)
  @javax.annotation.Nullable
  private RequestFromDto requestFrom;

  public ApprovalAuthenticationRequestDto() {
  }

  public ApprovalAuthenticationRequestDto levelOfAssurance(@javax.annotation.Nullable LevelOfAssuranceEnum levelOfAssurance) {
    this.levelOfAssurance = levelOfAssurance;
    return this;
  }

  /**
   * Get levelOfAssurance
   * @return levelOfAssurance
   */
  @javax.annotation.Nullable
  public LevelOfAssuranceEnum getLevelOfAssurance() {
    return levelOfAssurance;
  }

  public void setLevelOfAssurance(@javax.annotation.Nullable LevelOfAssuranceEnum levelOfAssurance) {
    this.levelOfAssurance = levelOfAssurance;
  }


  public ApprovalAuthenticationRequestDto citizenNumber(@javax.annotation.Nonnull String citizenNumber) {
    this.citizenNumber = citizenNumber;
    return this;
  }

  /**
   * Get citizenNumber
   * @return citizenNumber
   */
  @javax.annotation.Nonnull
  public String getCitizenNumber() {
    return citizenNumber;
  }

  public void setCitizenNumber(@javax.annotation.Nonnull String citizenNumber) {
    this.citizenNumber = citizenNumber;
  }


  public ApprovalAuthenticationRequestDto type(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public ApprovalAuthenticationRequestDto phoneNumber(@javax.annotation.Nullable String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(@javax.annotation.Nullable String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public ApprovalAuthenticationRequestDto requestFrom(@javax.annotation.Nullable RequestFromDto requestFrom) {
    this.requestFrom = requestFrom;
    return this;
  }

  /**
   * Get requestFrom
   * @return requestFrom
   */
  @javax.annotation.Nullable
  public RequestFromDto getRequestFrom() {
    return requestFrom;
  }

  public void setRequestFrom(@javax.annotation.Nullable RequestFromDto requestFrom) {
    this.requestFrom = requestFrom;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApprovalAuthenticationRequestDto approvalAuthenticationRequestDto = (ApprovalAuthenticationRequestDto) o;
    return Objects.equals(this.levelOfAssurance, approvalAuthenticationRequestDto.levelOfAssurance) &&
        Objects.equals(this.citizenNumber, approvalAuthenticationRequestDto.citizenNumber) &&
        Objects.equals(this.type, approvalAuthenticationRequestDto.type) &&
        Objects.equals(this.phoneNumber, approvalAuthenticationRequestDto.phoneNumber) &&
        Objects.equals(this.requestFrom, approvalAuthenticationRequestDto.requestFrom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(levelOfAssurance, citizenNumber, type, phoneNumber, requestFrom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApprovalAuthenticationRequestDto {\n");
    sb.append("    levelOfAssurance: ").append(toIndentedString(levelOfAssurance)).append("\n");
    sb.append("    citizenNumber: ").append(toIndentedString(citizenNumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    requestFrom: ").append(toIndentedString(requestFrom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("levelOfAssurance");
    openapiFields.add("citizenNumber");
    openapiFields.add("type");
    openapiFields.add("phoneNumber");
    openapiFields.add("requestFrom");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("citizenNumber");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApprovalAuthenticationRequestDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApprovalAuthenticationRequestDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApprovalAuthenticationRequestDto is not found in the empty JSON string", ApprovalAuthenticationRequestDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApprovalAuthenticationRequestDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApprovalAuthenticationRequestDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApprovalAuthenticationRequestDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("levelOfAssurance") != null && !jsonObj.get("levelOfAssurance").isJsonNull()) && !jsonObj.get("levelOfAssurance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `levelOfAssurance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("levelOfAssurance").toString()));
      }
      // validate the optional field `levelOfAssurance`
      if (jsonObj.get("levelOfAssurance") != null && !jsonObj.get("levelOfAssurance").isJsonNull()) {
        LevelOfAssuranceEnum.validateJsonElement(jsonObj.get("levelOfAssurance"));
      }
      if (!jsonObj.get("citizenNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `citizenNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("citizenNumber").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      // validate the optional field `requestFrom`
      if (jsonObj.get("requestFrom") != null && !jsonObj.get("requestFrom").isJsonNull()) {
        RequestFromDto.validateJsonElement(jsonObj.get("requestFrom"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApprovalAuthenticationRequestDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApprovalAuthenticationRequestDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApprovalAuthenticationRequestDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApprovalAuthenticationRequestDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ApprovalAuthenticationRequestDto>() {
           @Override
           public void write(JsonWriter out, ApprovalAuthenticationRequestDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApprovalAuthenticationRequestDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApprovalAuthenticationRequestDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApprovalAuthenticationRequestDto
   * @throws IOException if the JSON string is invalid with respect to ApprovalAuthenticationRequestDto
   */
  public static ApprovalAuthenticationRequestDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApprovalAuthenticationRequestDto.class);
  }

  /**
   * Convert an instance of ApprovalAuthenticationRequestDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

