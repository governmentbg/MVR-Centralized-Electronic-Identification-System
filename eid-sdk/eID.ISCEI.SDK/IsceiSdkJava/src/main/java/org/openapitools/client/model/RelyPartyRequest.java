/*
 * ISCEI HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eid.sdk.iscei.JSON;

/**
 * RelyPartyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-11T13:52:49.955870100+03:00[Europe/Kiev]", comments = "Generator version: 7.13.0")
public class RelyPartyRequest {
  public static final String SERIALIZED_NAME_LOGIN_HINT = "login_hint";
  @SerializedName(SERIALIZED_NAME_LOGIN_HINT)
  @javax.annotation.Nullable
  private String loginHint;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  @javax.annotation.Nullable
  private String scope;

  public static final String SERIALIZED_NAME_IS_CONSENT_REQUIRED = "is_consent_required";
  @SerializedName(SERIALIZED_NAME_IS_CONSENT_REQUIRED)
  @javax.annotation.Nullable
  private Boolean isConsentRequired;

  public static final String SERIALIZED_NAME_BINDING_MESSAGE = "binding_message";
  @SerializedName(SERIALIZED_NAME_BINDING_MESSAGE)
  @javax.annotation.Nullable
  private String bindingMessage;

  public static final String SERIALIZED_NAME_ACR_VALUES = "acr_values";
  @SerializedName(SERIALIZED_NAME_ACR_VALUES)
  @javax.annotation.Nullable
  private String acrValues;

  public RelyPartyRequest() {
  }

  public RelyPartyRequest loginHint(@javax.annotation.Nullable String loginHint) {
    this.loginHint = loginHint;
    return this;
  }

  /**
   * Get loginHint
   * @return loginHint
   */
  @javax.annotation.Nullable
  public String getLoginHint() {
    return loginHint;
  }

  public void setLoginHint(@javax.annotation.Nullable String loginHint) {
    this.loginHint = loginHint;
  }


  public RelyPartyRequest scope(@javax.annotation.Nullable String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(@javax.annotation.Nullable String scope) {
    this.scope = scope;
  }


  public RelyPartyRequest isConsentRequired(@javax.annotation.Nullable Boolean isConsentRequired) {
    this.isConsentRequired = isConsentRequired;
    return this;
  }

  /**
   * Get isConsentRequired
   * @return isConsentRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsConsentRequired() {
    return isConsentRequired;
  }

  public void setIsConsentRequired(@javax.annotation.Nullable Boolean isConsentRequired) {
    this.isConsentRequired = isConsentRequired;
  }


  public RelyPartyRequest bindingMessage(@javax.annotation.Nullable String bindingMessage) {
    this.bindingMessage = bindingMessage;
    return this;
  }

  /**
   * Get bindingMessage
   * @return bindingMessage
   */
  @javax.annotation.Nullable
  public String getBindingMessage() {
    return bindingMessage;
  }

  public void setBindingMessage(@javax.annotation.Nullable String bindingMessage) {
    this.bindingMessage = bindingMessage;
  }


  public RelyPartyRequest acrValues(@javax.annotation.Nullable String acrValues) {
    this.acrValues = acrValues;
    return this;
  }

  /**
   * Get acrValues
   * @return acrValues
   */
  @javax.annotation.Nullable
  public String getAcrValues() {
    return acrValues;
  }

  public void setAcrValues(@javax.annotation.Nullable String acrValues) {
    this.acrValues = acrValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelyPartyRequest relyPartyRequest = (RelyPartyRequest) o;
    return Objects.equals(this.loginHint, relyPartyRequest.loginHint) &&
        Objects.equals(this.scope, relyPartyRequest.scope) &&
        Objects.equals(this.isConsentRequired, relyPartyRequest.isConsentRequired) &&
        Objects.equals(this.bindingMessage, relyPartyRequest.bindingMessage) &&
        Objects.equals(this.acrValues, relyPartyRequest.acrValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loginHint, scope, isConsentRequired, bindingMessage, acrValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelyPartyRequest {\n");
    sb.append("    loginHint: ").append(toIndentedString(loginHint)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    isConsentRequired: ").append(toIndentedString(isConsentRequired)).append("\n");
    sb.append("    bindingMessage: ").append(toIndentedString(bindingMessage)).append("\n");
    sb.append("    acrValues: ").append(toIndentedString(acrValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("login_hint");
    openapiFields.add("scope");
    openapiFields.add("is_consent_required");
    openapiFields.add("binding_message");
    openapiFields.add("acr_values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RelyPartyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelyPartyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelyPartyRequest is not found in the empty JSON string", RelyPartyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RelyPartyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RelyPartyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("login_hint") != null && !jsonObj.get("login_hint").isJsonNull()) && !jsonObj.get("login_hint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login_hint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login_hint").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("binding_message") != null && !jsonObj.get("binding_message").isJsonNull()) && !jsonObj.get("binding_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `binding_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("binding_message").toString()));
      }
      if ((jsonObj.get("acr_values") != null && !jsonObj.get("acr_values").isJsonNull()) && !jsonObj.get("acr_values").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acr_values` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acr_values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelyPartyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelyPartyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelyPartyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelyPartyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RelyPartyRequest>() {
           @Override
           public void write(JsonWriter out, RelyPartyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelyPartyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RelyPartyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RelyPartyRequest
   * @throws IOException if the JSON string is invalid with respect to RelyPartyRequest
   */
  public static RelyPartyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelyPartyRequest.class);
  }

  /**
   * Convert an instance of RelyPartyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

