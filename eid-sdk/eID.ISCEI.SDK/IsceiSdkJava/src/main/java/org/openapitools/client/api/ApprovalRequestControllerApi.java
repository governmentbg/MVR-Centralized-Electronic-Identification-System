/*
 * ISCEI HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import eid.sdk.iscei.ApiCallback;
import eid.sdk.iscei.ApiClient;
import eid.sdk.iscei.ApiException;
import eid.sdk.iscei.ApiResponse;
import eid.sdk.iscei.Configuration;
import eid.sdk.iscei.Pair;
import eid.sdk.iscei.ProgressRequestBody;
import eid.sdk.iscei.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApprovalAuthenticationRequestDto;
import org.openapitools.client.model.ApprovalRequestResponse;
import org.openapitools.client.model.ApprovalRequestToken;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RelyPartyRequest;
import org.openapitools.client.model.RequestOutcome;
import java.util.Set;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApprovalRequestControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApprovalRequestControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApprovalRequestControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for approvalRequestAuth
     * @param clientId  (required)
     * @param approvalAuthenticationRequestDto  (required)
     * @param scope  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approvalRequestAuthCall(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull ApprovalAuthenticationRequestDto approvalAuthenticationRequestDto, @javax.annotation.Nullable Set<String> scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = approvalAuthenticationRequestDto;

        // create path and map variables
        String localVarPath = "/api/v1/approval-request/auth/citizen";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (scope != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "scope", scope));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ISCEI" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approvalRequestAuthValidateBeforeCall(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull ApprovalAuthenticationRequestDto approvalAuthenticationRequestDto, @javax.annotation.Nullable Set<String> scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling approvalRequestAuth(Async)");
        }

        // verify the required parameter 'approvalAuthenticationRequestDto' is set
        if (approvalAuthenticationRequestDto == null) {
            throw new ApiException("Missing the required parameter 'approvalAuthenticationRequestDto' when calling approvalRequestAuth(Async)");
        }

        return approvalRequestAuthCall(clientId, approvalAuthenticationRequestDto, scope, _callback);

    }

    /**
     * 
     * 
     * @param clientId  (required)
     * @param approvalAuthenticationRequestDto  (required)
     * @param scope  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object approvalRequestAuth(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull ApprovalAuthenticationRequestDto approvalAuthenticationRequestDto, @javax.annotation.Nullable Set<String> scope) throws ApiException {
        ApiResponse<Object> localVarResp = approvalRequestAuthWithHttpInfo(clientId, approvalAuthenticationRequestDto, scope);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param clientId  (required)
     * @param approvalAuthenticationRequestDto  (required)
     * @param scope  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> approvalRequestAuthWithHttpInfo(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull ApprovalAuthenticationRequestDto approvalAuthenticationRequestDto, @javax.annotation.Nullable Set<String> scope) throws ApiException {
        okhttp3.Call localVarCall = approvalRequestAuthValidateBeforeCall(clientId, approvalAuthenticationRequestDto, scope, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param clientId  (required)
     * @param approvalAuthenticationRequestDto  (required)
     * @param scope  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approvalRequestAuthAsync(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull ApprovalAuthenticationRequestDto approvalAuthenticationRequestDto, @javax.annotation.Nullable Set<String> scope, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = approvalRequestAuthValidateBeforeCall(clientId, approvalAuthenticationRequestDto, scope, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for approvalRequestToken
     * @param clientId  (required)
     * @param approvalRequestToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approvalRequestTokenCall(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull ApprovalRequestToken approvalRequestToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = approvalRequestToken;

        // create path and map variables
        String localVarPath = "/api/v1/approval-request/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ISCEI" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approvalRequestTokenValidateBeforeCall(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull ApprovalRequestToken approvalRequestToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling approvalRequestToken(Async)");
        }

        // verify the required parameter 'approvalRequestToken' is set
        if (approvalRequestToken == null) {
            throw new ApiException("Missing the required parameter 'approvalRequestToken' when calling approvalRequestToken(Async)");
        }

        return approvalRequestTokenCall(clientId, approvalRequestToken, _callback);

    }

    /**
     * 
     * 
     * @param clientId  (required)
     * @param approvalRequestToken  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String approvalRequestToken(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull ApprovalRequestToken approvalRequestToken) throws ApiException {
        ApiResponse<String> localVarResp = approvalRequestTokenWithHttpInfo(clientId, approvalRequestToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param clientId  (required)
     * @param approvalRequestToken  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> approvalRequestTokenWithHttpInfo(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull ApprovalRequestToken approvalRequestToken) throws ApiException {
        okhttp3.Call localVarCall = approvalRequestTokenValidateBeforeCall(clientId, approvalRequestToken, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param clientId  (required)
     * @param approvalRequestToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approvalRequestTokenAsync(@javax.annotation.Nonnull String clientId, @javax.annotation.Nonnull ApprovalRequestToken approvalRequestToken, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = approvalRequestTokenValidateBeforeCall(clientId, approvalRequestToken, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cibaRelyParty
     * @param relyPartyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cibaRelyPartyCall(@javax.annotation.Nonnull RelyPartyRequest relyPartyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = relyPartyRequest;

        // create path and map variables
        String localVarPath = "/api/v1/approval-request/rely-party";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ISCEI" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cibaRelyPartyValidateBeforeCall(@javax.annotation.Nonnull RelyPartyRequest relyPartyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'relyPartyRequest' is set
        if (relyPartyRequest == null) {
            throw new ApiException("Missing the required parameter 'relyPartyRequest' when calling cibaRelyParty(Async)");
        }

        return cibaRelyPartyCall(relyPartyRequest, _callback);

    }

    /**
     * 
     * 
     * @param relyPartyRequest  (required)
     * @return OffsetDateTime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public OffsetDateTime cibaRelyParty(@javax.annotation.Nonnull RelyPartyRequest relyPartyRequest) throws ApiException {
        ApiResponse<OffsetDateTime> localVarResp = cibaRelyPartyWithHttpInfo(relyPartyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param relyPartyRequest  (required)
     * @return ApiResponse&lt;OffsetDateTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OffsetDateTime> cibaRelyPartyWithHttpInfo(@javax.annotation.Nonnull RelyPartyRequest relyPartyRequest) throws ApiException {
        okhttp3.Call localVarCall = cibaRelyPartyValidateBeforeCall(relyPartyRequest, null);
        Type localVarReturnType = new TypeToken<OffsetDateTime>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param relyPartyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cibaRelyPartyAsync(@javax.annotation.Nonnull RelyPartyRequest relyPartyRequest, final ApiCallback<OffsetDateTime> _callback) throws ApiException {

        okhttp3.Call localVarCall = cibaRelyPartyValidateBeforeCall(relyPartyRequest, _callback);
        Type localVarReturnType = new TypeToken<OffsetDateTime>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for evaluateRequestOutcome
     * @param approvalRequestId  (required)
     * @param requestOutcome  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateRequestOutcomeCall(@javax.annotation.Nonnull UUID approvalRequestId, @javax.annotation.Nonnull RequestOutcome requestOutcome, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestOutcome;

        // create path and map variables
        String localVarPath = "/api/v1/approval-request/outcome";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (approvalRequestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approvalRequestId", approvalRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ISCEI" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evaluateRequestOutcomeValidateBeforeCall(@javax.annotation.Nonnull UUID approvalRequestId, @javax.annotation.Nonnull RequestOutcome requestOutcome, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'approvalRequestId' is set
        if (approvalRequestId == null) {
            throw new ApiException("Missing the required parameter 'approvalRequestId' when calling evaluateRequestOutcome(Async)");
        }

        // verify the required parameter 'requestOutcome' is set
        if (requestOutcome == null) {
            throw new ApiException("Missing the required parameter 'requestOutcome' when calling evaluateRequestOutcome(Async)");
        }

        return evaluateRequestOutcomeCall(approvalRequestId, requestOutcome, _callback);

    }

    /**
     * 
     * 
     * @param approvalRequestId  (required)
     * @param requestOutcome  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String evaluateRequestOutcome(@javax.annotation.Nonnull UUID approvalRequestId, @javax.annotation.Nonnull RequestOutcome requestOutcome) throws ApiException {
        ApiResponse<String> localVarResp = evaluateRequestOutcomeWithHttpInfo(approvalRequestId, requestOutcome);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param approvalRequestId  (required)
     * @param requestOutcome  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> evaluateRequestOutcomeWithHttpInfo(@javax.annotation.Nonnull UUID approvalRequestId, @javax.annotation.Nonnull RequestOutcome requestOutcome) throws ApiException {
        okhttp3.Call localVarCall = evaluateRequestOutcomeValidateBeforeCall(approvalRequestId, requestOutcome, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param approvalRequestId  (required)
     * @param requestOutcome  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateRequestOutcomeAsync(@javax.annotation.Nonnull UUID approvalRequestId, @javax.annotation.Nonnull RequestOutcome requestOutcome, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = evaluateRequestOutcomeValidateBeforeCall(approvalRequestId, requestOutcome, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserApprovalRequests
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserApprovalRequestsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/approval-request/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ISCEI" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserApprovalRequestsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserApprovalRequestsCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;ApprovalRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ApprovalRequestResponse> getUserApprovalRequests() throws ApiException {
        ApiResponse<List<ApprovalRequestResponse>> localVarResp = getUserApprovalRequestsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;ApprovalRequestResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ApprovalRequestResponse>> getUserApprovalRequestsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserApprovalRequestsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ApprovalRequestResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserApprovalRequestsAsync(final ApiCallback<List<ApprovalRequestResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserApprovalRequestsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ApprovalRequestResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
