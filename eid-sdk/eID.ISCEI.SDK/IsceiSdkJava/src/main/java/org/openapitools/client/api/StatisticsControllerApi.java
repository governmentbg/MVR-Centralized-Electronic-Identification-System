/*
 * ISCEI HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import eid.sdk.iscei.ApiCallback;
import eid.sdk.iscei.ApiClient;
import eid.sdk.iscei.ApiException;
import eid.sdk.iscei.ApiResponse;
import eid.sdk.iscei.Configuration;
import eid.sdk.iscei.Pair;
import eid.sdk.iscei.ProgressRequestBody;
import eid.sdk.iscei.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatisticsControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatisticsControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatisticsControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reportDetailed
     * @param createDateFrom  (required)
     * @param createDateTo  (required)
     * @param systemType  (optional)
     * @param clientId  (optional)
     * @param isEmployee  (optional)
     * @param success  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportDetailedCall(@javax.annotation.Nonnull OffsetDateTime createDateFrom, @javax.annotation.Nonnull OffsetDateTime createDateTo, @javax.annotation.Nullable String systemType, @javax.annotation.Nullable String clientId, @javax.annotation.Nullable Boolean isEmployee, @javax.annotation.Nullable Boolean success, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statistics/report/detailed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createDateFrom", createDateFrom));
        }

        if (createDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createDateTo", createDateTo));
        }

        if (systemType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("systemType", systemType));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (isEmployee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isEmployee", isEmployee));
        }

        if (success != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("success", success));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ISCEI" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportDetailedValidateBeforeCall(@javax.annotation.Nonnull OffsetDateTime createDateFrom, @javax.annotation.Nonnull OffsetDateTime createDateTo, @javax.annotation.Nullable String systemType, @javax.annotation.Nullable String clientId, @javax.annotation.Nullable Boolean isEmployee, @javax.annotation.Nullable Boolean success, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDateFrom' is set
        if (createDateFrom == null) {
            throw new ApiException("Missing the required parameter 'createDateFrom' when calling reportDetailed(Async)");
        }

        // verify the required parameter 'createDateTo' is set
        if (createDateTo == null) {
            throw new ApiException("Missing the required parameter 'createDateTo' when calling reportDetailed(Async)");
        }

        return reportDetailedCall(createDateFrom, createDateTo, systemType, clientId, isEmployee, success, _callback);

    }

    /**
     * 
     * 
     * @param createDateFrom  (required)
     * @param createDateTo  (required)
     * @param systemType  (optional)
     * @param clientId  (optional)
     * @param isEmployee  (optional)
     * @param success  (optional)
     * @return List&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<List<String>> reportDetailed(@javax.annotation.Nonnull OffsetDateTime createDateFrom, @javax.annotation.Nonnull OffsetDateTime createDateTo, @javax.annotation.Nullable String systemType, @javax.annotation.Nullable String clientId, @javax.annotation.Nullable Boolean isEmployee, @javax.annotation.Nullable Boolean success) throws ApiException {
        ApiResponse<List<List<String>>> localVarResp = reportDetailedWithHttpInfo(createDateFrom, createDateTo, systemType, clientId, isEmployee, success);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createDateFrom  (required)
     * @param createDateTo  (required)
     * @param systemType  (optional)
     * @param clientId  (optional)
     * @param isEmployee  (optional)
     * @param success  (optional)
     * @return ApiResponse&lt;List&lt;List&lt;String&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<List<String>>> reportDetailedWithHttpInfo(@javax.annotation.Nonnull OffsetDateTime createDateFrom, @javax.annotation.Nonnull OffsetDateTime createDateTo, @javax.annotation.Nullable String systemType, @javax.annotation.Nullable String clientId, @javax.annotation.Nullable Boolean isEmployee, @javax.annotation.Nullable Boolean success) throws ApiException {
        okhttp3.Call localVarCall = reportDetailedValidateBeforeCall(createDateFrom, createDateTo, systemType, clientId, isEmployee, success, null);
        Type localVarReturnType = new TypeToken<List<List<String>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createDateFrom  (required)
     * @param createDateTo  (required)
     * @param systemType  (optional)
     * @param clientId  (optional)
     * @param isEmployee  (optional)
     * @param success  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportDetailedAsync(@javax.annotation.Nonnull OffsetDateTime createDateFrom, @javax.annotation.Nonnull OffsetDateTime createDateTo, @javax.annotation.Nullable String systemType, @javax.annotation.Nullable String clientId, @javax.annotation.Nullable Boolean isEmployee, @javax.annotation.Nullable Boolean success, final ApiCallback<List<List<String>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportDetailedValidateBeforeCall(createDateFrom, createDateTo, systemType, clientId, isEmployee, success, _callback);
        Type localVarReturnType = new TypeToken<List<List<String>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportRequestsCount
     * @param createDateFrom  (required)
     * @param createDateTo  (required)
     * @param systemType  (optional)
     * @param clientId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportRequestsCountCall(@javax.annotation.Nonnull OffsetDateTime createDateFrom, @javax.annotation.Nonnull OffsetDateTime createDateTo, @javax.annotation.Nullable String systemType, @javax.annotation.Nullable String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statistics/report/requests-count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createDateFrom", createDateFrom));
        }

        if (createDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createDateTo", createDateTo));
        }

        if (systemType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("systemType", systemType));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ISCEI" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportRequestsCountValidateBeforeCall(@javax.annotation.Nonnull OffsetDateTime createDateFrom, @javax.annotation.Nonnull OffsetDateTime createDateTo, @javax.annotation.Nullable String systemType, @javax.annotation.Nullable String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDateFrom' is set
        if (createDateFrom == null) {
            throw new ApiException("Missing the required parameter 'createDateFrom' when calling reportRequestsCount(Async)");
        }

        // verify the required parameter 'createDateTo' is set
        if (createDateTo == null) {
            throw new ApiException("Missing the required parameter 'createDateTo' when calling reportRequestsCount(Async)");
        }

        return reportRequestsCountCall(createDateFrom, createDateTo, systemType, clientId, _callback);

    }

    /**
     * 
     * 
     * @param createDateFrom  (required)
     * @param createDateTo  (required)
     * @param systemType  (optional)
     * @param clientId  (optional)
     * @return List&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<List<String>> reportRequestsCount(@javax.annotation.Nonnull OffsetDateTime createDateFrom, @javax.annotation.Nonnull OffsetDateTime createDateTo, @javax.annotation.Nullable String systemType, @javax.annotation.Nullable String clientId) throws ApiException {
        ApiResponse<List<List<String>>> localVarResp = reportRequestsCountWithHttpInfo(createDateFrom, createDateTo, systemType, clientId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createDateFrom  (required)
     * @param createDateTo  (required)
     * @param systemType  (optional)
     * @param clientId  (optional)
     * @return ApiResponse&lt;List&lt;List&lt;String&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<List<String>>> reportRequestsCountWithHttpInfo(@javax.annotation.Nonnull OffsetDateTime createDateFrom, @javax.annotation.Nonnull OffsetDateTime createDateTo, @javax.annotation.Nullable String systemType, @javax.annotation.Nullable String clientId) throws ApiException {
        okhttp3.Call localVarCall = reportRequestsCountValidateBeforeCall(createDateFrom, createDateTo, systemType, clientId, null);
        Type localVarReturnType = new TypeToken<List<List<String>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createDateFrom  (required)
     * @param createDateTo  (required)
     * @param systemType  (optional)
     * @param clientId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportRequestsCountAsync(@javax.annotation.Nonnull OffsetDateTime createDateFrom, @javax.annotation.Nonnull OffsetDateTime createDateTo, @javax.annotation.Nullable String systemType, @javax.annotation.Nullable String clientId, final ApiCallback<List<List<String>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportRequestsCountValidateBeforeCall(createDateFrom, createDateTo, systemType, clientId, _callback);
        Type localVarReturnType = new TypeToken<List<List<String>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportRequestsTotal
     * @param year  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportRequestsTotalCall(@javax.annotation.Nonnull Integer year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statistics/report/requests-total";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ISCEI" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportRequestsTotalValidateBeforeCall(@javax.annotation.Nonnull Integer year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling reportRequestsTotal(Async)");
        }

        return reportRequestsTotalCall(year, _callback);

    }

    /**
     * 
     * 
     * @param year  (required)
     * @return List&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<List<String>> reportRequestsTotal(@javax.annotation.Nonnull Integer year) throws ApiException {
        ApiResponse<List<List<String>>> localVarResp = reportRequestsTotalWithHttpInfo(year);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param year  (required)
     * @return ApiResponse&lt;List&lt;List&lt;String&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<List<String>>> reportRequestsTotalWithHttpInfo(@javax.annotation.Nonnull Integer year) throws ApiException {
        okhttp3.Call localVarCall = reportRequestsTotalValidateBeforeCall(year, null);
        Type localVarReturnType = new TypeToken<List<List<String>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param year  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportRequestsTotalAsync(@javax.annotation.Nonnull Integer year, final ApiCallback<List<List<String>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportRequestsTotalValidateBeforeCall(year, _callback);
        Type localVarReturnType = new TypeToken<List<List<String>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
