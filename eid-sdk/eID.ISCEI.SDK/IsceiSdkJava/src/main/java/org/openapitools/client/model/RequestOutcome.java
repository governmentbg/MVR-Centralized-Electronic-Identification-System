/*
 * ISCEI HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SignedChallenge;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eid.sdk.iscei.JSON;

/**
 * RequestOutcome
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-11T13:52:49.955870100+03:00[Europe/Kiev]", comments = "Generator version: 7.13.0")
public class RequestOutcome {
  public static final String SERIALIZED_NAME_SIGNED_CHALLENGE = "signedChallenge";
  @SerializedName(SERIALIZED_NAME_SIGNED_CHALLENGE)
  @javax.annotation.Nullable
  private SignedChallenge signedChallenge;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nullable
  private String clientId;

  /**
   * Gets or Sets approvalRequestStatus
   */
  @JsonAdapter(ApprovalRequestStatusEnum.Adapter.class)
  public enum ApprovalRequestStatusEnum {
    SUCCEED("SUCCEED"),
    
    UNAUTHORIZED("UNAUTHORIZED"),
    
    CANCELLED("CANCELLED");

    private String value;

    ApprovalRequestStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApprovalRequestStatusEnum fromValue(String value) {
      for (ApprovalRequestStatusEnum b : ApprovalRequestStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApprovalRequestStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApprovalRequestStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApprovalRequestStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApprovalRequestStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApprovalRequestStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPROVAL_REQUEST_STATUS = "approvalRequestStatus";
  @SerializedName(SERIALIZED_NAME_APPROVAL_REQUEST_STATUS)
  @javax.annotation.Nullable
  private ApprovalRequestStatusEnum approvalRequestStatus;

  public RequestOutcome() {
  }

  public RequestOutcome signedChallenge(@javax.annotation.Nullable SignedChallenge signedChallenge) {
    this.signedChallenge = signedChallenge;
    return this;
  }

  /**
   * Get signedChallenge
   * @return signedChallenge
   */
  @javax.annotation.Nullable
  public SignedChallenge getSignedChallenge() {
    return signedChallenge;
  }

  public void setSignedChallenge(@javax.annotation.Nullable SignedChallenge signedChallenge) {
    this.signedChallenge = signedChallenge;
  }


  public RequestOutcome clientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
  }


  public RequestOutcome approvalRequestStatus(@javax.annotation.Nullable ApprovalRequestStatusEnum approvalRequestStatus) {
    this.approvalRequestStatus = approvalRequestStatus;
    return this;
  }

  /**
   * Get approvalRequestStatus
   * @return approvalRequestStatus
   */
  @javax.annotation.Nullable
  public ApprovalRequestStatusEnum getApprovalRequestStatus() {
    return approvalRequestStatus;
  }

  public void setApprovalRequestStatus(@javax.annotation.Nullable ApprovalRequestStatusEnum approvalRequestStatus) {
    this.approvalRequestStatus = approvalRequestStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestOutcome requestOutcome = (RequestOutcome) o;
    return Objects.equals(this.signedChallenge, requestOutcome.signedChallenge) &&
        Objects.equals(this.clientId, requestOutcome.clientId) &&
        Objects.equals(this.approvalRequestStatus, requestOutcome.approvalRequestStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signedChallenge, clientId, approvalRequestStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestOutcome {\n");
    sb.append("    signedChallenge: ").append(toIndentedString(signedChallenge)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    approvalRequestStatus: ").append(toIndentedString(approvalRequestStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("signedChallenge");
    openapiFields.add("clientId");
    openapiFields.add("approvalRequestStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestOutcome
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestOutcome.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestOutcome is not found in the empty JSON string", RequestOutcome.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestOutcome.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestOutcome` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `signedChallenge`
      if (jsonObj.get("signedChallenge") != null && !jsonObj.get("signedChallenge").isJsonNull()) {
        SignedChallenge.validateJsonElement(jsonObj.get("signedChallenge"));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("approvalRequestStatus") != null && !jsonObj.get("approvalRequestStatus").isJsonNull()) && !jsonObj.get("approvalRequestStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalRequestStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalRequestStatus").toString()));
      }
      // validate the optional field `approvalRequestStatus`
      if (jsonObj.get("approvalRequestStatus") != null && !jsonObj.get("approvalRequestStatus").isJsonNull()) {
        ApprovalRequestStatusEnum.validateJsonElement(jsonObj.get("approvalRequestStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestOutcome.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestOutcome' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestOutcome> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestOutcome.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestOutcome>() {
           @Override
           public void write(JsonWriter out, RequestOutcome value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestOutcome read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestOutcome given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestOutcome
   * @throws IOException if the JSON string is invalid with respect to RequestOutcome
   */
  public static RequestOutcome fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestOutcome.class);
  }

  /**
   * Convert an instance of RequestOutcome to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

