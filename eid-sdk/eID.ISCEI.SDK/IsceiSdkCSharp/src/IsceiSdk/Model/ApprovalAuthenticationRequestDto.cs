/*
 * ISCEI HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = IsceiSdk.Client.FileParameter;
using OpenAPIDateConverter = IsceiSdk.Client.OpenAPIDateConverter;

namespace IsceiSdk.Model
{
    /// <summary>
    /// ApprovalAuthenticationRequestDto
    /// </summary>
    [DataContract(Name = "ApprovalAuthenticationRequestDto")]
    public partial class ApprovalAuthenticationRequestDto : IValidatableObject
    {
        /// <summary>
        /// Defines LevelOfAssurance
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LevelOfAssuranceEnum
        {
            /// <summary>
            /// Enum LOW for value: LOW
            /// </summary>
            [EnumMember(Value = "LOW")]
            LOW = 1,

            /// <summary>
            /// Enum SUBSTANTIAL for value: SUBSTANTIAL
            /// </summary>
            [EnumMember(Value = "SUBSTANTIAL")]
            SUBSTANTIAL = 2,

            /// <summary>
            /// Enum HIGH for value: HIGH
            /// </summary>
            [EnumMember(Value = "HIGH")]
            HIGH = 3
        }


        /// <summary>
        /// Gets or Sets LevelOfAssurance
        /// </summary>
        [DataMember(Name = "levelOfAssurance", EmitDefaultValue = false)]
        public LevelOfAssuranceEnum? LevelOfAssurance { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum EGN for value: EGN
            /// </summary>
            [EnumMember(Value = "EGN")]
            EGN = 1,

            /// <summary>
            /// Enum LNCh for value: LNCh
            /// </summary>
            [EnumMember(Value = "LNCh")]
            LNCh = 2
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalAuthenticationRequestDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApprovalAuthenticationRequestDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalAuthenticationRequestDto" /> class.
        /// </summary>
        /// <param name="levelOfAssurance">levelOfAssurance.</param>
        /// <param name="citizenNumber">citizenNumber (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="requestFrom">requestFrom.</param>
        public ApprovalAuthenticationRequestDto(LevelOfAssuranceEnum? levelOfAssurance = default, string citizenNumber = default, TypeEnum type = default, string phoneNumber = default, RequestFromDto requestFrom = default)
        {
            // to ensure "citizenNumber" is required (not null)
            if (citizenNumber == null)
            {
                throw new ArgumentNullException("citizenNumber is a required property for ApprovalAuthenticationRequestDto and cannot be null");
            }
            this.CitizenNumber = citizenNumber;
            this.Type = type;
            this.LevelOfAssurance = levelOfAssurance;
            this.PhoneNumber = phoneNumber;
            this.RequestFrom = requestFrom;
        }

        /// <summary>
        /// Gets or Sets CitizenNumber
        /// </summary>
        [DataMember(Name = "citizenNumber", IsRequired = true, EmitDefaultValue = true)]
        public string CitizenNumber { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets RequestFrom
        /// </summary>
        [DataMember(Name = "requestFrom", EmitDefaultValue = false)]
        public RequestFromDto RequestFrom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApprovalAuthenticationRequestDto {\n");
            sb.Append("  LevelOfAssurance: ").Append(LevelOfAssurance).Append("\n");
            sb.Append("  CitizenNumber: ").Append(CitizenNumber).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  RequestFrom: ").Append(RequestFrom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.PhoneNumber != null) {
                // PhoneNumber (string) pattern
                Regex regexPhoneNumber = new Regex(@"^(?:\+\d{3}\d{9}|0\d{9})?$|^$", RegexOptions.CultureInvariant);
                if (!regexPhoneNumber.Match(this.PhoneNumber).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, must match a pattern of " + regexPhoneNumber, new [] { "PhoneNumber" });
                }
            }

            yield break;
        }
    }

}
