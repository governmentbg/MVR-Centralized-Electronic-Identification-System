/*
 * ISCEI HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = IsceiSdk.Client.FileParameter;
using OpenAPIDateConverter = IsceiSdk.Client.OpenAPIDateConverter;

namespace IsceiSdk.Model
{
    /// <summary>
    /// BasicLoginRequestDto
    /// </summary>
    [DataContract(Name = "BasicLoginRequestDto")]
    public partial class BasicLoginRequestDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicLoginRequestDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BasicLoginRequestDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicLoginRequestDto" /> class.
        /// </summary>
        /// <param name="clientId">clientId.</param>
        /// <param name="email">email (required).</param>
        /// <param name="password">password (required).</param>
        public BasicLoginRequestDto(string clientId = default, string email = default, string password = default)
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for BasicLoginRequestDto and cannot be null");
            }
            this.Email = email;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for BasicLoginRequestDto and cannot be null");
            }
            this.Password = password;
            this.ClientId = clientId;
        }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BasicLoginRequestDto {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Email != null) {
                // Email (string) pattern
                Regex regexEmail = new Regex(@"^[a-zA-Z0-9._+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", RegexOptions.CultureInvariant);
                if (!regexEmail.Match(this.Email).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, must match a pattern of " + regexEmail, new [] { "Email" });
                }
            }

            yield break;
        }
    }

}
