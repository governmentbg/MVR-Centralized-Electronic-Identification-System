/*
 * ISCEI HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = IsceiSdk.Client.FileParameter;
using OpenAPIDateConverter = IsceiSdk.Client.OpenAPIDateConverter;

namespace IsceiSdk.Model
{
    /// <summary>
    /// RelyPartyRequest
    /// </summary>
    [DataContract(Name = "RelyPartyRequest")]
    public partial class RelyPartyRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelyPartyRequest" /> class.
        /// </summary>
        /// <param name="loginHint">loginHint.</param>
        /// <param name="scope">scope.</param>
        /// <param name="isConsentRequired">isConsentRequired.</param>
        /// <param name="bindingMessage">bindingMessage.</param>
        /// <param name="acrValues">acrValues.</param>
        public RelyPartyRequest(string loginHint = default, string scope = default, bool isConsentRequired = default, string bindingMessage = default, string acrValues = default)
        {
            this.LoginHint = loginHint;
            this.Scope = scope;
            this.IsConsentRequired = isConsentRequired;
            this.BindingMessage = bindingMessage;
            this.AcrValues = acrValues;
        }

        /// <summary>
        /// Gets or Sets LoginHint
        /// </summary>
        [DataMember(Name = "login_hint", EmitDefaultValue = false)]
        public string LoginHint { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets IsConsentRequired
        /// </summary>
        [DataMember(Name = "is_consent_required", EmitDefaultValue = true)]
        public bool IsConsentRequired { get; set; }

        /// <summary>
        /// Gets or Sets BindingMessage
        /// </summary>
        [DataMember(Name = "binding_message", EmitDefaultValue = false)]
        public string BindingMessage { get; set; }

        /// <summary>
        /// Gets or Sets AcrValues
        /// </summary>
        [DataMember(Name = "acr_values", EmitDefaultValue = false)]
        public string AcrValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelyPartyRequest {\n");
            sb.Append("  LoginHint: ").Append(LoginHint).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  IsConsentRequired: ").Append(IsConsentRequired).Append("\n");
            sb.Append("  BindingMessage: ").Append(BindingMessage).Append("\n");
            sb.Append("  AcrValues: ").Append(AcrValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
