/*
 * ISCEI HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = IsceiSdk.Client.FileParameter;
using OpenAPIDateConverter = IsceiSdk.Client.OpenAPIDateConverter;

namespace IsceiSdk.Model
{
    /// <summary>
    /// RequestOutcome
    /// </summary>
    [DataContract(Name = "RequestOutcome")]
    public partial class RequestOutcome : IValidatableObject
    {
        /// <summary>
        /// Defines ApprovalRequestStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApprovalRequestStatusEnum
        {
            /// <summary>
            /// Enum SUCCEED for value: SUCCEED
            /// </summary>
            [EnumMember(Value = "SUCCEED")]
            SUCCEED = 1,

            /// <summary>
            /// Enum UNAUTHORIZED for value: UNAUTHORIZED
            /// </summary>
            [EnumMember(Value = "UNAUTHORIZED")]
            UNAUTHORIZED = 2,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 3
        }


        /// <summary>
        /// Gets or Sets ApprovalRequestStatus
        /// </summary>
        [DataMember(Name = "approvalRequestStatus", EmitDefaultValue = false)]
        public ApprovalRequestStatusEnum? ApprovalRequestStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestOutcome" /> class.
        /// </summary>
        /// <param name="signedChallenge">signedChallenge.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="approvalRequestStatus">approvalRequestStatus.</param>
        public RequestOutcome(SignedChallenge signedChallenge = default, string clientId = default, ApprovalRequestStatusEnum? approvalRequestStatus = default)
        {
            this.SignedChallenge = signedChallenge;
            this.ClientId = clientId;
            this.ApprovalRequestStatus = approvalRequestStatus;
        }

        /// <summary>
        /// Gets or Sets SignedChallenge
        /// </summary>
        [DataMember(Name = "signedChallenge", EmitDefaultValue = false)]
        public SignedChallenge SignedChallenge { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name = "clientId", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestOutcome {\n");
            sb.Append("  SignedChallenge: ").Append(SignedChallenge).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ApprovalRequestStatus: ").Append(ApprovalRequestStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
