/*
 * ISCEI HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using IsceiSdk.Client;
using IsceiSdk.Model;

namespace IsceiSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommonLoginControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="signedChallenge"></param>
        /// <returns></returns>
        void AssociateEidWithCitizenProfile(string clientId, SignedChallenge signedChallenge);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="signedChallenge"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociateEidWithCitizenProfileWithHttpInfo(string clientId, SignedChallenge signedChallenge);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicLoginRequestDto"></param>
        /// <returns>Object</returns>
        Object BasicLogin(BasicLoginRequestDto basicLoginRequestDto);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicLoginRequestDto"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BasicLoginWithHttpInfo(BasicLoginRequestDto basicLoginRequestDto);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x509CertAuthenticationRequestDto"></param>
        /// <returns>AuthenticationRequestChallengeResponse</returns>
        AuthenticationRequestChallengeResponse GenerateAuthenticationChallenge(X509CertAuthenticationRequestDto x509CertAuthenticationRequestDto);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x509CertAuthenticationRequestDto"></param>
        /// <returns>ApiResponse of AuthenticationRequestChallengeResponse</returns>
        ApiResponse<AuthenticationRequestChallengeResponse> GenerateAuthenticationChallengeWithHttpInfo(X509CertAuthenticationRequestDto x509CertAuthenticationRequestDto);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyOtpDto"></param>
        /// <returns>string</returns>
        string VerifyOtp(VerifyOtpDto verifyOtpDto);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyOtpDto"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VerifyOtpWithHttpInfo(VerifyOtpDto verifyOtpDto);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommonLoginControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="signedChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociateEidWithCitizenProfileAsync(string clientId, SignedChallenge signedChallenge, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="signedChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateEidWithCitizenProfileWithHttpInfoAsync(string clientId, SignedChallenge signedChallenge, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicLoginRequestDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BasicLoginAsync(BasicLoginRequestDto basicLoginRequestDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicLoginRequestDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BasicLoginWithHttpInfoAsync(BasicLoginRequestDto basicLoginRequestDto, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x509CertAuthenticationRequestDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationRequestChallengeResponse</returns>
        System.Threading.Tasks.Task<AuthenticationRequestChallengeResponse> GenerateAuthenticationChallengeAsync(X509CertAuthenticationRequestDto x509CertAuthenticationRequestDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x509CertAuthenticationRequestDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationRequestChallengeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationRequestChallengeResponse>> GenerateAuthenticationChallengeWithHttpInfoAsync(X509CertAuthenticationRequestDto x509CertAuthenticationRequestDto, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyOtpDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VerifyOtpAsync(VerifyOtpDto verifyOtpDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyOtpDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VerifyOtpWithHttpInfoAsync(VerifyOtpDto verifyOtpDto, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommonLoginControllerApi : ICommonLoginControllerApiSync, ICommonLoginControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CommonLoginControllerApi : IDisposable, ICommonLoginControllerApi
    {
        private IsceiSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonLoginControllerApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public CommonLoginControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonLoginControllerApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public CommonLoginControllerApi(string basePath)
        {
            this.Configuration = IsceiSdk.Client.Configuration.MergeConfigurations(
                IsceiSdk.Client.GlobalConfiguration.Instance,
                new IsceiSdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new IsceiSdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = IsceiSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonLoginControllerApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CommonLoginControllerApi(IsceiSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = IsceiSdk.Client.Configuration.MergeConfigurations(
                IsceiSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new IsceiSdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = IsceiSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonLoginControllerApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CommonLoginControllerApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonLoginControllerApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CommonLoginControllerApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = IsceiSdk.Client.Configuration.MergeConfigurations(
                IsceiSdk.Client.GlobalConfiguration.Instance,
                new IsceiSdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new IsceiSdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = IsceiSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonLoginControllerApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CommonLoginControllerApi(HttpClient client, IsceiSdk.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = IsceiSdk.Client.Configuration.MergeConfigurations(
                IsceiSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new IsceiSdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = IsceiSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonLoginControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public CommonLoginControllerApi(IsceiSdk.Client.ISynchronousClient client, IsceiSdk.Client.IAsynchronousClient asyncClient, IsceiSdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = IsceiSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public IsceiSdk.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IsceiSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public IsceiSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IsceiSdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IsceiSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="signedChallenge"></param>
        /// <returns></returns>
        public void AssociateEidWithCitizenProfile(string clientId, SignedChallenge signedChallenge)
        {
            AssociateEidWithCitizenProfileWithHttpInfo(clientId, signedChallenge);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="signedChallenge"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public IsceiSdk.Client.ApiResponse<Object> AssociateEidWithCitizenProfileWithHttpInfo(string clientId, SignedChallenge signedChallenge)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new IsceiSdk.Client.ApiException(400, "Missing required parameter 'clientId' when calling CommonLoginControllerApi->AssociateEidWithCitizenProfile");

            // verify the required parameter 'signedChallenge' is set
            if (signedChallenge == null)
                throw new IsceiSdk.Client.ApiException(400, "Missing required parameter 'signedChallenge' when calling CommonLoginControllerApi->AssociateEidWithCitizenProfile");

            IsceiSdk.Client.RequestOptions localVarRequestOptions = new IsceiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = IsceiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IsceiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(IsceiSdk.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));
            localVarRequestOptions.Data = signedChallenge;

            // authentication (ISCEI) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/auth/associate-profiles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateEidWithCitizenProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="signedChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociateEidWithCitizenProfileAsync(string clientId, SignedChallenge signedChallenge, System.Threading.CancellationToken cancellationToken = default)
        {
            await AssociateEidWithCitizenProfileWithHttpInfoAsync(clientId, signedChallenge, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="signedChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<IsceiSdk.Client.ApiResponse<Object>> AssociateEidWithCitizenProfileWithHttpInfoAsync(string clientId, SignedChallenge signedChallenge, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new IsceiSdk.Client.ApiException(400, "Missing required parameter 'clientId' when calling CommonLoginControllerApi->AssociateEidWithCitizenProfile");

            // verify the required parameter 'signedChallenge' is set
            if (signedChallenge == null)
                throw new IsceiSdk.Client.ApiException(400, "Missing required parameter 'signedChallenge' when calling CommonLoginControllerApi->AssociateEidWithCitizenProfile");


            IsceiSdk.Client.RequestOptions localVarRequestOptions = new IsceiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = IsceiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IsceiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(IsceiSdk.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));
            localVarRequestOptions.Data = signedChallenge;

            // authentication (ISCEI) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/auth/associate-profiles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateEidWithCitizenProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicLoginRequestDto"></param>
        /// <returns>Object</returns>
        public Object BasicLogin(BasicLoginRequestDto basicLoginRequestDto)
        {
            IsceiSdk.Client.ApiResponse<Object> localVarResponse = BasicLoginWithHttpInfo(basicLoginRequestDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicLoginRequestDto"></param>
        /// <returns>ApiResponse of Object</returns>
        public IsceiSdk.Client.ApiResponse<Object> BasicLoginWithHttpInfo(BasicLoginRequestDto basicLoginRequestDto)
        {
            // verify the required parameter 'basicLoginRequestDto' is set
            if (basicLoginRequestDto == null)
                throw new IsceiSdk.Client.ApiException(400, "Missing required parameter 'basicLoginRequestDto' when calling CommonLoginControllerApi->BasicLogin");

            IsceiSdk.Client.RequestOptions localVarRequestOptions = new IsceiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IsceiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IsceiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = basicLoginRequestDto;

            // authentication (ISCEI) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/auth/basic", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BasicLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicLoginRequestDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BasicLoginAsync(BasicLoginRequestDto basicLoginRequestDto, System.Threading.CancellationToken cancellationToken = default)
        {
            IsceiSdk.Client.ApiResponse<Object> localVarResponse = await BasicLoginWithHttpInfoAsync(basicLoginRequestDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicLoginRequestDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<IsceiSdk.Client.ApiResponse<Object>> BasicLoginWithHttpInfoAsync(BasicLoginRequestDto basicLoginRequestDto, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'basicLoginRequestDto' is set
            if (basicLoginRequestDto == null)
                throw new IsceiSdk.Client.ApiException(400, "Missing required parameter 'basicLoginRequestDto' when calling CommonLoginControllerApi->BasicLogin");


            IsceiSdk.Client.RequestOptions localVarRequestOptions = new IsceiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = IsceiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IsceiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = basicLoginRequestDto;

            // authentication (ISCEI) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/auth/basic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BasicLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x509CertAuthenticationRequestDto"></param>
        /// <returns>AuthenticationRequestChallengeResponse</returns>
        public AuthenticationRequestChallengeResponse GenerateAuthenticationChallenge(X509CertAuthenticationRequestDto x509CertAuthenticationRequestDto)
        {
            IsceiSdk.Client.ApiResponse<AuthenticationRequestChallengeResponse> localVarResponse = GenerateAuthenticationChallengeWithHttpInfo(x509CertAuthenticationRequestDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x509CertAuthenticationRequestDto"></param>
        /// <returns>ApiResponse of AuthenticationRequestChallengeResponse</returns>
        public IsceiSdk.Client.ApiResponse<AuthenticationRequestChallengeResponse> GenerateAuthenticationChallengeWithHttpInfo(X509CertAuthenticationRequestDto x509CertAuthenticationRequestDto)
        {
            // verify the required parameter 'x509CertAuthenticationRequestDto' is set
            if (x509CertAuthenticationRequestDto == null)
                throw new IsceiSdk.Client.ApiException(400, "Missing required parameter 'x509CertAuthenticationRequestDto' when calling CommonLoginControllerApi->GenerateAuthenticationChallenge");

            IsceiSdk.Client.RequestOptions localVarRequestOptions = new IsceiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IsceiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IsceiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = x509CertAuthenticationRequestDto;

            // authentication (ISCEI) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthenticationRequestChallengeResponse>("/api/v1/auth/generate-authentication-challenge", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateAuthenticationChallenge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x509CertAuthenticationRequestDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationRequestChallengeResponse</returns>
        public async System.Threading.Tasks.Task<AuthenticationRequestChallengeResponse> GenerateAuthenticationChallengeAsync(X509CertAuthenticationRequestDto x509CertAuthenticationRequestDto, System.Threading.CancellationToken cancellationToken = default)
        {
            IsceiSdk.Client.ApiResponse<AuthenticationRequestChallengeResponse> localVarResponse = await GenerateAuthenticationChallengeWithHttpInfoAsync(x509CertAuthenticationRequestDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x509CertAuthenticationRequestDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationRequestChallengeResponse)</returns>
        public async System.Threading.Tasks.Task<IsceiSdk.Client.ApiResponse<AuthenticationRequestChallengeResponse>> GenerateAuthenticationChallengeWithHttpInfoAsync(X509CertAuthenticationRequestDto x509CertAuthenticationRequestDto, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'x509CertAuthenticationRequestDto' is set
            if (x509CertAuthenticationRequestDto == null)
                throw new IsceiSdk.Client.ApiException(400, "Missing required parameter 'x509CertAuthenticationRequestDto' when calling CommonLoginControllerApi->GenerateAuthenticationChallenge");


            IsceiSdk.Client.RequestOptions localVarRequestOptions = new IsceiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = IsceiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IsceiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = x509CertAuthenticationRequestDto;

            // authentication (ISCEI) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthenticationRequestChallengeResponse>("/api/v1/auth/generate-authentication-challenge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateAuthenticationChallenge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyOtpDto"></param>
        /// <returns>string</returns>
        public string VerifyOtp(VerifyOtpDto verifyOtpDto)
        {
            IsceiSdk.Client.ApiResponse<string> localVarResponse = VerifyOtpWithHttpInfo(verifyOtpDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyOtpDto"></param>
        /// <returns>ApiResponse of string</returns>
        public IsceiSdk.Client.ApiResponse<string> VerifyOtpWithHttpInfo(VerifyOtpDto verifyOtpDto)
        {
            // verify the required parameter 'verifyOtpDto' is set
            if (verifyOtpDto == null)
                throw new IsceiSdk.Client.ApiException(400, "Missing required parameter 'verifyOtpDto' when calling CommonLoginControllerApi->VerifyOtp");

            IsceiSdk.Client.RequestOptions localVarRequestOptions = new IsceiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IsceiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IsceiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = verifyOtpDto;

            // authentication (ISCEI) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/v1/auth/verify-otp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyOtp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyOtpDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VerifyOtpAsync(VerifyOtpDto verifyOtpDto, System.Threading.CancellationToken cancellationToken = default)
        {
            IsceiSdk.Client.ApiResponse<string> localVarResponse = await VerifyOtpWithHttpInfoAsync(verifyOtpDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IsceiSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyOtpDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<IsceiSdk.Client.ApiResponse<string>> VerifyOtpWithHttpInfoAsync(VerifyOtpDto verifyOtpDto, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'verifyOtpDto' is set
            if (verifyOtpDto == null)
                throw new IsceiSdk.Client.ApiException(400, "Missing required parameter 'verifyOtpDto' when calling CommonLoginControllerApi->VerifyOtp");


            IsceiSdk.Client.RequestOptions localVarRequestOptions = new IsceiSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = IsceiSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IsceiSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = verifyOtpDto;

            // authentication (ISCEI) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/v1/auth/verify-otp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyOtp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
