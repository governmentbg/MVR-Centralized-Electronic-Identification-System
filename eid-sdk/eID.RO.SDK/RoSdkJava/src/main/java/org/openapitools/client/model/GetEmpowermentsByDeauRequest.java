/*
 * eID - RO HTTP API
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EmpowermentsByDeauSortBy;
import org.openapitools.client.model.IdentifierType;
import org.openapitools.client.model.OnBehalfOf;
import org.openapitools.client.model.SortDirection;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eid.sdk.ro.JSON;

/**
 * Get empowerments by DEAU
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-11T17:57:54.980305500+03:00[Europe/Kiev]", comments = "Generator version: 7.13.0")
public class GetEmpowermentsByDeauRequest {
  public static final String SERIALIZED_NAME_ON_BEHALF_OF = "onBehalfOf";
  @SerializedName(SERIALIZED_NAME_ON_BEHALF_OF)
  @javax.annotation.Nullable
  private OnBehalfOf onBehalfOf;

  public static final String SERIALIZED_NAME_AUTHORIZER_UID = "authorizerUid";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_UID)
  @javax.annotation.Nullable
  private String authorizerUid;

  public static final String SERIALIZED_NAME_AUTHORIZER_UID_TYPE = "authorizerUidType";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_UID_TYPE)
  @javax.annotation.Nullable
  private IdentifierType authorizerUidType;

  public static final String SERIALIZED_NAME_EMPOWERED_UID = "empoweredUid";
  @SerializedName(SERIALIZED_NAME_EMPOWERED_UID)
  @javax.annotation.Nullable
  private String empoweredUid;

  public static final String SERIALIZED_NAME_EMPOWERED_UID_TYPE = "empoweredUidType";
  @SerializedName(SERIALIZED_NAME_EMPOWERED_UID_TYPE)
  @javax.annotation.Nullable
  private IdentifierType empoweredUidType;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  @javax.annotation.Nullable
  private Integer serviceId;

  public static final String SERIALIZED_NAME_VOLUME_OF_REPRESENTATION = "volumeOfRepresentation";
  @SerializedName(SERIALIZED_NAME_VOLUME_OF_REPRESENTATION)
  @javax.annotation.Nullable
  private List<String> volumeOfRepresentation;

  public static final String SERIALIZED_NAME_STATUS_ON = "statusOn";
  @SerializedName(SERIALIZED_NAME_STATUS_ON)
  @javax.annotation.Nullable
  private OffsetDateTime statusOn;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  @javax.annotation.Nullable
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PAGE_INDEX = "pageIndex";
  @SerializedName(SERIALIZED_NAME_PAGE_INDEX)
  @javax.annotation.Nullable
  private Integer pageIndex;

  public static final String SERIALIZED_NAME_SORT_BY = "sortBy";
  @SerializedName(SERIALIZED_NAME_SORT_BY)
  @javax.annotation.Nullable
  private EmpowermentsByDeauSortBy sortBy;

  public static final String SERIALIZED_NAME_SORT_DIRECTION = "sortDirection";
  @SerializedName(SERIALIZED_NAME_SORT_DIRECTION)
  @javax.annotation.Nullable
  private SortDirection sortDirection;

  public GetEmpowermentsByDeauRequest() {
  }

  public GetEmpowermentsByDeauRequest onBehalfOf(@javax.annotation.Nullable OnBehalfOf onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
    return this;
  }

  /**
   * Get onBehalfOf
   * @return onBehalfOf
   */
  @javax.annotation.Nullable
  public OnBehalfOf getOnBehalfOf() {
    return onBehalfOf;
  }

  public void setOnBehalfOf(@javax.annotation.Nullable OnBehalfOf onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
  }


  public GetEmpowermentsByDeauRequest authorizerUid(@javax.annotation.Nullable String authorizerUid) {
    this.authorizerUid = authorizerUid;
    return this;
  }

  /**
   * Authorizer Eik/Egn/Lnch
   * @return authorizerUid
   */
  @javax.annotation.Nullable
  public String getAuthorizerUid() {
    return authorizerUid;
  }

  public void setAuthorizerUid(@javax.annotation.Nullable String authorizerUid) {
    this.authorizerUid = authorizerUid;
  }


  public GetEmpowermentsByDeauRequest authorizerUidType(@javax.annotation.Nullable IdentifierType authorizerUidType) {
    this.authorizerUidType = authorizerUidType;
    return this;
  }

  /**
   * Get authorizerUidType
   * @return authorizerUidType
   */
  @javax.annotation.Nullable
  public IdentifierType getAuthorizerUidType() {
    return authorizerUidType;
  }

  public void setAuthorizerUidType(@javax.annotation.Nullable IdentifierType authorizerUidType) {
    this.authorizerUidType = authorizerUidType;
  }


  public GetEmpowermentsByDeauRequest empoweredUid(@javax.annotation.Nullable String empoweredUid) {
    this.empoweredUid = empoweredUid;
    return this;
  }

  /**
   * Empowered person Egn/Lnch
   * @return empoweredUid
   */
  @javax.annotation.Nullable
  public String getEmpoweredUid() {
    return empoweredUid;
  }

  public void setEmpoweredUid(@javax.annotation.Nullable String empoweredUid) {
    this.empoweredUid = empoweredUid;
  }


  public GetEmpowermentsByDeauRequest empoweredUidType(@javax.annotation.Nullable IdentifierType empoweredUidType) {
    this.empoweredUidType = empoweredUidType;
    return this;
  }

  /**
   * Get empoweredUidType
   * @return empoweredUidType
   */
  @javax.annotation.Nullable
  public IdentifierType getEmpoweredUidType() {
    return empoweredUidType;
  }

  public void setEmpoweredUidType(@javax.annotation.Nullable IdentifierType empoweredUidType) {
    this.empoweredUidType = empoweredUidType;
  }


  public GetEmpowermentsByDeauRequest serviceId(@javax.annotation.Nullable Integer serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Service Id
   * @return serviceId
   */
  @javax.annotation.Nullable
  public Integer getServiceId() {
    return serviceId;
  }

  public void setServiceId(@javax.annotation.Nullable Integer serviceId) {
    this.serviceId = serviceId;
  }


  public GetEmpowermentsByDeauRequest volumeOfRepresentation(@javax.annotation.Nullable List<String> volumeOfRepresentation) {
    this.volumeOfRepresentation = volumeOfRepresentation;
    return this;
  }

  public GetEmpowermentsByDeauRequest addVolumeOfRepresentationItem(String volumeOfRepresentationItem) {
    if (this.volumeOfRepresentation == null) {
      this.volumeOfRepresentation = new ArrayList<>();
    }
    this.volumeOfRepresentation.add(volumeOfRepresentationItem);
    return this;
  }

  /**
   * Volume of representation.  Optional
   * @return volumeOfRepresentation
   */
  @javax.annotation.Nullable
  public List<String> getVolumeOfRepresentation() {
    return volumeOfRepresentation;
  }

  public void setVolumeOfRepresentation(@javax.annotation.Nullable List<String> volumeOfRepresentation) {
    this.volumeOfRepresentation = volumeOfRepresentation;
  }


  public GetEmpowermentsByDeauRequest statusOn(@javax.annotation.Nullable OffsetDateTime statusOn) {
    this.statusOn = statusOn;
    return this;
  }

  /**
   * Status on date time
   * @return statusOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStatusOn() {
    return statusOn;
  }

  public void setStatusOn(@javax.annotation.Nullable OffsetDateTime statusOn) {
    this.statusOn = statusOn;
  }


  public GetEmpowermentsByDeauRequest pageSize(@javax.annotation.Nullable Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Page size
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(@javax.annotation.Nullable Integer pageSize) {
    this.pageSize = pageSize;
  }


  public GetEmpowermentsByDeauRequest pageIndex(@javax.annotation.Nullable Integer pageIndex) {
    this.pageIndex = pageIndex;
    return this;
  }

  /**
   * Page index
   * @return pageIndex
   */
  @javax.annotation.Nullable
  public Integer getPageIndex() {
    return pageIndex;
  }

  public void setPageIndex(@javax.annotation.Nullable Integer pageIndex) {
    this.pageIndex = pageIndex;
  }


  public GetEmpowermentsByDeauRequest sortBy(@javax.annotation.Nullable EmpowermentsByDeauSortBy sortBy) {
    this.sortBy = sortBy;
    return this;
  }

  /**
   * Get sortBy
   * @return sortBy
   */
  @javax.annotation.Nullable
  public EmpowermentsByDeauSortBy getSortBy() {
    return sortBy;
  }

  public void setSortBy(@javax.annotation.Nullable EmpowermentsByDeauSortBy sortBy) {
    this.sortBy = sortBy;
  }


  public GetEmpowermentsByDeauRequest sortDirection(@javax.annotation.Nullable SortDirection sortDirection) {
    this.sortDirection = sortDirection;
    return this;
  }

  /**
   * Get sortDirection
   * @return sortDirection
   */
  @javax.annotation.Nullable
  public SortDirection getSortDirection() {
    return sortDirection;
  }

  public void setSortDirection(@javax.annotation.Nullable SortDirection sortDirection) {
    this.sortDirection = sortDirection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetEmpowermentsByDeauRequest getEmpowermentsByDeauRequest = (GetEmpowermentsByDeauRequest) o;
    return Objects.equals(this.onBehalfOf, getEmpowermentsByDeauRequest.onBehalfOf) &&
        Objects.equals(this.authorizerUid, getEmpowermentsByDeauRequest.authorizerUid) &&
        Objects.equals(this.authorizerUidType, getEmpowermentsByDeauRequest.authorizerUidType) &&
        Objects.equals(this.empoweredUid, getEmpowermentsByDeauRequest.empoweredUid) &&
        Objects.equals(this.empoweredUidType, getEmpowermentsByDeauRequest.empoweredUidType) &&
        Objects.equals(this.serviceId, getEmpowermentsByDeauRequest.serviceId) &&
        Objects.equals(this.volumeOfRepresentation, getEmpowermentsByDeauRequest.volumeOfRepresentation) &&
        Objects.equals(this.statusOn, getEmpowermentsByDeauRequest.statusOn) &&
        Objects.equals(this.pageSize, getEmpowermentsByDeauRequest.pageSize) &&
        Objects.equals(this.pageIndex, getEmpowermentsByDeauRequest.pageIndex) &&
        Objects.equals(this.sortBy, getEmpowermentsByDeauRequest.sortBy) &&
        Objects.equals(this.sortDirection, getEmpowermentsByDeauRequest.sortDirection);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(onBehalfOf, authorizerUid, authorizerUidType, empoweredUid, empoweredUidType, serviceId, volumeOfRepresentation, statusOn, pageSize, pageIndex, sortBy, sortDirection);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetEmpowermentsByDeauRequest {\n");
    sb.append("    onBehalfOf: ").append(toIndentedString(onBehalfOf)).append("\n");
    sb.append("    authorizerUid: ").append(toIndentedString(authorizerUid)).append("\n");
    sb.append("    authorizerUidType: ").append(toIndentedString(authorizerUidType)).append("\n");
    sb.append("    empoweredUid: ").append(toIndentedString(empoweredUid)).append("\n");
    sb.append("    empoweredUidType: ").append(toIndentedString(empoweredUidType)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    volumeOfRepresentation: ").append(toIndentedString(volumeOfRepresentation)).append("\n");
    sb.append("    statusOn: ").append(toIndentedString(statusOn)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    pageIndex: ").append(toIndentedString(pageIndex)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    sortDirection: ").append(toIndentedString(sortDirection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("onBehalfOf");
    openapiFields.add("authorizerUid");
    openapiFields.add("authorizerUidType");
    openapiFields.add("empoweredUid");
    openapiFields.add("empoweredUidType");
    openapiFields.add("serviceId");
    openapiFields.add("volumeOfRepresentation");
    openapiFields.add("statusOn");
    openapiFields.add("pageSize");
    openapiFields.add("pageIndex");
    openapiFields.add("sortBy");
    openapiFields.add("sortDirection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetEmpowermentsByDeauRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetEmpowermentsByDeauRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetEmpowermentsByDeauRequest is not found in the empty JSON string", GetEmpowermentsByDeauRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetEmpowermentsByDeauRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetEmpowermentsByDeauRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `onBehalfOf`
      if (jsonObj.get("onBehalfOf") != null && !jsonObj.get("onBehalfOf").isJsonNull()) {
        OnBehalfOf.validateJsonElement(jsonObj.get("onBehalfOf"));
      }
      if ((jsonObj.get("authorizerUid") != null && !jsonObj.get("authorizerUid").isJsonNull()) && !jsonObj.get("authorizerUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizerUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizerUid").toString()));
      }
      // validate the optional field `authorizerUidType`
      if (jsonObj.get("authorizerUidType") != null && !jsonObj.get("authorizerUidType").isJsonNull()) {
        IdentifierType.validateJsonElement(jsonObj.get("authorizerUidType"));
      }
      if ((jsonObj.get("empoweredUid") != null && !jsonObj.get("empoweredUid").isJsonNull()) && !jsonObj.get("empoweredUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `empoweredUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("empoweredUid").toString()));
      }
      // validate the optional field `empoweredUidType`
      if (jsonObj.get("empoweredUidType") != null && !jsonObj.get("empoweredUidType").isJsonNull()) {
        IdentifierType.validateJsonElement(jsonObj.get("empoweredUidType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("volumeOfRepresentation") != null && !jsonObj.get("volumeOfRepresentation").isJsonNull() && !jsonObj.get("volumeOfRepresentation").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeOfRepresentation` to be an array in the JSON string but got `%s`", jsonObj.get("volumeOfRepresentation").toString()));
      }
      // validate the optional field `sortBy`
      if (jsonObj.get("sortBy") != null && !jsonObj.get("sortBy").isJsonNull()) {
        EmpowermentsByDeauSortBy.validateJsonElement(jsonObj.get("sortBy"));
      }
      // validate the optional field `sortDirection`
      if (jsonObj.get("sortDirection") != null && !jsonObj.get("sortDirection").isJsonNull()) {
        SortDirection.validateJsonElement(jsonObj.get("sortDirection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetEmpowermentsByDeauRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetEmpowermentsByDeauRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetEmpowermentsByDeauRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetEmpowermentsByDeauRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetEmpowermentsByDeauRequest>() {
           @Override
           public void write(JsonWriter out, GetEmpowermentsByDeauRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetEmpowermentsByDeauRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetEmpowermentsByDeauRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetEmpowermentsByDeauRequest
   * @throws IOException if the JSON string is invalid with respect to GetEmpowermentsByDeauRequest
   */
  public static GetEmpowermentsByDeauRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetEmpowermentsByDeauRequest.class);
  }

  /**
   * Convert an instance of GetEmpowermentsByDeauRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

