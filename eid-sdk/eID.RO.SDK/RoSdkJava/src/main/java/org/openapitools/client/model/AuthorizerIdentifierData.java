/*
 * eID - RO HTTP API
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IdentifierType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eid.sdk.ro.JSON;

/**
 * AuthorizerIdentifierData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-11T17:57:54.980305500+03:00[Europe/Kiev]", comments = "Generator version: 7.13.0")
public class AuthorizerIdentifierData {
  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  @javax.annotation.Nullable
  private String uid;

  public static final String SERIALIZED_NAME_UID_TYPE = "uidType";
  @SerializedName(SERIALIZED_NAME_UID_TYPE)
  @javax.annotation.Nullable
  private IdentifierType uidType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_IS_ISSUER = "isIssuer";
  @SerializedName(SERIALIZED_NAME_IS_ISSUER)
  @javax.annotation.Nullable
  private Boolean isIssuer;

  public AuthorizerIdentifierData() {
  }

  public AuthorizerIdentifierData uid(@javax.annotation.Nullable String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Get uid
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(@javax.annotation.Nullable String uid) {
    this.uid = uid;
  }


  public AuthorizerIdentifierData uidType(@javax.annotation.Nullable IdentifierType uidType) {
    this.uidType = uidType;
    return this;
  }

  /**
   * Get uidType
   * @return uidType
   */
  @javax.annotation.Nullable
  public IdentifierType getUidType() {
    return uidType;
  }

  public void setUidType(@javax.annotation.Nullable IdentifierType uidType) {
    this.uidType = uidType;
  }


  public AuthorizerIdentifierData name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public AuthorizerIdentifierData isIssuer(@javax.annotation.Nullable Boolean isIssuer) {
    this.isIssuer = isIssuer;
    return this;
  }

  /**
   * Get isIssuer
   * @return isIssuer
   */
  @javax.annotation.Nullable
  public Boolean getIsIssuer() {
    return isIssuer;
  }

  public void setIsIssuer(@javax.annotation.Nullable Boolean isIssuer) {
    this.isIssuer = isIssuer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthorizerIdentifierData authorizerIdentifierData = (AuthorizerIdentifierData) o;
    return Objects.equals(this.uid, authorizerIdentifierData.uid) &&
        Objects.equals(this.uidType, authorizerIdentifierData.uidType) &&
        Objects.equals(this.name, authorizerIdentifierData.name) &&
        Objects.equals(this.isIssuer, authorizerIdentifierData.isIssuer);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(uid, uidType, name, isIssuer);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthorizerIdentifierData {\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    uidType: ").append(toIndentedString(uidType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isIssuer: ").append(toIndentedString(isIssuer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uid");
    openapiFields.add("uidType");
    openapiFields.add("name");
    openapiFields.add("isIssuer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthorizerIdentifierData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthorizerIdentifierData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthorizerIdentifierData is not found in the empty JSON string", AuthorizerIdentifierData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthorizerIdentifierData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthorizerIdentifierData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      // validate the optional field `uidType`
      if (jsonObj.get("uidType") != null && !jsonObj.get("uidType").isJsonNull()) {
        IdentifierType.validateJsonElement(jsonObj.get("uidType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthorizerIdentifierData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthorizerIdentifierData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthorizerIdentifierData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthorizerIdentifierData.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthorizerIdentifierData>() {
           @Override
           public void write(JsonWriter out, AuthorizerIdentifierData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthorizerIdentifierData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthorizerIdentifierData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthorizerIdentifierData
   * @throws IOException if the JSON string is invalid with respect to AuthorizerIdentifierData
   */
  public static AuthorizerIdentifierData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthorizerIdentifierData.class);
  }

  /**
   * Convert an instance of AuthorizerIdentifierData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

