/*
 * eID - RO HTTP API
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets EmpowermentsDenialReason
 */
@JsonAdapter(EmpowermentsDenialReason.Adapter.class)
public enum EmpowermentsDenialReason {
  
  NONE("None"),
  
  DECEASED_UID("DeceasedUid"),
  
  PROHIBITED_UID("ProhibitedUid"),
  
  NTR_CHECK_FAILED("NTRCheckFailed"),
  
  TIMED_OUT("TimedOut"),
  
  BELOW_LAWFUL_AGE("BelowLawfulAge"),
  
  NO_PERMIT("NoPermit"),
  
  LAWFUL_AGE_INFO_NOT_AVAILABLE("LawfulAgeInfoNotAvailable"),
  
  UNSUCCESSFUL_RESTRICTIONS_CHECK("UnsuccessfulRestrictionsCheck"),
  
  LEGAL_ENTITY_NOT_ACTIVE("LegalEntityNotActive"),
  
  LEGAL_ENTITY_REPRESENTATION_NOT_MATCH("LegalEntityRepresentationNotMatch"),
  
  UNSUCCESSFUL_LEGAL_ENTITY_CHECK("UnsuccessfulLegalEntityCheck"),
  
  EMPOWERMENT_STATEMENT_NOT_FOUND("EmpowermentStatementNotFound"),
  
  BULSTAT_CHECK_FAILED("BulstatCheckFailed"),
  
  REREGISTERED_IN_NTR("ReregisteredInNTR"),
  
  ARCHIVED_IN_BULSTAT("ArchivedInBulstat"),
  
  IN_INSOLVENCY_PROCEEDINGS_IN_BULSTAT("InInsolvencyProceedingsInBulstat"),
  
  INSOLVENT_IN_BULSTAT("InsolventInBulstat"),
  
  IN_LIQUIDATION_IN_BULSTAT("InLiquidationInBulstat"),
  
  INACTIVE_IN_BULSTAT("InactiveInBulstat"),
  
  CLOSED_IN_BULSTAT("ClosedInBulstat"),
  
  TERMINATED_THROUGH_MERGER_IN_BULSTAT("TerminatedThroughMergerInBulstat"),
  
  TERMINATED_THROUGH_INCORPORATION_IN_BULSTAT("TerminatedThroughIncorporationInBulstat"),
  
  TERMINATED_THROUGH_DIVISION_IN_BULSTAT("TerminatedThroughDivisionInBulstat"),
  
  DELETED_FROM_JUDICIAL_REGISTER("DeletedFromJudicialRegister"),
  
  DELETED_FROM_BTPP_REGISTER("DeletedFromBTPPRegister"),
  
  REGISTRATION_ANNULLED_IN_BULSTAT("RegistrationAnnulledInBulstat"),
  
  TERMINATED_DUE_TO_ENTERPRISE_TRANSACTION_IN_BULSTAT("TerminatedDueToEnterpriseTransactionInBulstat"),
  
  DEREGISTERED_IN_BULSTAT("DeregisteredInBulstat"),
  
  SIGNATURE_COLLECTION_TIME_OUT("SignatureCollectionTimeOut"),
  
  UNSUCCESSFUL_TIMESTAMPING("UnsuccessfulTimestamping"),
  
  DENIED_BY_DEAU_ADMINISTRATOR("DeniedByDeauAdministrator"),
  
  INVALID_UID_REGISTRATION_STATUS_DETECTED("InvalidUidRegistrationStatusDetected"),
  
  UIDS_REGISTRATION_STATUS_INFO_NOT_AVAILABLE("UidsRegistrationStatusInfoNotAvailable"),
  
  REGISTRATION_STATUS_UNAVAILABLE("RegistrationStatusUnavailable"),
  
  INACTIVE_PROFILE("InactiveProfile"),
  
  NO_BASE_PROFILE("NoBaseProfile"),
  
  NAME_MISMATCH("NameMismatch"),
  
  NO_REGISTRATION("NoRegistration");

  private String value;

  EmpowermentsDenialReason(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EmpowermentsDenialReason fromValue(String value) {
    for (EmpowermentsDenialReason b : EmpowermentsDenialReason.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EmpowermentsDenialReason> {
    @Override
    public void write(final JsonWriter jsonWriter, final EmpowermentsDenialReason enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EmpowermentsDenialReason read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EmpowermentsDenialReason.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    EmpowermentsDenialReason.fromValue(value);
  }
}

