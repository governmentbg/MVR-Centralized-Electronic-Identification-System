/*
 * eID - RO HTTP API
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EmpowermentsFromMeFilterStatus;
import org.openapitools.client.model.EmpowermentsFromMeSortBy;
import org.openapitools.client.model.OnBehalfOf;
import org.openapitools.client.model.SortDirection;
import org.openapitools.client.model.UidAndUidTypeData;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eid.sdk.ro.JSON;

/**
 * GetEmpowermentsFromMeByFilterRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-11T17:57:54.980305500+03:00[Europe/Kiev]", comments = "Generator version: 7.13.0")
public class GetEmpowermentsFromMeByFilterRequest {
  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  @javax.annotation.Nullable
  private String number;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private EmpowermentsFromMeFilterStatus status;

  public static final String SERIALIZED_NAME_AUTHORIZER = "authorizer";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER)
  @javax.annotation.Nullable
  private String authorizer;

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "providerName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  @javax.annotation.Nullable
  private String providerName;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  @javax.annotation.Nullable
  private String serviceName;

  public static final String SERIALIZED_NAME_VALID_TO_DATE = "validToDate";
  @SerializedName(SERIALIZED_NAME_VALID_TO_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime validToDate;

  public static final String SERIALIZED_NAME_SHOW_ONLY_NO_EXPIRY_DATE = "showOnlyNoExpiryDate";
  @SerializedName(SERIALIZED_NAME_SHOW_ONLY_NO_EXPIRY_DATE)
  @javax.annotation.Nullable
  private Boolean showOnlyNoExpiryDate;

  public static final String SERIALIZED_NAME_EMPOWERED_UIDS = "empoweredUids";
  @SerializedName(SERIALIZED_NAME_EMPOWERED_UIDS)
  @javax.annotation.Nullable
  private List<UidAndUidTypeData> empoweredUids;

  public static final String SERIALIZED_NAME_SORT_BY = "sortBy";
  @SerializedName(SERIALIZED_NAME_SORT_BY)
  @javax.annotation.Nullable
  private EmpowermentsFromMeSortBy sortBy;

  public static final String SERIALIZED_NAME_SORT_DIRECTION = "sortDirection";
  @SerializedName(SERIALIZED_NAME_SORT_DIRECTION)
  @javax.annotation.Nullable
  private SortDirection sortDirection;

  public static final String SERIALIZED_NAME_ON_BEHALF_OF = "onBehalfOf";
  @SerializedName(SERIALIZED_NAME_ON_BEHALF_OF)
  @javax.annotation.Nullable
  private OnBehalfOf onBehalfOf;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  @javax.annotation.Nullable
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PAGE_INDEX = "pageIndex";
  @SerializedName(SERIALIZED_NAME_PAGE_INDEX)
  @javax.annotation.Nullable
  private Integer pageIndex;

  public GetEmpowermentsFromMeByFilterRequest() {
  }

  public GetEmpowermentsFromMeByFilterRequest number(@javax.annotation.Nullable String number) {
    this.number = number;
    return this;
  }

  /**
   * Empowerment number. Template: РОx/dd.mm.yyyy. x is a integer, dd.mm.yyyy the date of action.
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(@javax.annotation.Nullable String number) {
    this.number = number;
  }


  public GetEmpowermentsFromMeByFilterRequest status(@javax.annotation.Nullable EmpowermentsFromMeFilterStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EmpowermentsFromMeFilterStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable EmpowermentsFromMeFilterStatus status) {
    this.status = status;
  }


  public GetEmpowermentsFromMeByFilterRequest authorizer(@javax.annotation.Nullable String authorizer) {
    this.authorizer = authorizer;
    return this;
  }

  /**
   * Empowerment Authorizer name - contains
   * @return authorizer
   */
  @javax.annotation.Nullable
  public String getAuthorizer() {
    return authorizer;
  }

  public void setAuthorizer(@javax.annotation.Nullable String authorizer) {
    this.authorizer = authorizer;
  }


  public GetEmpowermentsFromMeByFilterRequest providerName(@javax.annotation.Nullable String providerName) {
    this.providerName = providerName;
    return this;
  }

  /**
   * Empowerment provider name
   * @return providerName
   */
  @javax.annotation.Nullable
  public String getProviderName() {
    return providerName;
  }

  public void setProviderName(@javax.annotation.Nullable String providerName) {
    this.providerName = providerName;
  }


  public GetEmpowermentsFromMeByFilterRequest serviceName(@javax.annotation.Nullable String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Empowerment Service name or Service code - contains
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(@javax.annotation.Nullable String serviceName) {
    this.serviceName = serviceName;
  }


  public GetEmpowermentsFromMeByFilterRequest validToDate(@javax.annotation.Nullable OffsetDateTime validToDate) {
    this.validToDate = validToDate;
    return this;
  }

  /**
   * Empowerment Valid to Date filter
   * @return validToDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidToDate() {
    return validToDate;
  }

  public void setValidToDate(@javax.annotation.Nullable OffsetDateTime validToDate) {
    this.validToDate = validToDate;
  }


  public GetEmpowermentsFromMeByFilterRequest showOnlyNoExpiryDate(@javax.annotation.Nullable Boolean showOnlyNoExpiryDate) {
    this.showOnlyNoExpiryDate = showOnlyNoExpiryDate;
    return this;
  }

  /**
   * Filter to show only never expiring empowerments
   * @return showOnlyNoExpiryDate
   */
  @javax.annotation.Nullable
  public Boolean getShowOnlyNoExpiryDate() {
    return showOnlyNoExpiryDate;
  }

  public void setShowOnlyNoExpiryDate(@javax.annotation.Nullable Boolean showOnlyNoExpiryDate) {
    this.showOnlyNoExpiryDate = showOnlyNoExpiryDate;
  }


  public GetEmpowermentsFromMeByFilterRequest empoweredUids(@javax.annotation.Nullable List<UidAndUidTypeData> empoweredUids) {
    this.empoweredUids = empoweredUids;
    return this;
  }

  public GetEmpowermentsFromMeByFilterRequest addEmpoweredUidsItem(UidAndUidTypeData empoweredUidsItem) {
    if (this.empoweredUids == null) {
      this.empoweredUids = new ArrayList<>();
    }
    this.empoweredUids.add(empoweredUidsItem);
    return this;
  }

  /**
   * Filter to show only never expiring empowerments
   * @return empoweredUids
   */
  @javax.annotation.Nullable
  public List<UidAndUidTypeData> getEmpoweredUids() {
    return empoweredUids;
  }

  public void setEmpoweredUids(@javax.annotation.Nullable List<UidAndUidTypeData> empoweredUids) {
    this.empoweredUids = empoweredUids;
  }


  public GetEmpowermentsFromMeByFilterRequest sortBy(@javax.annotation.Nullable EmpowermentsFromMeSortBy sortBy) {
    this.sortBy = sortBy;
    return this;
  }

  /**
   * Get sortBy
   * @return sortBy
   */
  @javax.annotation.Nullable
  public EmpowermentsFromMeSortBy getSortBy() {
    return sortBy;
  }

  public void setSortBy(@javax.annotation.Nullable EmpowermentsFromMeSortBy sortBy) {
    this.sortBy = sortBy;
  }


  public GetEmpowermentsFromMeByFilterRequest sortDirection(@javax.annotation.Nullable SortDirection sortDirection) {
    this.sortDirection = sortDirection;
    return this;
  }

  /**
   * Get sortDirection
   * @return sortDirection
   */
  @javax.annotation.Nullable
  public SortDirection getSortDirection() {
    return sortDirection;
  }

  public void setSortDirection(@javax.annotation.Nullable SortDirection sortDirection) {
    this.sortDirection = sortDirection;
  }


  public GetEmpowermentsFromMeByFilterRequest onBehalfOf(@javax.annotation.Nullable OnBehalfOf onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
    return this;
  }

  /**
   * Get onBehalfOf
   * @return onBehalfOf
   */
  @javax.annotation.Nullable
  public OnBehalfOf getOnBehalfOf() {
    return onBehalfOf;
  }

  public void setOnBehalfOf(@javax.annotation.Nullable OnBehalfOf onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
  }


  public GetEmpowermentsFromMeByFilterRequest pageSize(@javax.annotation.Nullable Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Get pageSize
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(@javax.annotation.Nullable Integer pageSize) {
    this.pageSize = pageSize;
  }


  public GetEmpowermentsFromMeByFilterRequest pageIndex(@javax.annotation.Nullable Integer pageIndex) {
    this.pageIndex = pageIndex;
    return this;
  }

  /**
   * Get pageIndex
   * @return pageIndex
   */
  @javax.annotation.Nullable
  public Integer getPageIndex() {
    return pageIndex;
  }

  public void setPageIndex(@javax.annotation.Nullable Integer pageIndex) {
    this.pageIndex = pageIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetEmpowermentsFromMeByFilterRequest getEmpowermentsFromMeByFilterRequest = (GetEmpowermentsFromMeByFilterRequest) o;
    return Objects.equals(this.number, getEmpowermentsFromMeByFilterRequest.number) &&
        Objects.equals(this.status, getEmpowermentsFromMeByFilterRequest.status) &&
        Objects.equals(this.authorizer, getEmpowermentsFromMeByFilterRequest.authorizer) &&
        Objects.equals(this.providerName, getEmpowermentsFromMeByFilterRequest.providerName) &&
        Objects.equals(this.serviceName, getEmpowermentsFromMeByFilterRequest.serviceName) &&
        Objects.equals(this.validToDate, getEmpowermentsFromMeByFilterRequest.validToDate) &&
        Objects.equals(this.showOnlyNoExpiryDate, getEmpowermentsFromMeByFilterRequest.showOnlyNoExpiryDate) &&
        Objects.equals(this.empoweredUids, getEmpowermentsFromMeByFilterRequest.empoweredUids) &&
        Objects.equals(this.sortBy, getEmpowermentsFromMeByFilterRequest.sortBy) &&
        Objects.equals(this.sortDirection, getEmpowermentsFromMeByFilterRequest.sortDirection) &&
        Objects.equals(this.onBehalfOf, getEmpowermentsFromMeByFilterRequest.onBehalfOf) &&
        Objects.equals(this.pageSize, getEmpowermentsFromMeByFilterRequest.pageSize) &&
        Objects.equals(this.pageIndex, getEmpowermentsFromMeByFilterRequest.pageIndex);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(number, status, authorizer, providerName, serviceName, validToDate, showOnlyNoExpiryDate, empoweredUids, sortBy, sortDirection, onBehalfOf, pageSize, pageIndex);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetEmpowermentsFromMeByFilterRequest {\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    authorizer: ").append(toIndentedString(authorizer)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    validToDate: ").append(toIndentedString(validToDate)).append("\n");
    sb.append("    showOnlyNoExpiryDate: ").append(toIndentedString(showOnlyNoExpiryDate)).append("\n");
    sb.append("    empoweredUids: ").append(toIndentedString(empoweredUids)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    sortDirection: ").append(toIndentedString(sortDirection)).append("\n");
    sb.append("    onBehalfOf: ").append(toIndentedString(onBehalfOf)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    pageIndex: ").append(toIndentedString(pageIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("number");
    openapiFields.add("status");
    openapiFields.add("authorizer");
    openapiFields.add("providerName");
    openapiFields.add("serviceName");
    openapiFields.add("validToDate");
    openapiFields.add("showOnlyNoExpiryDate");
    openapiFields.add("empoweredUids");
    openapiFields.add("sortBy");
    openapiFields.add("sortDirection");
    openapiFields.add("onBehalfOf");
    openapiFields.add("pageSize");
    openapiFields.add("pageIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetEmpowermentsFromMeByFilterRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetEmpowermentsFromMeByFilterRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetEmpowermentsFromMeByFilterRequest is not found in the empty JSON string", GetEmpowermentsFromMeByFilterRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetEmpowermentsFromMeByFilterRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetEmpowermentsFromMeByFilterRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EmpowermentsFromMeFilterStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("authorizer") != null && !jsonObj.get("authorizer").isJsonNull()) && !jsonObj.get("authorizer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizer").toString()));
      }
      if ((jsonObj.get("providerName") != null && !jsonObj.get("providerName").isJsonNull()) && !jsonObj.get("providerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerName").toString()));
      }
      if ((jsonObj.get("serviceName") != null && !jsonObj.get("serviceName").isJsonNull()) && !jsonObj.get("serviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceName").toString()));
      }
      if (jsonObj.get("empoweredUids") != null && !jsonObj.get("empoweredUids").isJsonNull()) {
        JsonArray jsonArrayempoweredUids = jsonObj.getAsJsonArray("empoweredUids");
        if (jsonArrayempoweredUids != null) {
          // ensure the json data is an array
          if (!jsonObj.get("empoweredUids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `empoweredUids` to be an array in the JSON string but got `%s`", jsonObj.get("empoweredUids").toString()));
          }

          // validate the optional field `empoweredUids` (array)
          for (int i = 0; i < jsonArrayempoweredUids.size(); i++) {
            UidAndUidTypeData.validateJsonElement(jsonArrayempoweredUids.get(i));
          };
        }
      }
      // validate the optional field `sortBy`
      if (jsonObj.get("sortBy") != null && !jsonObj.get("sortBy").isJsonNull()) {
        EmpowermentsFromMeSortBy.validateJsonElement(jsonObj.get("sortBy"));
      }
      // validate the optional field `sortDirection`
      if (jsonObj.get("sortDirection") != null && !jsonObj.get("sortDirection").isJsonNull()) {
        SortDirection.validateJsonElement(jsonObj.get("sortDirection"));
      }
      // validate the optional field `onBehalfOf`
      if (jsonObj.get("onBehalfOf") != null && !jsonObj.get("onBehalfOf").isJsonNull()) {
        OnBehalfOf.validateJsonElement(jsonObj.get("onBehalfOf"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetEmpowermentsFromMeByFilterRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetEmpowermentsFromMeByFilterRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetEmpowermentsFromMeByFilterRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetEmpowermentsFromMeByFilterRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetEmpowermentsFromMeByFilterRequest>() {
           @Override
           public void write(JsonWriter out, GetEmpowermentsFromMeByFilterRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetEmpowermentsFromMeByFilterRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetEmpowermentsFromMeByFilterRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetEmpowermentsFromMeByFilterRequest
   * @throws IOException if the JSON string is invalid with respect to GetEmpowermentsFromMeByFilterRequest
   */
  public static GetEmpowermentsFromMeByFilterRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetEmpowermentsFromMeByFilterRequest.class);
  }

  /**
   * Convert an instance of GetEmpowermentsFromMeByFilterRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

