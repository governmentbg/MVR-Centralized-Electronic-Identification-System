/*
 * eID - RO HTTP API
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eid.sdk.ro.JSON;

/**
 * ProviderServiceResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-11T17:57:54.980305500+03:00[Europe/Kiev]", comments = "Generator version: 7.13.0")
public class ProviderServiceResult {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_SERVICE_NUMBER = "serviceNumber";
  @SerializedName(SERIALIZED_NAME_SERVICE_NUMBER)
  @javax.annotation.Nullable
  private Long serviceNumber;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_PAYMENT_INFO_NORMAL_COST = "paymentInfoNormalCost";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INFO_NORMAL_COST)
  @javax.annotation.Nullable
  private Double paymentInfoNormalCost;

  public static final String SERIALIZED_NAME_IS_EMPOWERMENT = "isEmpowerment";
  @SerializedName(SERIALIZED_NAME_IS_EMPOWERMENT)
  @javax.annotation.Nullable
  private Boolean isEmpowerment;

  public static final String SERIALIZED_NAME_IS_EXTERNAL = "isExternal";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNAL)
  @javax.annotation.Nullable
  private Boolean isExternal;

  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  @javax.annotation.Nullable
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_PROVIDER_DETAILS_ID = "providerDetailsId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_DETAILS_ID)
  @javax.annotation.Nullable
  private UUID providerDetailsId;

  public static final String SERIALIZED_NAME_PROVIDER_SECTION_ID = "providerSectionId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_SECTION_ID)
  @javax.annotation.Nullable
  private UUID providerSectionId;

  public ProviderServiceResult() {
  }

  public ProviderServiceResult(
     Boolean isExternal, 
     UUID providerDetailsId, 
     UUID providerSectionId
  ) {
    this();
    this.isExternal = isExternal;
    this.providerDetailsId = providerDetailsId;
    this.providerSectionId = providerSectionId;
  }

  public ProviderServiceResult id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public ProviderServiceResult serviceNumber(@javax.annotation.Nullable Long serviceNumber) {
    this.serviceNumber = serviceNumber;
    return this;
  }

  /**
   * Get serviceNumber
   * @return serviceNumber
   */
  @javax.annotation.Nullable
  public Long getServiceNumber() {
    return serviceNumber;
  }

  public void setServiceNumber(@javax.annotation.Nullable Long serviceNumber) {
    this.serviceNumber = serviceNumber;
  }


  public ProviderServiceResult name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ProviderServiceResult description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public ProviderServiceResult paymentInfoNormalCost(@javax.annotation.Nullable Double paymentInfoNormalCost) {
    this.paymentInfoNormalCost = paymentInfoNormalCost;
    return this;
  }

  /**
   * Get paymentInfoNormalCost
   * @return paymentInfoNormalCost
   */
  @javax.annotation.Nullable
  public Double getPaymentInfoNormalCost() {
    return paymentInfoNormalCost;
  }

  public void setPaymentInfoNormalCost(@javax.annotation.Nullable Double paymentInfoNormalCost) {
    this.paymentInfoNormalCost = paymentInfoNormalCost;
  }


  public ProviderServiceResult isEmpowerment(@javax.annotation.Nullable Boolean isEmpowerment) {
    this.isEmpowerment = isEmpowerment;
    return this;
  }

  /**
   * Get isEmpowerment
   * @return isEmpowerment
   */
  @javax.annotation.Nullable
  public Boolean getIsEmpowerment() {
    return isEmpowerment;
  }

  public void setIsEmpowerment(@javax.annotation.Nullable Boolean isEmpowerment) {
    this.isEmpowerment = isEmpowerment;
  }


  /**
   * Get isExternal
   * @return isExternal
   */
  @javax.annotation.Nullable
  public Boolean getIsExternal() {
    return isExternal;
  }



  public ProviderServiceResult isDeleted(@javax.annotation.Nullable Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Get isDeleted
   * @return isDeleted
   */
  @javax.annotation.Nullable
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(@javax.annotation.Nullable Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  /**
   * Get providerDetailsId
   * @return providerDetailsId
   */
  @javax.annotation.Nullable
  public UUID getProviderDetailsId() {
    return providerDetailsId;
  }



  /**
   * Get providerSectionId
   * @return providerSectionId
   */
  @javax.annotation.Nullable
  public UUID getProviderSectionId() {
    return providerSectionId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProviderServiceResult providerServiceResult = (ProviderServiceResult) o;
    return Objects.equals(this.id, providerServiceResult.id) &&
        Objects.equals(this.serviceNumber, providerServiceResult.serviceNumber) &&
        Objects.equals(this.name, providerServiceResult.name) &&
        Objects.equals(this.description, providerServiceResult.description) &&
        Objects.equals(this.paymentInfoNormalCost, providerServiceResult.paymentInfoNormalCost) &&
        Objects.equals(this.isEmpowerment, providerServiceResult.isEmpowerment) &&
        Objects.equals(this.isExternal, providerServiceResult.isExternal) &&
        Objects.equals(this.isDeleted, providerServiceResult.isDeleted) &&
        Objects.equals(this.providerDetailsId, providerServiceResult.providerDetailsId) &&
        Objects.equals(this.providerSectionId, providerServiceResult.providerSectionId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, serviceNumber, name, description, paymentInfoNormalCost, isEmpowerment, isExternal, isDeleted, providerDetailsId, providerSectionId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProviderServiceResult {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    serviceNumber: ").append(toIndentedString(serviceNumber)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    paymentInfoNormalCost: ").append(toIndentedString(paymentInfoNormalCost)).append("\n");
    sb.append("    isEmpowerment: ").append(toIndentedString(isEmpowerment)).append("\n");
    sb.append("    isExternal: ").append(toIndentedString(isExternal)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    providerDetailsId: ").append(toIndentedString(providerDetailsId)).append("\n");
    sb.append("    providerSectionId: ").append(toIndentedString(providerSectionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("serviceNumber");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("paymentInfoNormalCost");
    openapiFields.add("isEmpowerment");
    openapiFields.add("isExternal");
    openapiFields.add("isDeleted");
    openapiFields.add("providerDetailsId");
    openapiFields.add("providerSectionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProviderServiceResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProviderServiceResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProviderServiceResult is not found in the empty JSON string", ProviderServiceResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProviderServiceResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProviderServiceResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("providerDetailsId") != null && !jsonObj.get("providerDetailsId").isJsonNull()) && !jsonObj.get("providerDetailsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerDetailsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerDetailsId").toString()));
      }
      if ((jsonObj.get("providerSectionId") != null && !jsonObj.get("providerSectionId").isJsonNull()) && !jsonObj.get("providerSectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerSectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerSectionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProviderServiceResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProviderServiceResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProviderServiceResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProviderServiceResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ProviderServiceResult>() {
           @Override
           public void write(JsonWriter out, ProviderServiceResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProviderServiceResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProviderServiceResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProviderServiceResult
   * @throws IOException if the JSON string is invalid with respect to ProviderServiceResult
   */
  public static ProviderServiceResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProviderServiceResult.class);
  }

  /**
   * Convert an instance of ProviderServiceResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

