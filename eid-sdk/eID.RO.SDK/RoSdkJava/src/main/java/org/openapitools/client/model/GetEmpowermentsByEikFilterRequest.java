/*
 * eID - RO HTTP API
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EmpowermentsByEikFilterStatus;
import org.openapitools.client.model.EmpowermentsByEikSortBy;
import org.openapitools.client.model.SortDirection;
import org.openapitools.client.model.UserIdentifierData;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eid.sdk.ro.JSON;

/**
 * GetEmpowermentsByEikFilterRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-11T17:57:54.980305500+03:00[Europe/Kiev]", comments = "Generator version: 7.13.0")
public class GetEmpowermentsByEikFilterRequest {
  public static final String SERIALIZED_NAME_EIK = "eik";
  @SerializedName(SERIALIZED_NAME_EIK)
  @javax.annotation.Nullable
  private String eik;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private EmpowermentsByEikFilterStatus status;

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "providerName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  @javax.annotation.Nullable
  private String providerName;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  @javax.annotation.Nullable
  private String serviceName;

  public static final String SERIALIZED_NAME_VALID_TO_DATE = "validToDate";
  @SerializedName(SERIALIZED_NAME_VALID_TO_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime validToDate;

  public static final String SERIALIZED_NAME_SHOW_ONLY_NO_EXPIRY_DATE = "showOnlyNoExpiryDate";
  @SerializedName(SERIALIZED_NAME_SHOW_ONLY_NO_EXPIRY_DATE)
  @javax.annotation.Nullable
  private Boolean showOnlyNoExpiryDate;

  public static final String SERIALIZED_NAME_AUTHORIZER_UIDS = "authorizerUids";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_UIDS)
  @javax.annotation.Nullable
  private List<UserIdentifierData> authorizerUids;

  public static final String SERIALIZED_NAME_SORT_BY = "sortBy";
  @SerializedName(SERIALIZED_NAME_SORT_BY)
  @javax.annotation.Nullable
  private EmpowermentsByEikSortBy sortBy;

  public static final String SERIALIZED_NAME_SORT_DIRECTION = "sortDirection";
  @SerializedName(SERIALIZED_NAME_SORT_DIRECTION)
  @javax.annotation.Nullable
  private SortDirection sortDirection;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  @javax.annotation.Nullable
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PAGE_INDEX = "pageIndex";
  @SerializedName(SERIALIZED_NAME_PAGE_INDEX)
  @javax.annotation.Nullable
  private Integer pageIndex;

  public GetEmpowermentsByEikFilterRequest() {
  }

  public GetEmpowermentsByEikFilterRequest eik(@javax.annotation.Nullable String eik) {
    this.eik = eik;
    return this;
  }

  /**
   * Get eik
   * @return eik
   */
  @javax.annotation.Nullable
  public String getEik() {
    return eik;
  }

  public void setEik(@javax.annotation.Nullable String eik) {
    this.eik = eik;
  }


  public GetEmpowermentsByEikFilterRequest status(@javax.annotation.Nullable EmpowermentsByEikFilterStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EmpowermentsByEikFilterStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable EmpowermentsByEikFilterStatus status) {
    this.status = status;
  }


  public GetEmpowermentsByEikFilterRequest providerName(@javax.annotation.Nullable String providerName) {
    this.providerName = providerName;
    return this;
  }

  /**
   * Get providerName
   * @return providerName
   */
  @javax.annotation.Nullable
  public String getProviderName() {
    return providerName;
  }

  public void setProviderName(@javax.annotation.Nullable String providerName) {
    this.providerName = providerName;
  }


  public GetEmpowermentsByEikFilterRequest serviceName(@javax.annotation.Nullable String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Get serviceName
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(@javax.annotation.Nullable String serviceName) {
    this.serviceName = serviceName;
  }


  public GetEmpowermentsByEikFilterRequest validToDate(@javax.annotation.Nullable OffsetDateTime validToDate) {
    this.validToDate = validToDate;
    return this;
  }

  /**
   * Get validToDate
   * @return validToDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidToDate() {
    return validToDate;
  }

  public void setValidToDate(@javax.annotation.Nullable OffsetDateTime validToDate) {
    this.validToDate = validToDate;
  }


  public GetEmpowermentsByEikFilterRequest showOnlyNoExpiryDate(@javax.annotation.Nullable Boolean showOnlyNoExpiryDate) {
    this.showOnlyNoExpiryDate = showOnlyNoExpiryDate;
    return this;
  }

  /**
   * Get showOnlyNoExpiryDate
   * @return showOnlyNoExpiryDate
   */
  @javax.annotation.Nullable
  public Boolean getShowOnlyNoExpiryDate() {
    return showOnlyNoExpiryDate;
  }

  public void setShowOnlyNoExpiryDate(@javax.annotation.Nullable Boolean showOnlyNoExpiryDate) {
    this.showOnlyNoExpiryDate = showOnlyNoExpiryDate;
  }


  public GetEmpowermentsByEikFilterRequest authorizerUids(@javax.annotation.Nullable List<UserIdentifierData> authorizerUids) {
    this.authorizerUids = authorizerUids;
    return this;
  }

  public GetEmpowermentsByEikFilterRequest addAuthorizerUidsItem(UserIdentifierData authorizerUidsItem) {
    if (this.authorizerUids == null) {
      this.authorizerUids = new ArrayList<>();
    }
    this.authorizerUids.add(authorizerUidsItem);
    return this;
  }

  /**
   * Get authorizerUids
   * @return authorizerUids
   */
  @javax.annotation.Nullable
  public List<UserIdentifierData> getAuthorizerUids() {
    return authorizerUids;
  }

  public void setAuthorizerUids(@javax.annotation.Nullable List<UserIdentifierData> authorizerUids) {
    this.authorizerUids = authorizerUids;
  }


  public GetEmpowermentsByEikFilterRequest sortBy(@javax.annotation.Nullable EmpowermentsByEikSortBy sortBy) {
    this.sortBy = sortBy;
    return this;
  }

  /**
   * Get sortBy
   * @return sortBy
   */
  @javax.annotation.Nullable
  public EmpowermentsByEikSortBy getSortBy() {
    return sortBy;
  }

  public void setSortBy(@javax.annotation.Nullable EmpowermentsByEikSortBy sortBy) {
    this.sortBy = sortBy;
  }


  public GetEmpowermentsByEikFilterRequest sortDirection(@javax.annotation.Nullable SortDirection sortDirection) {
    this.sortDirection = sortDirection;
    return this;
  }

  /**
   * Get sortDirection
   * @return sortDirection
   */
  @javax.annotation.Nullable
  public SortDirection getSortDirection() {
    return sortDirection;
  }

  public void setSortDirection(@javax.annotation.Nullable SortDirection sortDirection) {
    this.sortDirection = sortDirection;
  }


  public GetEmpowermentsByEikFilterRequest pageSize(@javax.annotation.Nullable Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Get pageSize
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(@javax.annotation.Nullable Integer pageSize) {
    this.pageSize = pageSize;
  }


  public GetEmpowermentsByEikFilterRequest pageIndex(@javax.annotation.Nullable Integer pageIndex) {
    this.pageIndex = pageIndex;
    return this;
  }

  /**
   * Get pageIndex
   * @return pageIndex
   */
  @javax.annotation.Nullable
  public Integer getPageIndex() {
    return pageIndex;
  }

  public void setPageIndex(@javax.annotation.Nullable Integer pageIndex) {
    this.pageIndex = pageIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetEmpowermentsByEikFilterRequest getEmpowermentsByEikFilterRequest = (GetEmpowermentsByEikFilterRequest) o;
    return Objects.equals(this.eik, getEmpowermentsByEikFilterRequest.eik) &&
        Objects.equals(this.status, getEmpowermentsByEikFilterRequest.status) &&
        Objects.equals(this.providerName, getEmpowermentsByEikFilterRequest.providerName) &&
        Objects.equals(this.serviceName, getEmpowermentsByEikFilterRequest.serviceName) &&
        Objects.equals(this.validToDate, getEmpowermentsByEikFilterRequest.validToDate) &&
        Objects.equals(this.showOnlyNoExpiryDate, getEmpowermentsByEikFilterRequest.showOnlyNoExpiryDate) &&
        Objects.equals(this.authorizerUids, getEmpowermentsByEikFilterRequest.authorizerUids) &&
        Objects.equals(this.sortBy, getEmpowermentsByEikFilterRequest.sortBy) &&
        Objects.equals(this.sortDirection, getEmpowermentsByEikFilterRequest.sortDirection) &&
        Objects.equals(this.pageSize, getEmpowermentsByEikFilterRequest.pageSize) &&
        Objects.equals(this.pageIndex, getEmpowermentsByEikFilterRequest.pageIndex);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(eik, status, providerName, serviceName, validToDate, showOnlyNoExpiryDate, authorizerUids, sortBy, sortDirection, pageSize, pageIndex);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetEmpowermentsByEikFilterRequest {\n");
    sb.append("    eik: ").append(toIndentedString(eik)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    validToDate: ").append(toIndentedString(validToDate)).append("\n");
    sb.append("    showOnlyNoExpiryDate: ").append(toIndentedString(showOnlyNoExpiryDate)).append("\n");
    sb.append("    authorizerUids: ").append(toIndentedString(authorizerUids)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    sortDirection: ").append(toIndentedString(sortDirection)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    pageIndex: ").append(toIndentedString(pageIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eik");
    openapiFields.add("status");
    openapiFields.add("providerName");
    openapiFields.add("serviceName");
    openapiFields.add("validToDate");
    openapiFields.add("showOnlyNoExpiryDate");
    openapiFields.add("authorizerUids");
    openapiFields.add("sortBy");
    openapiFields.add("sortDirection");
    openapiFields.add("pageSize");
    openapiFields.add("pageIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetEmpowermentsByEikFilterRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetEmpowermentsByEikFilterRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetEmpowermentsByEikFilterRequest is not found in the empty JSON string", GetEmpowermentsByEikFilterRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetEmpowermentsByEikFilterRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetEmpowermentsByEikFilterRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eik") != null && !jsonObj.get("eik").isJsonNull()) && !jsonObj.get("eik").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eik` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eik").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EmpowermentsByEikFilterStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("providerName") != null && !jsonObj.get("providerName").isJsonNull()) && !jsonObj.get("providerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerName").toString()));
      }
      if ((jsonObj.get("serviceName") != null && !jsonObj.get("serviceName").isJsonNull()) && !jsonObj.get("serviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceName").toString()));
      }
      if (jsonObj.get("authorizerUids") != null && !jsonObj.get("authorizerUids").isJsonNull()) {
        JsonArray jsonArrayauthorizerUids = jsonObj.getAsJsonArray("authorizerUids");
        if (jsonArrayauthorizerUids != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authorizerUids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authorizerUids` to be an array in the JSON string but got `%s`", jsonObj.get("authorizerUids").toString()));
          }

          // validate the optional field `authorizerUids` (array)
          for (int i = 0; i < jsonArrayauthorizerUids.size(); i++) {
            UserIdentifierData.validateJsonElement(jsonArrayauthorizerUids.get(i));
          };
        }
      }
      // validate the optional field `sortBy`
      if (jsonObj.get("sortBy") != null && !jsonObj.get("sortBy").isJsonNull()) {
        EmpowermentsByEikSortBy.validateJsonElement(jsonObj.get("sortBy"));
      }
      // validate the optional field `sortDirection`
      if (jsonObj.get("sortDirection") != null && !jsonObj.get("sortDirection").isJsonNull()) {
        SortDirection.validateJsonElement(jsonObj.get("sortDirection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetEmpowermentsByEikFilterRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetEmpowermentsByEikFilterRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetEmpowermentsByEikFilterRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetEmpowermentsByEikFilterRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetEmpowermentsByEikFilterRequest>() {
           @Override
           public void write(JsonWriter out, GetEmpowermentsByEikFilterRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetEmpowermentsByEikFilterRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetEmpowermentsByEikFilterRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetEmpowermentsByEikFilterRequest
   * @throws IOException if the JSON string is invalid with respect to GetEmpowermentsByEikFilterRequest
   */
  public static GetEmpowermentsByEikFilterRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetEmpowermentsByEikFilterRequest.class);
  }

  /**
   * Convert an instance of GetEmpowermentsByEikFilterRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

