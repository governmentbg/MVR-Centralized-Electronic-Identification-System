/*
 * eID - RO HTTP API
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EmpowermentWithdrawalStatus;
import org.openapitools.client.model.IdentifierType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eid.sdk.ro.JSON;

/**
 * EmpowermentWithdrawResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-11T17:57:54.980305500+03:00[Europe/Kiev]", comments = "Generator version: 7.13.0")
public class EmpowermentWithdrawResult {
  public static final String SERIALIZED_NAME_START_DATE_TIME = "startDateTime";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime startDateTime;

  public static final String SERIALIZED_NAME_ACTIVE_DATE_TIME = "activeDateTime";
  @SerializedName(SERIALIZED_NAME_ACTIVE_DATE_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime activeDateTime;

  public static final String SERIALIZED_NAME_ISSUER_UID = "issuerUid";
  @SerializedName(SERIALIZED_NAME_ISSUER_UID)
  @javax.annotation.Nullable
  private String issuerUid;

  public static final String SERIALIZED_NAME_ISSUER_UID_TYPE = "issuerUidType";
  @SerializedName(SERIALIZED_NAME_ISSUER_UID_TYPE)
  @javax.annotation.Nullable
  private IdentifierType issuerUidType;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  @javax.annotation.Nullable
  private String reason;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private EmpowermentWithdrawalStatus status;

  public EmpowermentWithdrawResult() {
  }

  public EmpowermentWithdrawResult(
     OffsetDateTime startDateTime, 
     OffsetDateTime activeDateTime, 
     String issuerUid, 
     String reason
  ) {
    this();
    this.startDateTime = startDateTime;
    this.activeDateTime = activeDateTime;
    this.issuerUid = issuerUid;
    this.reason = reason;
  }

  /**
   * Get startDateTime
   * @return startDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDateTime() {
    return startDateTime;
  }



  /**
   * Get activeDateTime
   * @return activeDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActiveDateTime() {
    return activeDateTime;
  }



  /**
   * Get issuerUid
   * @return issuerUid
   */
  @javax.annotation.Nullable
  public String getIssuerUid() {
    return issuerUid;
  }



  public EmpowermentWithdrawResult issuerUidType(@javax.annotation.Nullable IdentifierType issuerUidType) {
    this.issuerUidType = issuerUidType;
    return this;
  }

  /**
   * Get issuerUidType
   * @return issuerUidType
   */
  @javax.annotation.Nullable
  public IdentifierType getIssuerUidType() {
    return issuerUidType;
  }

  public void setIssuerUidType(@javax.annotation.Nullable IdentifierType issuerUidType) {
    this.issuerUidType = issuerUidType;
  }


  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }



  public EmpowermentWithdrawResult status(@javax.annotation.Nullable EmpowermentWithdrawalStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EmpowermentWithdrawalStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable EmpowermentWithdrawalStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmpowermentWithdrawResult empowermentWithdrawResult = (EmpowermentWithdrawResult) o;
    return Objects.equals(this.startDateTime, empowermentWithdrawResult.startDateTime) &&
        Objects.equals(this.activeDateTime, empowermentWithdrawResult.activeDateTime) &&
        Objects.equals(this.issuerUid, empowermentWithdrawResult.issuerUid) &&
        Objects.equals(this.issuerUidType, empowermentWithdrawResult.issuerUidType) &&
        Objects.equals(this.reason, empowermentWithdrawResult.reason) &&
        Objects.equals(this.status, empowermentWithdrawResult.status);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDateTime, activeDateTime, issuerUid, issuerUidType, reason, status);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmpowermentWithdrawResult {\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("    activeDateTime: ").append(toIndentedString(activeDateTime)).append("\n");
    sb.append("    issuerUid: ").append(toIndentedString(issuerUid)).append("\n");
    sb.append("    issuerUidType: ").append(toIndentedString(issuerUidType)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("startDateTime");
    openapiFields.add("activeDateTime");
    openapiFields.add("issuerUid");
    openapiFields.add("issuerUidType");
    openapiFields.add("reason");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmpowermentWithdrawResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmpowermentWithdrawResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmpowermentWithdrawResult is not found in the empty JSON string", EmpowermentWithdrawResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmpowermentWithdrawResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmpowermentWithdrawResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("issuerUid") != null && !jsonObj.get("issuerUid").isJsonNull()) && !jsonObj.get("issuerUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerUid").toString()));
      }
      // validate the optional field `issuerUidType`
      if (jsonObj.get("issuerUidType") != null && !jsonObj.get("issuerUidType").isJsonNull()) {
        IdentifierType.validateJsonElement(jsonObj.get("issuerUidType"));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EmpowermentWithdrawalStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmpowermentWithdrawResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmpowermentWithdrawResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmpowermentWithdrawResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmpowermentWithdrawResult.class));

       return (TypeAdapter<T>) new TypeAdapter<EmpowermentWithdrawResult>() {
           @Override
           public void write(JsonWriter out, EmpowermentWithdrawResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmpowermentWithdrawResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmpowermentWithdrawResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmpowermentWithdrawResult
   * @throws IOException if the JSON string is invalid with respect to EmpowermentWithdrawResult
   */
  public static EmpowermentWithdrawResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmpowermentWithdrawResult.class);
  }

  /**
   * Convert an instance of EmpowermentWithdrawResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

