/*
 * eID - RO HTTP API
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthorizerIdentifierData;
import org.openapitools.client.model.IdentifierType;
import org.openapitools.client.model.OnBehalfOf;
import org.openapitools.client.model.TypeOfEmpowerment;
import org.openapitools.client.model.UserIdentifierData;
import org.openapitools.client.model.VolumeOfRepresentationRequest;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eid.sdk.ro.JSON;

/**
 * Used for creating new empowerment statements
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-11T17:57:54.980305500+03:00[Europe/Kiev]", comments = "Generator version: 7.13.0")
public class AddEmpowermentStatementsRequest {
  public static final String SERIALIZED_NAME_ON_BEHALF_OF = "onBehalfOf";
  @SerializedName(SERIALIZED_NAME_ON_BEHALF_OF)
  @javax.annotation.Nullable
  private OnBehalfOf onBehalfOf;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  @javax.annotation.Nullable
  private String uid;

  public static final String SERIALIZED_NAME_UID_TYPE = "uidType";
  @SerializedName(SERIALIZED_NAME_UID_TYPE)
  @javax.annotation.Nullable
  private IdentifierType uidType;

  public static final String SERIALIZED_NAME_EMPOWERED_UIDS = "empoweredUids";
  @SerializedName(SERIALIZED_NAME_EMPOWERED_UIDS)
  @javax.annotation.Nullable
  private List<UserIdentifierData> empoweredUids;

  public static final String SERIALIZED_NAME_TYPE_OF_EMPOWERMENT = "typeOfEmpowerment";
  @SerializedName(SERIALIZED_NAME_TYPE_OF_EMPOWERMENT)
  @javax.annotation.Nullable
  private TypeOfEmpowerment typeOfEmpowerment;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "providerId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  @javax.annotation.Nullable
  private String providerId;

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "providerName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  @javax.annotation.Nullable
  private String providerName;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  @javax.annotation.Nullable
  private Integer serviceId;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  @javax.annotation.Nullable
  private String serviceName;

  public static final String SERIALIZED_NAME_ISSUER_POSITION = "issuerPosition";
  @SerializedName(SERIALIZED_NAME_ISSUER_POSITION)
  @javax.annotation.Nullable
  private String issuerPosition;

  public static final String SERIALIZED_NAME_VOLUME_OF_REPRESENTATION = "volumeOfRepresentation";
  @SerializedName(SERIALIZED_NAME_VOLUME_OF_REPRESENTATION)
  @javax.annotation.Nullable
  private List<VolumeOfRepresentationRequest> volumeOfRepresentation;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime expiryDate;

  public static final String SERIALIZED_NAME_AUTHORIZER_UIDS = "authorizerUids";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_UIDS)
  @javax.annotation.Nullable
  private List<AuthorizerIdentifierData> authorizerUids;

  public AddEmpowermentStatementsRequest() {
  }

  public AddEmpowermentStatementsRequest onBehalfOf(@javax.annotation.Nullable OnBehalfOf onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
    return this;
  }

  /**
   * Get onBehalfOf
   * @return onBehalfOf
   */
  @javax.annotation.Nullable
  public OnBehalfOf getOnBehalfOf() {
    return onBehalfOf;
  }

  public void setOnBehalfOf(@javax.annotation.Nullable OnBehalfOf onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
  }


  public AddEmpowermentStatementsRequest name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of legal entity. When OnBehalfOf.Individual this is taken from the token.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public AddEmpowermentStatementsRequest uid(@javax.annotation.Nullable String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Uid of legal entity. When OnBehalfOf.Individual this is taken from the token.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(@javax.annotation.Nullable String uid) {
    this.uid = uid;
  }


  public AddEmpowermentStatementsRequest uidType(@javax.annotation.Nullable IdentifierType uidType) {
    this.uidType = uidType;
    return this;
  }

  /**
   * Get uidType
   * @return uidType
   */
  @javax.annotation.Nullable
  public IdentifierType getUidType() {
    return uidType;
  }

  public void setUidType(@javax.annotation.Nullable IdentifierType uidType) {
    this.uidType = uidType;
  }


  public AddEmpowermentStatementsRequest empoweredUids(@javax.annotation.Nullable List<UserIdentifierData> empoweredUids) {
    this.empoweredUids = empoweredUids;
    return this;
  }

  public AddEmpowermentStatementsRequest addEmpoweredUidsItem(UserIdentifierData empoweredUidsItem) {
    if (this.empoweredUids == null) {
      this.empoweredUids = new ArrayList<>();
    }
    this.empoweredUids.add(empoweredUidsItem);
    return this;
  }

  /**
   * List of EGNs or LNCHs of empowered people
   * @return empoweredUids
   */
  @javax.annotation.Nullable
  public List<UserIdentifierData> getEmpoweredUids() {
    return empoweredUids;
  }

  public void setEmpoweredUids(@javax.annotation.Nullable List<UserIdentifierData> empoweredUids) {
    this.empoweredUids = empoweredUids;
  }


  public AddEmpowermentStatementsRequest typeOfEmpowerment(@javax.annotation.Nullable TypeOfEmpowerment typeOfEmpowerment) {
    this.typeOfEmpowerment = typeOfEmpowerment;
    return this;
  }

  /**
   * Get typeOfEmpowerment
   * @return typeOfEmpowerment
   */
  @javax.annotation.Nullable
  public TypeOfEmpowerment getTypeOfEmpowerment() {
    return typeOfEmpowerment;
  }

  public void setTypeOfEmpowerment(@javax.annotation.Nullable TypeOfEmpowerment typeOfEmpowerment) {
    this.typeOfEmpowerment = typeOfEmpowerment;
  }


  public AddEmpowermentStatementsRequest providerId(@javax.annotation.Nullable String providerId) {
    this.providerId = providerId;
    return this;
  }

  /**
   * Representation of provider - extended reference
   * @return providerId
   */
  @javax.annotation.Nullable
  public String getProviderId() {
    return providerId;
  }

  public void setProviderId(@javax.annotation.Nullable String providerId) {
    this.providerId = providerId;
  }


  public AddEmpowermentStatementsRequest providerName(@javax.annotation.Nullable String providerName) {
    this.providerName = providerName;
    return this;
  }

  /**
   * Provider name, collected and stored in the moment of execution
   * @return providerName
   */
  @javax.annotation.Nullable
  public String getProviderName() {
    return providerName;
  }

  public void setProviderName(@javax.annotation.Nullable String providerName) {
    this.providerName = providerName;
  }


  public AddEmpowermentStatementsRequest serviceId(@javax.annotation.Nullable Integer serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Numeric representation of service, depends on selected provider - extended reference
   * @return serviceId
   */
  @javax.annotation.Nullable
  public Integer getServiceId() {
    return serviceId;
  }

  public void setServiceId(@javax.annotation.Nullable Integer serviceId) {
    this.serviceId = serviceId;
  }


  public AddEmpowermentStatementsRequest serviceName(@javax.annotation.Nullable String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Service Name, collected and stored in the moment of execution
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(@javax.annotation.Nullable String serviceName) {
    this.serviceName = serviceName;
  }


  public AddEmpowermentStatementsRequest issuerPosition(@javax.annotation.Nullable String issuerPosition) {
    this.issuerPosition = issuerPosition;
    return this;
  }

  /**
   * Name of the position the issuer has in the legal entity
   * @return issuerPosition
   */
  @javax.annotation.Nullable
  public String getIssuerPosition() {
    return issuerPosition;
  }

  public void setIssuerPosition(@javax.annotation.Nullable String issuerPosition) {
    this.issuerPosition = issuerPosition;
  }


  public AddEmpowermentStatementsRequest volumeOfRepresentation(@javax.annotation.Nullable List<VolumeOfRepresentationRequest> volumeOfRepresentation) {
    this.volumeOfRepresentation = volumeOfRepresentation;
    return this;
  }

  public AddEmpowermentStatementsRequest addVolumeOfRepresentationItem(VolumeOfRepresentationRequest volumeOfRepresentationItem) {
    if (this.volumeOfRepresentation == null) {
      this.volumeOfRepresentation = new ArrayList<>();
    }
    this.volumeOfRepresentation.add(volumeOfRepresentationItem);
    return this;
  }

  /**
   * List of all selected actions, that can be performed over selected service
   * @return volumeOfRepresentation
   */
  @javax.annotation.Nullable
  public List<VolumeOfRepresentationRequest> getVolumeOfRepresentation() {
    return volumeOfRepresentation;
  }

  public void setVolumeOfRepresentation(@javax.annotation.Nullable List<VolumeOfRepresentationRequest> volumeOfRepresentation) {
    this.volumeOfRepresentation = volumeOfRepresentation;
  }


  public AddEmpowermentStatementsRequest startDate(@javax.annotation.Nullable OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * UTC. On this date, once verified and signed, the empowerment can be considered active.  If not provided, the empowerment will become immediately active after signing.  Default: DateTime.UtcNow
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(@javax.annotation.Nullable OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public AddEmpowermentStatementsRequest expiryDate(@javax.annotation.Nullable OffsetDateTime expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

  /**
   * UTC. Empowerment statement will be active before this moment. Must be at least 1 hour after current time.  Endless empowerment if this date is null
   * @return expiryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(@javax.annotation.Nullable OffsetDateTime expiryDate) {
    this.expiryDate = expiryDate;
  }


  public AddEmpowermentStatementsRequest authorizerUids(@javax.annotation.Nullable List<AuthorizerIdentifierData> authorizerUids) {
    this.authorizerUids = authorizerUids;
    return this;
  }

  public AddEmpowermentStatementsRequest addAuthorizerUidsItem(AuthorizerIdentifierData authorizerUidsItem) {
    if (this.authorizerUids == null) {
      this.authorizerUids = new ArrayList<>();
    }
    this.authorizerUids.add(authorizerUidsItem);
    return this;
  }

  /**
   * List of EGNs or LNCHs of Authorizer people
   * @return authorizerUids
   */
  @javax.annotation.Nullable
  public List<AuthorizerIdentifierData> getAuthorizerUids() {
    return authorizerUids;
  }

  public void setAuthorizerUids(@javax.annotation.Nullable List<AuthorizerIdentifierData> authorizerUids) {
    this.authorizerUids = authorizerUids;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddEmpowermentStatementsRequest addEmpowermentStatementsRequest = (AddEmpowermentStatementsRequest) o;
    return Objects.equals(this.onBehalfOf, addEmpowermentStatementsRequest.onBehalfOf) &&
        Objects.equals(this.name, addEmpowermentStatementsRequest.name) &&
        Objects.equals(this.uid, addEmpowermentStatementsRequest.uid) &&
        Objects.equals(this.uidType, addEmpowermentStatementsRequest.uidType) &&
        Objects.equals(this.empoweredUids, addEmpowermentStatementsRequest.empoweredUids) &&
        Objects.equals(this.typeOfEmpowerment, addEmpowermentStatementsRequest.typeOfEmpowerment) &&
        Objects.equals(this.providerId, addEmpowermentStatementsRequest.providerId) &&
        Objects.equals(this.providerName, addEmpowermentStatementsRequest.providerName) &&
        Objects.equals(this.serviceId, addEmpowermentStatementsRequest.serviceId) &&
        Objects.equals(this.serviceName, addEmpowermentStatementsRequest.serviceName) &&
        Objects.equals(this.issuerPosition, addEmpowermentStatementsRequest.issuerPosition) &&
        Objects.equals(this.volumeOfRepresentation, addEmpowermentStatementsRequest.volumeOfRepresentation) &&
        Objects.equals(this.startDate, addEmpowermentStatementsRequest.startDate) &&
        Objects.equals(this.expiryDate, addEmpowermentStatementsRequest.expiryDate) &&
        Objects.equals(this.authorizerUids, addEmpowermentStatementsRequest.authorizerUids);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(onBehalfOf, name, uid, uidType, empoweredUids, typeOfEmpowerment, providerId, providerName, serviceId, serviceName, issuerPosition, volumeOfRepresentation, startDate, expiryDate, authorizerUids);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddEmpowermentStatementsRequest {\n");
    sb.append("    onBehalfOf: ").append(toIndentedString(onBehalfOf)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    uidType: ").append(toIndentedString(uidType)).append("\n");
    sb.append("    empoweredUids: ").append(toIndentedString(empoweredUids)).append("\n");
    sb.append("    typeOfEmpowerment: ").append(toIndentedString(typeOfEmpowerment)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    issuerPosition: ").append(toIndentedString(issuerPosition)).append("\n");
    sb.append("    volumeOfRepresentation: ").append(toIndentedString(volumeOfRepresentation)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    authorizerUids: ").append(toIndentedString(authorizerUids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("onBehalfOf");
    openapiFields.add("name");
    openapiFields.add("uid");
    openapiFields.add("uidType");
    openapiFields.add("empoweredUids");
    openapiFields.add("typeOfEmpowerment");
    openapiFields.add("providerId");
    openapiFields.add("providerName");
    openapiFields.add("serviceId");
    openapiFields.add("serviceName");
    openapiFields.add("issuerPosition");
    openapiFields.add("volumeOfRepresentation");
    openapiFields.add("startDate");
    openapiFields.add("expiryDate");
    openapiFields.add("authorizerUids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddEmpowermentStatementsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddEmpowermentStatementsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddEmpowermentStatementsRequest is not found in the empty JSON string", AddEmpowermentStatementsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddEmpowermentStatementsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddEmpowermentStatementsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `onBehalfOf`
      if (jsonObj.get("onBehalfOf") != null && !jsonObj.get("onBehalfOf").isJsonNull()) {
        OnBehalfOf.validateJsonElement(jsonObj.get("onBehalfOf"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      // validate the optional field `uidType`
      if (jsonObj.get("uidType") != null && !jsonObj.get("uidType").isJsonNull()) {
        IdentifierType.validateJsonElement(jsonObj.get("uidType"));
      }
      if (jsonObj.get("empoweredUids") != null && !jsonObj.get("empoweredUids").isJsonNull()) {
        JsonArray jsonArrayempoweredUids = jsonObj.getAsJsonArray("empoweredUids");
        if (jsonArrayempoweredUids != null) {
          // ensure the json data is an array
          if (!jsonObj.get("empoweredUids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `empoweredUids` to be an array in the JSON string but got `%s`", jsonObj.get("empoweredUids").toString()));
          }

          // validate the optional field `empoweredUids` (array)
          for (int i = 0; i < jsonArrayempoweredUids.size(); i++) {
            UserIdentifierData.validateJsonElement(jsonArrayempoweredUids.get(i));
          };
        }
      }
      // validate the optional field `typeOfEmpowerment`
      if (jsonObj.get("typeOfEmpowerment") != null && !jsonObj.get("typeOfEmpowerment").isJsonNull()) {
        TypeOfEmpowerment.validateJsonElement(jsonObj.get("typeOfEmpowerment"));
      }
      if ((jsonObj.get("providerId") != null && !jsonObj.get("providerId").isJsonNull()) && !jsonObj.get("providerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerId").toString()));
      }
      if ((jsonObj.get("providerName") != null && !jsonObj.get("providerName").isJsonNull()) && !jsonObj.get("providerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerName").toString()));
      }
      if ((jsonObj.get("serviceName") != null && !jsonObj.get("serviceName").isJsonNull()) && !jsonObj.get("serviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceName").toString()));
      }
      if ((jsonObj.get("issuerPosition") != null && !jsonObj.get("issuerPosition").isJsonNull()) && !jsonObj.get("issuerPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerPosition").toString()));
      }
      if (jsonObj.get("volumeOfRepresentation") != null && !jsonObj.get("volumeOfRepresentation").isJsonNull()) {
        JsonArray jsonArrayvolumeOfRepresentation = jsonObj.getAsJsonArray("volumeOfRepresentation");
        if (jsonArrayvolumeOfRepresentation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumeOfRepresentation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumeOfRepresentation` to be an array in the JSON string but got `%s`", jsonObj.get("volumeOfRepresentation").toString()));
          }

          // validate the optional field `volumeOfRepresentation` (array)
          for (int i = 0; i < jsonArrayvolumeOfRepresentation.size(); i++) {
            VolumeOfRepresentationRequest.validateJsonElement(jsonArrayvolumeOfRepresentation.get(i));
          };
        }
      }
      if (jsonObj.get("authorizerUids") != null && !jsonObj.get("authorizerUids").isJsonNull()) {
        JsonArray jsonArrayauthorizerUids = jsonObj.getAsJsonArray("authorizerUids");
        if (jsonArrayauthorizerUids != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authorizerUids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authorizerUids` to be an array in the JSON string but got `%s`", jsonObj.get("authorizerUids").toString()));
          }

          // validate the optional field `authorizerUids` (array)
          for (int i = 0; i < jsonArrayauthorizerUids.size(); i++) {
            AuthorizerIdentifierData.validateJsonElement(jsonArrayauthorizerUids.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddEmpowermentStatementsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddEmpowermentStatementsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddEmpowermentStatementsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddEmpowermentStatementsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddEmpowermentStatementsRequest>() {
           @Override
           public void write(JsonWriter out, AddEmpowermentStatementsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddEmpowermentStatementsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddEmpowermentStatementsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddEmpowermentStatementsRequest
   * @throws IOException if the JSON string is invalid with respect to AddEmpowermentStatementsRequest
   */
  public static AddEmpowermentStatementsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddEmpowermentStatementsRequest.class);
  }

  /**
   * Convert an instance of AddEmpowermentStatementsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

