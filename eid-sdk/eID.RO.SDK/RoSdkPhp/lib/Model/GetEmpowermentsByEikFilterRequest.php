<?php
/**
 * GetEmpowermentsByEikFilterRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  RoSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eID - RO HTTP API
 *
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RoSdk\Model;

use \ArrayAccess;
use \RoSdk\ObjectSerializer;

/**
 * GetEmpowermentsByEikFilterRequest Class Doc Comment
 *
 * @category Class
 * @package  RoSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetEmpowermentsByEikFilterRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetEmpowermentsByEikFilterRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'eik' => 'string',
        'status' => '\RoSdk\Model\EmpowermentsByEikFilterStatus',
        'provider_name' => 'string',
        'service_name' => 'string',
        'valid_to_date' => '\DateTime',
        'show_only_no_expiry_date' => 'bool',
        'authorizer_uids' => '\RoSdk\Model\UserIdentifierData[]',
        'sort_by' => '\RoSdk\Model\EmpowermentsByEikSortBy',
        'sort_direction' => '\RoSdk\Model\SortDirection',
        'page_size' => 'int',
        'page_index' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'eik' => null,
        'status' => null,
        'provider_name' => null,
        'service_name' => null,
        'valid_to_date' => 'date-time',
        'show_only_no_expiry_date' => null,
        'authorizer_uids' => null,
        'sort_by' => null,
        'sort_direction' => null,
        'page_size' => 'int32',
        'page_index' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'eik' => true,
        'status' => false,
        'provider_name' => true,
        'service_name' => true,
        'valid_to_date' => true,
        'show_only_no_expiry_date' => true,
        'authorizer_uids' => true,
        'sort_by' => false,
        'sort_direction' => false,
        'page_size' => false,
        'page_index' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eik' => 'eik',
        'status' => 'status',
        'provider_name' => 'providerName',
        'service_name' => 'serviceName',
        'valid_to_date' => 'validToDate',
        'show_only_no_expiry_date' => 'showOnlyNoExpiryDate',
        'authorizer_uids' => 'authorizerUids',
        'sort_by' => 'sortBy',
        'sort_direction' => 'sortDirection',
        'page_size' => 'pageSize',
        'page_index' => 'pageIndex'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eik' => 'setEik',
        'status' => 'setStatus',
        'provider_name' => 'setProviderName',
        'service_name' => 'setServiceName',
        'valid_to_date' => 'setValidToDate',
        'show_only_no_expiry_date' => 'setShowOnlyNoExpiryDate',
        'authorizer_uids' => 'setAuthorizerUids',
        'sort_by' => 'setSortBy',
        'sort_direction' => 'setSortDirection',
        'page_size' => 'setPageSize',
        'page_index' => 'setPageIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eik' => 'getEik',
        'status' => 'getStatus',
        'provider_name' => 'getProviderName',
        'service_name' => 'getServiceName',
        'valid_to_date' => 'getValidToDate',
        'show_only_no_expiry_date' => 'getShowOnlyNoExpiryDate',
        'authorizer_uids' => 'getAuthorizerUids',
        'sort_by' => 'getSortBy',
        'sort_direction' => 'getSortDirection',
        'page_size' => 'getPageSize',
        'page_index' => 'getPageIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('eik', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('provider_name', $data ?? [], null);
        $this->setIfExists('service_name', $data ?? [], null);
        $this->setIfExists('valid_to_date', $data ?? [], null);
        $this->setIfExists('show_only_no_expiry_date', $data ?? [], null);
        $this->setIfExists('authorizer_uids', $data ?? [], null);
        $this->setIfExists('sort_by', $data ?? [], null);
        $this->setIfExists('sort_direction', $data ?? [], null);
        $this->setIfExists('page_size', $data ?? [], null);
        $this->setIfExists('page_index', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eik
     *
     * @return string|null
     */
    public function getEik()
    {
        return $this->container['eik'];
    }

    /**
     * Sets eik
     *
     * @param string|null $eik eik
     *
     * @return self
     */
    public function setEik($eik)
    {
        if (is_null($eik)) {
            array_push($this->openAPINullablesSetToNull, 'eik');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eik', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eik'] = $eik;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \RoSdk\Model\EmpowermentsByEikFilterStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \RoSdk\Model\EmpowermentsByEikFilterStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets provider_name
     *
     * @return string|null
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     *
     * @param string|null $provider_name provider_name
     *
     * @return self
     */
    public function setProviderName($provider_name)
    {
        if (is_null($provider_name)) {
            array_push($this->openAPINullablesSetToNull, 'provider_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets service_name
     *
     * @return string|null
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     *
     * @param string|null $service_name service_name
     *
     * @return self
     */
    public function setServiceName($service_name)
    {
        if (is_null($service_name)) {
            array_push($this->openAPINullablesSetToNull, 'service_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets valid_to_date
     *
     * @return \DateTime|null
     */
    public function getValidToDate()
    {
        return $this->container['valid_to_date'];
    }

    /**
     * Sets valid_to_date
     *
     * @param \DateTime|null $valid_to_date valid_to_date
     *
     * @return self
     */
    public function setValidToDate($valid_to_date)
    {
        if (is_null($valid_to_date)) {
            array_push($this->openAPINullablesSetToNull, 'valid_to_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valid_to_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valid_to_date'] = $valid_to_date;

        return $this;
    }

    /**
     * Gets show_only_no_expiry_date
     *
     * @return bool|null
     */
    public function getShowOnlyNoExpiryDate()
    {
        return $this->container['show_only_no_expiry_date'];
    }

    /**
     * Sets show_only_no_expiry_date
     *
     * @param bool|null $show_only_no_expiry_date show_only_no_expiry_date
     *
     * @return self
     */
    public function setShowOnlyNoExpiryDate($show_only_no_expiry_date)
    {
        if (is_null($show_only_no_expiry_date)) {
            array_push($this->openAPINullablesSetToNull, 'show_only_no_expiry_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('show_only_no_expiry_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['show_only_no_expiry_date'] = $show_only_no_expiry_date;

        return $this;
    }

    /**
     * Gets authorizer_uids
     *
     * @return \RoSdk\Model\UserIdentifierData[]|null
     */
    public function getAuthorizerUids()
    {
        return $this->container['authorizer_uids'];
    }

    /**
     * Sets authorizer_uids
     *
     * @param \RoSdk\Model\UserIdentifierData[]|null $authorizer_uids authorizer_uids
     *
     * @return self
     */
    public function setAuthorizerUids($authorizer_uids)
    {
        if (is_null($authorizer_uids)) {
            array_push($this->openAPINullablesSetToNull, 'authorizer_uids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorizer_uids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authorizer_uids'] = $authorizer_uids;

        return $this;
    }

    /**
     * Gets sort_by
     *
     * @return \RoSdk\Model\EmpowermentsByEikSortBy|null
     */
    public function getSortBy()
    {
        return $this->container['sort_by'];
    }

    /**
     * Sets sort_by
     *
     * @param \RoSdk\Model\EmpowermentsByEikSortBy|null $sort_by sort_by
     *
     * @return self
     */
    public function setSortBy($sort_by)
    {
        if (is_null($sort_by)) {
            throw new \InvalidArgumentException('non-nullable sort_by cannot be null');
        }
        $this->container['sort_by'] = $sort_by;

        return $this;
    }

    /**
     * Gets sort_direction
     *
     * @return \RoSdk\Model\SortDirection|null
     */
    public function getSortDirection()
    {
        return $this->container['sort_direction'];
    }

    /**
     * Sets sort_direction
     *
     * @param \RoSdk\Model\SortDirection|null $sort_direction sort_direction
     *
     * @return self
     */
    public function setSortDirection($sort_direction)
    {
        if (is_null($sort_direction)) {
            throw new \InvalidArgumentException('non-nullable sort_direction cannot be null');
        }
        $this->container['sort_direction'] = $sort_direction;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int|null
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int|null $page_size page_size
     *
     * @return self
     */
    public function setPageSize($page_size)
    {
        if (is_null($page_size)) {
            throw new \InvalidArgumentException('non-nullable page_size cannot be null');
        }
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets page_index
     *
     * @return int|null
     */
    public function getPageIndex()
    {
        return $this->container['page_index'];
    }

    /**
     * Sets page_index
     *
     * @param int|null $page_index page_index
     *
     * @return self
     */
    public function setPageIndex($page_index)
    {
        if (is_null($page_index)) {
            throw new \InvalidArgumentException('non-nullable page_index cannot be null');
        }
        $this->container['page_index'] = $page_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


