<?php
/**
 * AddEmpowermentStatementsRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  RoSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eID - RO HTTP API
 *
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RoSdk\Model;

use \ArrayAccess;
use \RoSdk\ObjectSerializer;

/**
 * AddEmpowermentStatementsRequest Class Doc Comment
 *
 * @category Class
 * @description Used for creating new empowerment statements
 * @package  RoSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AddEmpowermentStatementsRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AddEmpowermentStatementsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'on_behalf_of' => '\RoSdk\Model\OnBehalfOf',
        'name' => 'string',
        'uid' => 'string',
        'uid_type' => '\RoSdk\Model\IdentifierType',
        'empowered_uids' => '\RoSdk\Model\UserIdentifierData[]',
        'type_of_empowerment' => '\RoSdk\Model\TypeOfEmpowerment',
        'provider_id' => 'string',
        'provider_name' => 'string',
        'service_id' => 'int',
        'service_name' => 'string',
        'issuer_position' => 'string',
        'volume_of_representation' => '\RoSdk\Model\VolumeOfRepresentationRequest[]',
        'start_date' => '\DateTime',
        'expiry_date' => '\DateTime',
        'authorizer_uids' => '\RoSdk\Model\AuthorizerIdentifierData[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'on_behalf_of' => null,
        'name' => null,
        'uid' => null,
        'uid_type' => null,
        'empowered_uids' => null,
        'type_of_empowerment' => null,
        'provider_id' => null,
        'provider_name' => null,
        'service_id' => 'int32',
        'service_name' => null,
        'issuer_position' => null,
        'volume_of_representation' => null,
        'start_date' => 'date-time',
        'expiry_date' => 'date-time',
        'authorizer_uids' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'on_behalf_of' => false,
        'name' => true,
        'uid' => true,
        'uid_type' => false,
        'empowered_uids' => true,
        'type_of_empowerment' => false,
        'provider_id' => true,
        'provider_name' => true,
        'service_id' => false,
        'service_name' => true,
        'issuer_position' => true,
        'volume_of_representation' => true,
        'start_date' => false,
        'expiry_date' => true,
        'authorizer_uids' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'on_behalf_of' => 'onBehalfOf',
        'name' => 'name',
        'uid' => 'uid',
        'uid_type' => 'uidType',
        'empowered_uids' => 'empoweredUids',
        'type_of_empowerment' => 'typeOfEmpowerment',
        'provider_id' => 'providerId',
        'provider_name' => 'providerName',
        'service_id' => 'serviceId',
        'service_name' => 'serviceName',
        'issuer_position' => 'issuerPosition',
        'volume_of_representation' => 'volumeOfRepresentation',
        'start_date' => 'startDate',
        'expiry_date' => 'expiryDate',
        'authorizer_uids' => 'authorizerUids'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'on_behalf_of' => 'setOnBehalfOf',
        'name' => 'setName',
        'uid' => 'setUid',
        'uid_type' => 'setUidType',
        'empowered_uids' => 'setEmpoweredUids',
        'type_of_empowerment' => 'setTypeOfEmpowerment',
        'provider_id' => 'setProviderId',
        'provider_name' => 'setProviderName',
        'service_id' => 'setServiceId',
        'service_name' => 'setServiceName',
        'issuer_position' => 'setIssuerPosition',
        'volume_of_representation' => 'setVolumeOfRepresentation',
        'start_date' => 'setStartDate',
        'expiry_date' => 'setExpiryDate',
        'authorizer_uids' => 'setAuthorizerUids'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'on_behalf_of' => 'getOnBehalfOf',
        'name' => 'getName',
        'uid' => 'getUid',
        'uid_type' => 'getUidType',
        'empowered_uids' => 'getEmpoweredUids',
        'type_of_empowerment' => 'getTypeOfEmpowerment',
        'provider_id' => 'getProviderId',
        'provider_name' => 'getProviderName',
        'service_id' => 'getServiceId',
        'service_name' => 'getServiceName',
        'issuer_position' => 'getIssuerPosition',
        'volume_of_representation' => 'getVolumeOfRepresentation',
        'start_date' => 'getStartDate',
        'expiry_date' => 'getExpiryDate',
        'authorizer_uids' => 'getAuthorizerUids'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('on_behalf_of', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('uid', $data ?? [], null);
        $this->setIfExists('uid_type', $data ?? [], null);
        $this->setIfExists('empowered_uids', $data ?? [], null);
        $this->setIfExists('type_of_empowerment', $data ?? [], null);
        $this->setIfExists('provider_id', $data ?? [], null);
        $this->setIfExists('provider_name', $data ?? [], null);
        $this->setIfExists('service_id', $data ?? [], null);
        $this->setIfExists('service_name', $data ?? [], null);
        $this->setIfExists('issuer_position', $data ?? [], null);
        $this->setIfExists('volume_of_representation', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('expiry_date', $data ?? [], null);
        $this->setIfExists('authorizer_uids', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets on_behalf_of
     *
     * @return \RoSdk\Model\OnBehalfOf|null
     */
    public function getOnBehalfOf()
    {
        return $this->container['on_behalf_of'];
    }

    /**
     * Sets on_behalf_of
     *
     * @param \RoSdk\Model\OnBehalfOf|null $on_behalf_of on_behalf_of
     *
     * @return self
     */
    public function setOnBehalfOf($on_behalf_of)
    {
        if (is_null($on_behalf_of)) {
            throw new \InvalidArgumentException('non-nullable on_behalf_of cannot be null');
        }
        $this->container['on_behalf_of'] = $on_behalf_of;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of legal entity. When OnBehalfOf.Individual this is taken from the token.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return string|null
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string|null $uid Uid of legal entity. When OnBehalfOf.Individual this is taken from the token.
     *
     * @return self
     */
    public function setUid($uid)
    {
        if (is_null($uid)) {
            array_push($this->openAPINullablesSetToNull, 'uid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets uid_type
     *
     * @return \RoSdk\Model\IdentifierType|null
     */
    public function getUidType()
    {
        return $this->container['uid_type'];
    }

    /**
     * Sets uid_type
     *
     * @param \RoSdk\Model\IdentifierType|null $uid_type uid_type
     *
     * @return self
     */
    public function setUidType($uid_type)
    {
        if (is_null($uid_type)) {
            throw new \InvalidArgumentException('non-nullable uid_type cannot be null');
        }
        $this->container['uid_type'] = $uid_type;

        return $this;
    }

    /**
     * Gets empowered_uids
     *
     * @return \RoSdk\Model\UserIdentifierData[]|null
     */
    public function getEmpoweredUids()
    {
        return $this->container['empowered_uids'];
    }

    /**
     * Sets empowered_uids
     *
     * @param \RoSdk\Model\UserIdentifierData[]|null $empowered_uids List of EGNs or LNCHs of empowered people
     *
     * @return self
     */
    public function setEmpoweredUids($empowered_uids)
    {
        if (is_null($empowered_uids)) {
            array_push($this->openAPINullablesSetToNull, 'empowered_uids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('empowered_uids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['empowered_uids'] = $empowered_uids;

        return $this;
    }

    /**
     * Gets type_of_empowerment
     *
     * @return \RoSdk\Model\TypeOfEmpowerment|null
     */
    public function getTypeOfEmpowerment()
    {
        return $this->container['type_of_empowerment'];
    }

    /**
     * Sets type_of_empowerment
     *
     * @param \RoSdk\Model\TypeOfEmpowerment|null $type_of_empowerment type_of_empowerment
     *
     * @return self
     */
    public function setTypeOfEmpowerment($type_of_empowerment)
    {
        if (is_null($type_of_empowerment)) {
            throw new \InvalidArgumentException('non-nullable type_of_empowerment cannot be null');
        }
        $this->container['type_of_empowerment'] = $type_of_empowerment;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return string|null
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param string|null $provider_id Representation of provider - extended reference
     *
     * @return self
     */
    public function setProviderId($provider_id)
    {
        if (is_null($provider_id)) {
            array_push($this->openAPINullablesSetToNull, 'provider_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets provider_name
     *
     * @return string|null
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     *
     * @param string|null $provider_name Provider name, collected and stored in the moment of execution
     *
     * @return self
     */
    public function setProviderName($provider_name)
    {
        if (is_null($provider_name)) {
            array_push($this->openAPINullablesSetToNull, 'provider_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets service_id
     *
     * @return int|null
     */
    public function getServiceId()
    {
        return $this->container['service_id'];
    }

    /**
     * Sets service_id
     *
     * @param int|null $service_id Numeric representation of service, depends on selected provider - extended reference
     *
     * @return self
     */
    public function setServiceId($service_id)
    {
        if (is_null($service_id)) {
            throw new \InvalidArgumentException('non-nullable service_id cannot be null');
        }
        $this->container['service_id'] = $service_id;

        return $this;
    }

    /**
     * Gets service_name
     *
     * @return string|null
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     *
     * @param string|null $service_name Service Name, collected and stored in the moment of execution
     *
     * @return self
     */
    public function setServiceName($service_name)
    {
        if (is_null($service_name)) {
            array_push($this->openAPINullablesSetToNull, 'service_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets issuer_position
     *
     * @return string|null
     */
    public function getIssuerPosition()
    {
        return $this->container['issuer_position'];
    }

    /**
     * Sets issuer_position
     *
     * @param string|null $issuer_position Name of the position the issuer has in the legal entity
     *
     * @return self
     */
    public function setIssuerPosition($issuer_position)
    {
        if (is_null($issuer_position)) {
            array_push($this->openAPINullablesSetToNull, 'issuer_position');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issuer_position', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['issuer_position'] = $issuer_position;

        return $this;
    }

    /**
     * Gets volume_of_representation
     *
     * @return \RoSdk\Model\VolumeOfRepresentationRequest[]|null
     */
    public function getVolumeOfRepresentation()
    {
        return $this->container['volume_of_representation'];
    }

    /**
     * Sets volume_of_representation
     *
     * @param \RoSdk\Model\VolumeOfRepresentationRequest[]|null $volume_of_representation List of all selected actions, that can be performed over selected service
     *
     * @return self
     */
    public function setVolumeOfRepresentation($volume_of_representation)
    {
        if (is_null($volume_of_representation)) {
            array_push($this->openAPINullablesSetToNull, 'volume_of_representation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_of_representation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume_of_representation'] = $volume_of_representation;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date UTC. On this date, once verified and signed, the empowerment can be considered active.  If not provided, the empowerment will become immediately active after signing.  Default: DateTime.UtcNow
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime|null
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime|null $expiry_date UTC. Empowerment statement will be active before this moment. Must be at least 1 hour after current time.  Endless empowerment if this date is null
     *
     * @return self
     */
    public function setExpiryDate($expiry_date)
    {
        if (is_null($expiry_date)) {
            array_push($this->openAPINullablesSetToNull, 'expiry_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiry_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets authorizer_uids
     *
     * @return \RoSdk\Model\AuthorizerIdentifierData[]|null
     */
    public function getAuthorizerUids()
    {
        return $this->container['authorizer_uids'];
    }

    /**
     * Sets authorizer_uids
     *
     * @param \RoSdk\Model\AuthorizerIdentifierData[]|null $authorizer_uids List of EGNs or LNCHs of Authorizer people
     *
     * @return self
     */
    public function setAuthorizerUids($authorizer_uids)
    {
        if (is_null($authorizer_uids)) {
            array_push($this->openAPINullablesSetToNull, 'authorizer_uids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorizer_uids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authorizer_uids'] = $authorizer_uids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


