<?php
/**
 * GetEmpowermentsByDeauRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  RoSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eID - RO HTTP API
 *
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RoSdk\Model;

use \ArrayAccess;
use \RoSdk\ObjectSerializer;

/**
 * GetEmpowermentsByDeauRequest Class Doc Comment
 *
 * @category Class
 * @description Get empowerments by DEAU
 * @package  RoSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetEmpowermentsByDeauRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetEmpowermentsByDeauRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'on_behalf_of' => '\RoSdk\Model\OnBehalfOf',
        'authorizer_uid' => 'string',
        'authorizer_uid_type' => '\RoSdk\Model\IdentifierType',
        'empowered_uid' => 'string',
        'empowered_uid_type' => '\RoSdk\Model\IdentifierType',
        'service_id' => 'int',
        'volume_of_representation' => 'string[]',
        'status_on' => '\DateTime',
        'page_size' => 'int',
        'page_index' => 'int',
        'sort_by' => '\RoSdk\Model\EmpowermentsByDeauSortBy',
        'sort_direction' => '\RoSdk\Model\SortDirection'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'on_behalf_of' => null,
        'authorizer_uid' => null,
        'authorizer_uid_type' => null,
        'empowered_uid' => null,
        'empowered_uid_type' => null,
        'service_id' => 'int32',
        'volume_of_representation' => null,
        'status_on' => 'date-time',
        'page_size' => 'int32',
        'page_index' => 'int32',
        'sort_by' => null,
        'sort_direction' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'on_behalf_of' => false,
        'authorizer_uid' => true,
        'authorizer_uid_type' => false,
        'empowered_uid' => true,
        'empowered_uid_type' => false,
        'service_id' => false,
        'volume_of_representation' => true,
        'status_on' => false,
        'page_size' => false,
        'page_index' => false,
        'sort_by' => false,
        'sort_direction' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'on_behalf_of' => 'onBehalfOf',
        'authorizer_uid' => 'authorizerUid',
        'authorizer_uid_type' => 'authorizerUidType',
        'empowered_uid' => 'empoweredUid',
        'empowered_uid_type' => 'empoweredUidType',
        'service_id' => 'serviceId',
        'volume_of_representation' => 'volumeOfRepresentation',
        'status_on' => 'statusOn',
        'page_size' => 'pageSize',
        'page_index' => 'pageIndex',
        'sort_by' => 'sortBy',
        'sort_direction' => 'sortDirection'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'on_behalf_of' => 'setOnBehalfOf',
        'authorizer_uid' => 'setAuthorizerUid',
        'authorizer_uid_type' => 'setAuthorizerUidType',
        'empowered_uid' => 'setEmpoweredUid',
        'empowered_uid_type' => 'setEmpoweredUidType',
        'service_id' => 'setServiceId',
        'volume_of_representation' => 'setVolumeOfRepresentation',
        'status_on' => 'setStatusOn',
        'page_size' => 'setPageSize',
        'page_index' => 'setPageIndex',
        'sort_by' => 'setSortBy',
        'sort_direction' => 'setSortDirection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'on_behalf_of' => 'getOnBehalfOf',
        'authorizer_uid' => 'getAuthorizerUid',
        'authorizer_uid_type' => 'getAuthorizerUidType',
        'empowered_uid' => 'getEmpoweredUid',
        'empowered_uid_type' => 'getEmpoweredUidType',
        'service_id' => 'getServiceId',
        'volume_of_representation' => 'getVolumeOfRepresentation',
        'status_on' => 'getStatusOn',
        'page_size' => 'getPageSize',
        'page_index' => 'getPageIndex',
        'sort_by' => 'getSortBy',
        'sort_direction' => 'getSortDirection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('on_behalf_of', $data ?? [], null);
        $this->setIfExists('authorizer_uid', $data ?? [], null);
        $this->setIfExists('authorizer_uid_type', $data ?? [], null);
        $this->setIfExists('empowered_uid', $data ?? [], null);
        $this->setIfExists('empowered_uid_type', $data ?? [], null);
        $this->setIfExists('service_id', $data ?? [], null);
        $this->setIfExists('volume_of_representation', $data ?? [], null);
        $this->setIfExists('status_on', $data ?? [], null);
        $this->setIfExists('page_size', $data ?? [], null);
        $this->setIfExists('page_index', $data ?? [], null);
        $this->setIfExists('sort_by', $data ?? [], null);
        $this->setIfExists('sort_direction', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets on_behalf_of
     *
     * @return \RoSdk\Model\OnBehalfOf|null
     */
    public function getOnBehalfOf()
    {
        return $this->container['on_behalf_of'];
    }

    /**
     * Sets on_behalf_of
     *
     * @param \RoSdk\Model\OnBehalfOf|null $on_behalf_of on_behalf_of
     *
     * @return self
     */
    public function setOnBehalfOf($on_behalf_of)
    {
        if (is_null($on_behalf_of)) {
            throw new \InvalidArgumentException('non-nullable on_behalf_of cannot be null');
        }
        $this->container['on_behalf_of'] = $on_behalf_of;

        return $this;
    }

    /**
     * Gets authorizer_uid
     *
     * @return string|null
     */
    public function getAuthorizerUid()
    {
        return $this->container['authorizer_uid'];
    }

    /**
     * Sets authorizer_uid
     *
     * @param string|null $authorizer_uid Authorizer Eik/Egn/Lnch
     *
     * @return self
     */
    public function setAuthorizerUid($authorizer_uid)
    {
        if (is_null($authorizer_uid)) {
            array_push($this->openAPINullablesSetToNull, 'authorizer_uid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorizer_uid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authorizer_uid'] = $authorizer_uid;

        return $this;
    }

    /**
     * Gets authorizer_uid_type
     *
     * @return \RoSdk\Model\IdentifierType|null
     */
    public function getAuthorizerUidType()
    {
        return $this->container['authorizer_uid_type'];
    }

    /**
     * Sets authorizer_uid_type
     *
     * @param \RoSdk\Model\IdentifierType|null $authorizer_uid_type authorizer_uid_type
     *
     * @return self
     */
    public function setAuthorizerUidType($authorizer_uid_type)
    {
        if (is_null($authorizer_uid_type)) {
            throw new \InvalidArgumentException('non-nullable authorizer_uid_type cannot be null');
        }
        $this->container['authorizer_uid_type'] = $authorizer_uid_type;

        return $this;
    }

    /**
     * Gets empowered_uid
     *
     * @return string|null
     */
    public function getEmpoweredUid()
    {
        return $this->container['empowered_uid'];
    }

    /**
     * Sets empowered_uid
     *
     * @param string|null $empowered_uid Empowered person Egn/Lnch
     *
     * @return self
     */
    public function setEmpoweredUid($empowered_uid)
    {
        if (is_null($empowered_uid)) {
            array_push($this->openAPINullablesSetToNull, 'empowered_uid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('empowered_uid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['empowered_uid'] = $empowered_uid;

        return $this;
    }

    /**
     * Gets empowered_uid_type
     *
     * @return \RoSdk\Model\IdentifierType|null
     */
    public function getEmpoweredUidType()
    {
        return $this->container['empowered_uid_type'];
    }

    /**
     * Sets empowered_uid_type
     *
     * @param \RoSdk\Model\IdentifierType|null $empowered_uid_type empowered_uid_type
     *
     * @return self
     */
    public function setEmpoweredUidType($empowered_uid_type)
    {
        if (is_null($empowered_uid_type)) {
            throw new \InvalidArgumentException('non-nullable empowered_uid_type cannot be null');
        }
        $this->container['empowered_uid_type'] = $empowered_uid_type;

        return $this;
    }

    /**
     * Gets service_id
     *
     * @return int|null
     */
    public function getServiceId()
    {
        return $this->container['service_id'];
    }

    /**
     * Sets service_id
     *
     * @param int|null $service_id Service Id
     *
     * @return self
     */
    public function setServiceId($service_id)
    {
        if (is_null($service_id)) {
            throw new \InvalidArgumentException('non-nullable service_id cannot be null');
        }
        $this->container['service_id'] = $service_id;

        return $this;
    }

    /**
     * Gets volume_of_representation
     *
     * @return string[]|null
     */
    public function getVolumeOfRepresentation()
    {
        return $this->container['volume_of_representation'];
    }

    /**
     * Sets volume_of_representation
     *
     * @param string[]|null $volume_of_representation Volume of representation.  Optional
     *
     * @return self
     */
    public function setVolumeOfRepresentation($volume_of_representation)
    {
        if (is_null($volume_of_representation)) {
            array_push($this->openAPINullablesSetToNull, 'volume_of_representation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_of_representation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume_of_representation'] = $volume_of_representation;

        return $this;
    }

    /**
     * Gets status_on
     *
     * @return \DateTime|null
     */
    public function getStatusOn()
    {
        return $this->container['status_on'];
    }

    /**
     * Sets status_on
     *
     * @param \DateTime|null $status_on Status on date time
     *
     * @return self
     */
    public function setStatusOn($status_on)
    {
        if (is_null($status_on)) {
            throw new \InvalidArgumentException('non-nullable status_on cannot be null');
        }
        $this->container['status_on'] = $status_on;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int|null
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int|null $page_size Page size
     *
     * @return self
     */
    public function setPageSize($page_size)
    {
        if (is_null($page_size)) {
            throw new \InvalidArgumentException('non-nullable page_size cannot be null');
        }
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets page_index
     *
     * @return int|null
     */
    public function getPageIndex()
    {
        return $this->container['page_index'];
    }

    /**
     * Sets page_index
     *
     * @param int|null $page_index Page index
     *
     * @return self
     */
    public function setPageIndex($page_index)
    {
        if (is_null($page_index)) {
            throw new \InvalidArgumentException('non-nullable page_index cannot be null');
        }
        $this->container['page_index'] = $page_index;

        return $this;
    }

    /**
     * Gets sort_by
     *
     * @return \RoSdk\Model\EmpowermentsByDeauSortBy|null
     */
    public function getSortBy()
    {
        return $this->container['sort_by'];
    }

    /**
     * Sets sort_by
     *
     * @param \RoSdk\Model\EmpowermentsByDeauSortBy|null $sort_by sort_by
     *
     * @return self
     */
    public function setSortBy($sort_by)
    {
        if (is_null($sort_by)) {
            throw new \InvalidArgumentException('non-nullable sort_by cannot be null');
        }
        $this->container['sort_by'] = $sort_by;

        return $this;
    }

    /**
     * Gets sort_direction
     *
     * @return \RoSdk\Model\SortDirection|null
     */
    public function getSortDirection()
    {
        return $this->container['sort_direction'];
    }

    /**
     * Sets sort_direction
     *
     * @param \RoSdk\Model\SortDirection|null $sort_direction sort_direction
     *
     * @return self
     */
    public function setSortDirection($sort_direction)
    {
        if (is_null($sort_direction)) {
            throw new \InvalidArgumentException('non-nullable sort_direction cannot be null');
        }
        $this->container['sort_direction'] = $sort_direction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


