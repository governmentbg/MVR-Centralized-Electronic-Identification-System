/*
 * eID - RO HTTP API
 *
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RoSdk.Client.FileParameter;
using OpenAPIDateConverter = RoSdk.Client.OpenAPIDateConverter;

namespace RoSdk.Model
{
    /// <summary>
    /// Deny Unconfirmed or Active empowerment by DEAU
    /// </summary>
    [DataContract(Name = "DenyEmpowermentByDeauRequest")]
    public partial class DenyEmpowermentByDeauRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DenyEmpowermentByDeauRequest" /> class.
        /// </summary>
        /// <param name="empowermentId">EmpowermentId : the unconfirmed empowerment to deny.</param>
        /// <param name="denialReasonComment">The reason for denying the empowerment application by DEAU.</param>
        public DenyEmpowermentByDeauRequest(Guid empowermentId = default, string denialReasonComment = default)
        {
            this.EmpowermentId = empowermentId;
            this.DenialReasonComment = denialReasonComment;
        }

        /// <summary>
        /// EmpowermentId : the unconfirmed empowerment to deny
        /// </summary>
        /// <value>EmpowermentId : the unconfirmed empowerment to deny</value>
        [DataMember(Name = "empowermentId", EmitDefaultValue = true)]
        public Guid EmpowermentId { get; set; }

        /// <summary>
        /// The reason for denying the empowerment application by DEAU
        /// </summary>
        /// <value>The reason for denying the empowerment application by DEAU</value>
        [DataMember(Name = "denialReasonComment", EmitDefaultValue = true)]
        public string DenialReasonComment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DenyEmpowermentByDeauRequest {\n");
            sb.Append("  EmpowermentId: ").Append(EmpowermentId).Append("\n");
            sb.Append("  DenialReasonComment: ").Append(DenialReasonComment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
