/*
 * eID - RO HTTP API
 *
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RoSdk.Client.FileParameter;
using OpenAPIDateConverter = RoSdk.Client.OpenAPIDateConverter;

namespace RoSdk.Model
{
    /// <summary>
    /// Used for creating new empowerment statements
    /// </summary>
    [DataContract(Name = "AddEmpowermentStatementsRequest")]
    public partial class AddEmpowermentStatementsRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OnBehalfOf
        /// </summary>
        [DataMember(Name = "onBehalfOf", EmitDefaultValue = true)]
        public OnBehalfOf? OnBehalfOf { get; set; }

        /// <summary>
        /// Gets or Sets UidType
        /// </summary>
        [DataMember(Name = "uidType", EmitDefaultValue = true)]
        public IdentifierType? UidType { get; set; }

        /// <summary>
        /// Gets or Sets TypeOfEmpowerment
        /// </summary>
        [DataMember(Name = "typeOfEmpowerment", EmitDefaultValue = true)]
        public TypeOfEmpowerment? TypeOfEmpowerment { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddEmpowermentStatementsRequest" /> class.
        /// </summary>
        /// <param name="onBehalfOf">onBehalfOf.</param>
        /// <param name="name">Name of legal entity. When OnBehalfOf.Individual this is taken from the token..</param>
        /// <param name="uid">Uid of legal entity. When OnBehalfOf.Individual this is taken from the token..</param>
        /// <param name="uidType">uidType.</param>
        /// <param name="empoweredUids">List of EGNs or LNCHs of empowered people.</param>
        /// <param name="typeOfEmpowerment">typeOfEmpowerment.</param>
        /// <param name="providerId">Representation of provider - extended reference.</param>
        /// <param name="providerName">Provider name, collected and stored in the moment of execution.</param>
        /// <param name="serviceId">Numeric representation of service, depends on selected provider - extended reference.</param>
        /// <param name="serviceName">Service Name, collected and stored in the moment of execution.</param>
        /// <param name="issuerPosition">Name of the position the issuer has in the legal entity.</param>
        /// <param name="volumeOfRepresentation">List of all selected actions, that can be performed over selected service.</param>
        /// <param name="startDate">UTC. On this date, once verified and signed, the empowerment can be considered active.  If not provided, the empowerment will become immediately active after signing.  Default: DateTime.UtcNow.</param>
        /// <param name="expiryDate">UTC. Empowerment statement will be active before this moment. Must be at least 1 hour after current time.  Endless empowerment if this date is null.</param>
        /// <param name="authorizerUids">List of EGNs or LNCHs of Authorizer people.</param>
        public AddEmpowermentStatementsRequest(OnBehalfOf? onBehalfOf = default, string name = default, string uid = default, IdentifierType? uidType = default, List<UserIdentifierData> empoweredUids = default, TypeOfEmpowerment? typeOfEmpowerment = default, string providerId = default, string providerName = default, int serviceId = default, string serviceName = default, string issuerPosition = default, List<VolumeOfRepresentationRequest> volumeOfRepresentation = default, DateTime startDate = default, DateTime? expiryDate = default, List<AuthorizerIdentifierData> authorizerUids = default)
        {
            this.OnBehalfOf = onBehalfOf;
            this.Name = name;
            this.Uid = uid;
            this.UidType = uidType;
            this.EmpoweredUids = empoweredUids;
            this.TypeOfEmpowerment = typeOfEmpowerment;
            this.ProviderId = providerId;
            this.ProviderName = providerName;
            this.ServiceId = serviceId;
            this.ServiceName = serviceName;
            this.IssuerPosition = issuerPosition;
            this.VolumeOfRepresentation = volumeOfRepresentation;
            this.StartDate = startDate;
            this.ExpiryDate = expiryDate;
            this.AuthorizerUids = authorizerUids;
        }

        /// <summary>
        /// Name of legal entity. When OnBehalfOf.Individual this is taken from the token.
        /// </summary>
        /// <value>Name of legal entity. When OnBehalfOf.Individual this is taken from the token.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Uid of legal entity. When OnBehalfOf.Individual this is taken from the token.
        /// </summary>
        /// <value>Uid of legal entity. When OnBehalfOf.Individual this is taken from the token.</value>
        [DataMember(Name = "uid", EmitDefaultValue = true)]
        public string Uid { get; set; }

        /// <summary>
        /// List of EGNs or LNCHs of empowered people
        /// </summary>
        /// <value>List of EGNs or LNCHs of empowered people</value>
        [DataMember(Name = "empoweredUids", EmitDefaultValue = true)]
        public List<UserIdentifierData> EmpoweredUids { get; set; }

        /// <summary>
        /// Representation of provider - extended reference
        /// </summary>
        /// <value>Representation of provider - extended reference</value>
        [DataMember(Name = "providerId", EmitDefaultValue = true)]
        public string ProviderId { get; set; }

        /// <summary>
        /// Provider name, collected and stored in the moment of execution
        /// </summary>
        /// <value>Provider name, collected and stored in the moment of execution</value>
        [DataMember(Name = "providerName", EmitDefaultValue = true)]
        public string ProviderName { get; set; }

        /// <summary>
        /// Numeric representation of service, depends on selected provider - extended reference
        /// </summary>
        /// <value>Numeric representation of service, depends on selected provider - extended reference</value>
        [DataMember(Name = "serviceId", EmitDefaultValue = true)]
        public int ServiceId { get; set; }

        /// <summary>
        /// Service Name, collected and stored in the moment of execution
        /// </summary>
        /// <value>Service Name, collected and stored in the moment of execution</value>
        [DataMember(Name = "serviceName", EmitDefaultValue = true)]
        public string ServiceName { get; set; }

        /// <summary>
        /// Name of the position the issuer has in the legal entity
        /// </summary>
        /// <value>Name of the position the issuer has in the legal entity</value>
        [DataMember(Name = "issuerPosition", EmitDefaultValue = true)]
        public string IssuerPosition { get; set; }

        /// <summary>
        /// List of all selected actions, that can be performed over selected service
        /// </summary>
        /// <value>List of all selected actions, that can be performed over selected service</value>
        [DataMember(Name = "volumeOfRepresentation", EmitDefaultValue = true)]
        public List<VolumeOfRepresentationRequest> VolumeOfRepresentation { get; set; }

        /// <summary>
        /// UTC. On this date, once verified and signed, the empowerment can be considered active.  If not provided, the empowerment will become immediately active after signing.  Default: DateTime.UtcNow
        /// </summary>
        /// <value>UTC. On this date, once verified and signed, the empowerment can be considered active.  If not provided, the empowerment will become immediately active after signing.  Default: DateTime.UtcNow</value>
        [DataMember(Name = "startDate", EmitDefaultValue = true)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// UTC. Empowerment statement will be active before this moment. Must be at least 1 hour after current time.  Endless empowerment if this date is null
        /// </summary>
        /// <value>UTC. Empowerment statement will be active before this moment. Must be at least 1 hour after current time.  Endless empowerment if this date is null</value>
        [DataMember(Name = "expiryDate", EmitDefaultValue = true)]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// List of EGNs or LNCHs of Authorizer people
        /// </summary>
        /// <value>List of EGNs or LNCHs of Authorizer people</value>
        [DataMember(Name = "authorizerUids", EmitDefaultValue = true)]
        public List<AuthorizerIdentifierData> AuthorizerUids { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddEmpowermentStatementsRequest {\n");
            sb.Append("  OnBehalfOf: ").Append(OnBehalfOf).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  UidType: ").Append(UidType).Append("\n");
            sb.Append("  EmpoweredUids: ").Append(EmpoweredUids).Append("\n");
            sb.Append("  TypeOfEmpowerment: ").Append(TypeOfEmpowerment).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  IssuerPosition: ").Append(IssuerPosition).Append("\n");
            sb.Append("  VolumeOfRepresentation: ").Append(VolumeOfRepresentation).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  AuthorizerUids: ").Append(AuthorizerUids).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
