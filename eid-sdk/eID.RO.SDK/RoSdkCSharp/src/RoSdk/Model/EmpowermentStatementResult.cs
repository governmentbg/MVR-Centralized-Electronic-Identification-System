/*
 * eID - RO HTTP API
 *
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RoSdk.Client.FileParameter;
using OpenAPIDateConverter = RoSdk.Client.OpenAPIDateConverter;

namespace RoSdk.Model
{
    /// <summary>
    /// EmpowermentStatementResult
    /// </summary>
    [DataContract(Name = "EmpowermentStatementResult")]
    public partial class EmpowermentStatementResult : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public EmpowermentStatementStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets UidType
        /// </summary>
        [DataMember(Name = "uidType", EmitDefaultValue = true)]
        public IdentifierType? UidType { get; set; }

        /// <summary>
        /// Gets or Sets OnBehalfOf
        /// </summary>
        [DataMember(Name = "onBehalfOf", EmitDefaultValue = true)]
        public OnBehalfOf? OnBehalfOf { get; set; }

        /// <summary>
        /// Gets or Sets DenialReason
        /// </summary>
        [DataMember(Name = "denialReason", EmitDefaultValue = true)]
        public EmpowermentsDenialReason? DenialReason { get; set; }

        /// <summary>
        /// Gets or Sets CalculatedStatusOn
        /// </summary>
        [DataMember(Name = "calculatedStatusOn", EmitDefaultValue = true)]
        public CalculatedEmpowermentStatus? CalculatedStatusOn { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmpowermentStatementResult" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="number">number.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="expiryDate">expiryDate.</param>
        /// <param name="status">status.</param>
        /// <param name="uid">uid.</param>
        /// <param name="uidType">uidType.</param>
        /// <param name="name">name.</param>
        /// <param name="onBehalfOf">onBehalfOf.</param>
        /// <param name="authorizerUids">authorizerUids.</param>
        /// <param name="empoweredUids">empoweredUids.</param>
        /// <param name="providerId">providerId.</param>
        /// <param name="providerName">providerName.</param>
        /// <param name="serviceId">serviceId.</param>
        /// <param name="serviceName">serviceName.</param>
        /// <param name="volumeOfRepresentation">volumeOfRepresentation.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="issuerPosition">issuerPosition.</param>
        /// <param name="xmlRepresentation">xmlRepresentation.</param>
        /// <param name="denialReason">denialReason.</param>
        /// <param name="empowermentWithdrawals">empowermentWithdrawals.</param>
        /// <param name="empowermentDisagreements">empowermentDisagreements.</param>
        /// <param name="statusHistory">statusHistory.</param>
        /// <param name="calculatedStatusOn">calculatedStatusOn.</param>
        public EmpowermentStatementResult(Guid id = default, string number = default, DateTime startDate = default, DateTime? expiryDate = default, EmpowermentStatementStatus? status = default, string uid = default, IdentifierType? uidType = default, string name = default, OnBehalfOf? onBehalfOf = default, List<UidResult> authorizerUids = default, List<UidResult> empoweredUids = default, string providerId = default, string providerName = default, int serviceId = default, string serviceName = default, List<VolumeOfRepresentationResult> volumeOfRepresentation = default, DateTime? createdOn = default, string createdBy = default, string issuerPosition = default, string xmlRepresentation = default, EmpowermentsDenialReason? denialReason = default, List<EmpowermentWithdrawResult> empowermentWithdrawals = default, List<EmpowermentDisagreementResult> empowermentDisagreements = default, List<StatusHistoryResult> statusHistory = default, CalculatedEmpowermentStatus? calculatedStatusOn = default)
        {
            this.Id = id;
            this.Number = number;
            this.StartDate = startDate;
            this.ExpiryDate = expiryDate;
            this.Status = status;
            this.Uid = uid;
            this.UidType = uidType;
            this.Name = name;
            this.OnBehalfOf = onBehalfOf;
            this.AuthorizerUids = authorizerUids;
            this.EmpoweredUids = empoweredUids;
            this.ProviderId = providerId;
            this.ProviderName = providerName;
            this.ServiceId = serviceId;
            this.ServiceName = serviceName;
            this.VolumeOfRepresentation = volumeOfRepresentation;
            this.CreatedOn = createdOn;
            this.CreatedBy = createdBy;
            this.IssuerPosition = issuerPosition;
            this.XmlRepresentation = xmlRepresentation;
            this.DenialReason = denialReason;
            this.EmpowermentWithdrawals = empowermentWithdrawals;
            this.EmpowermentDisagreements = empowermentDisagreements;
            this.StatusHistory = statusHistory;
            this.CalculatedStatusOn = calculatedStatusOn;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", EmitDefaultValue = true)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        [DataMember(Name = "expiryDate", EmitDefaultValue = true)]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name = "uid", EmitDefaultValue = true)]
        public string Uid { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizerUids
        /// </summary>
        [DataMember(Name = "authorizerUids", EmitDefaultValue = true)]
        public List<UidResult> AuthorizerUids { get; set; }

        /// <summary>
        /// Gets or Sets EmpoweredUids
        /// </summary>
        [DataMember(Name = "empoweredUids", EmitDefaultValue = true)]
        public List<UidResult> EmpoweredUids { get; set; }

        /// <summary>
        /// Gets or Sets ProviderId
        /// </summary>
        [DataMember(Name = "providerId", EmitDefaultValue = true)]
        public string ProviderId { get; set; }

        /// <summary>
        /// Gets or Sets ProviderName
        /// </summary>
        [DataMember(Name = "providerName", EmitDefaultValue = true)]
        public string ProviderName { get; set; }

        /// <summary>
        /// Gets or Sets ServiceId
        /// </summary>
        [DataMember(Name = "serviceId", EmitDefaultValue = true)]
        public int ServiceId { get; set; }

        /// <summary>
        /// Gets or Sets ServiceName
        /// </summary>
        [DataMember(Name = "serviceName", EmitDefaultValue = true)]
        public string ServiceName { get; set; }

        /// <summary>
        /// Gets or Sets VolumeOfRepresentation
        /// </summary>
        [DataMember(Name = "volumeOfRepresentation", EmitDefaultValue = true)]
        public List<VolumeOfRepresentationResult> VolumeOfRepresentation { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", EmitDefaultValue = true)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets IssuerPosition
        /// </summary>
        [DataMember(Name = "issuerPosition", EmitDefaultValue = true)]
        public string IssuerPosition { get; set; }

        /// <summary>
        /// Gets or Sets XmlRepresentation
        /// </summary>
        [DataMember(Name = "xmlRepresentation", EmitDefaultValue = true)]
        public string XmlRepresentation { get; set; }

        /// <summary>
        /// Gets or Sets EmpowermentWithdrawals
        /// </summary>
        [DataMember(Name = "empowermentWithdrawals", EmitDefaultValue = true)]
        public List<EmpowermentWithdrawResult> EmpowermentWithdrawals { get; set; }

        /// <summary>
        /// Gets or Sets EmpowermentDisagreements
        /// </summary>
        [DataMember(Name = "empowermentDisagreements", EmitDefaultValue = true)]
        public List<EmpowermentDisagreementResult> EmpowermentDisagreements { get; set; }

        /// <summary>
        /// Gets or Sets StatusHistory
        /// </summary>
        [DataMember(Name = "statusHistory", EmitDefaultValue = true)]
        public List<StatusHistoryResult> StatusHistory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmpowermentStatementResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  UidType: ").Append(UidType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OnBehalfOf: ").Append(OnBehalfOf).Append("\n");
            sb.Append("  AuthorizerUids: ").Append(AuthorizerUids).Append("\n");
            sb.Append("  EmpoweredUids: ").Append(EmpoweredUids).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  VolumeOfRepresentation: ").Append(VolumeOfRepresentation).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  IssuerPosition: ").Append(IssuerPosition).Append("\n");
            sb.Append("  XmlRepresentation: ").Append(XmlRepresentation).Append("\n");
            sb.Append("  DenialReason: ").Append(DenialReason).Append("\n");
            sb.Append("  EmpowermentWithdrawals: ").Append(EmpowermentWithdrawals).Append("\n");
            sb.Append("  EmpowermentDisagreements: ").Append(EmpowermentDisagreements).Append("\n");
            sb.Append("  StatusHistory: ").Append(StatusHistory).Append("\n");
            sb.Append("  CalculatedStatusOn: ").Append(CalculatedStatusOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
