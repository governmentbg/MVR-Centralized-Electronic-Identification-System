/*
 * eID - RO HTTP API
 *
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RoSdk.Client.FileParameter;
using OpenAPIDateConverter = RoSdk.Client.OpenAPIDateConverter;

namespace RoSdk.Model
{
    /// <summary>
    /// Get empowerments by DEAU
    /// </summary>
    [DataContract(Name = "GetEmpowermentsByDeauRequest")]
    public partial class GetEmpowermentsByDeauRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OnBehalfOf
        /// </summary>
        [DataMember(Name = "onBehalfOf", EmitDefaultValue = true)]
        public OnBehalfOf? OnBehalfOf { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizerUidType
        /// </summary>
        [DataMember(Name = "authorizerUidType", EmitDefaultValue = true)]
        public IdentifierType? AuthorizerUidType { get; set; }

        /// <summary>
        /// Gets or Sets EmpoweredUidType
        /// </summary>
        [DataMember(Name = "empoweredUidType", EmitDefaultValue = true)]
        public IdentifierType? EmpoweredUidType { get; set; }

        /// <summary>
        /// Gets or Sets SortBy
        /// </summary>
        [DataMember(Name = "sortBy", EmitDefaultValue = true)]
        public EmpowermentsByDeauSortBy? SortBy { get; set; }

        /// <summary>
        /// Gets or Sets SortDirection
        /// </summary>
        [DataMember(Name = "sortDirection", EmitDefaultValue = true)]
        public SortDirection? SortDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEmpowermentsByDeauRequest" /> class.
        /// </summary>
        /// <param name="onBehalfOf">onBehalfOf.</param>
        /// <param name="authorizerUid">Authorizer Eik/Egn/Lnch.</param>
        /// <param name="authorizerUidType">authorizerUidType.</param>
        /// <param name="empoweredUid">Empowered person Egn/Lnch.</param>
        /// <param name="empoweredUidType">empoweredUidType.</param>
        /// <param name="serviceId">Service Id.</param>
        /// <param name="volumeOfRepresentation">Volume of representation.  Optional.</param>
        /// <param name="statusOn">Status on date time.</param>
        /// <param name="pageSize">Page size.</param>
        /// <param name="pageIndex">Page index.</param>
        /// <param name="sortBy">sortBy.</param>
        /// <param name="sortDirection">sortDirection.</param>
        public GetEmpowermentsByDeauRequest(OnBehalfOf? onBehalfOf = default, string authorizerUid = default, IdentifierType? authorizerUidType = default, string empoweredUid = default, IdentifierType? empoweredUidType = default, int serviceId = default, List<string> volumeOfRepresentation = default, DateTime statusOn = default, int pageSize = default, int pageIndex = default, EmpowermentsByDeauSortBy? sortBy = default, SortDirection? sortDirection = default)
        {
            this.OnBehalfOf = onBehalfOf;
            this.AuthorizerUid = authorizerUid;
            this.AuthorizerUidType = authorizerUidType;
            this.EmpoweredUid = empoweredUid;
            this.EmpoweredUidType = empoweredUidType;
            this.ServiceId = serviceId;
            this.VolumeOfRepresentation = volumeOfRepresentation;
            this.StatusOn = statusOn;
            this.PageSize = pageSize;
            this.PageIndex = pageIndex;
            this.SortBy = sortBy;
            this.SortDirection = sortDirection;
        }

        /// <summary>
        /// Authorizer Eik/Egn/Lnch
        /// </summary>
        /// <value>Authorizer Eik/Egn/Lnch</value>
        [DataMember(Name = "authorizerUid", EmitDefaultValue = true)]
        public string AuthorizerUid { get; set; }

        /// <summary>
        /// Empowered person Egn/Lnch
        /// </summary>
        /// <value>Empowered person Egn/Lnch</value>
        [DataMember(Name = "empoweredUid", EmitDefaultValue = true)]
        public string EmpoweredUid { get; set; }

        /// <summary>
        /// Service Id
        /// </summary>
        /// <value>Service Id</value>
        [DataMember(Name = "serviceId", EmitDefaultValue = true)]
        public int ServiceId { get; set; }

        /// <summary>
        /// Volume of representation.  Optional
        /// </summary>
        /// <value>Volume of representation.  Optional</value>
        [DataMember(Name = "volumeOfRepresentation", EmitDefaultValue = true)]
        public List<string> VolumeOfRepresentation { get; set; }

        /// <summary>
        /// Status on date time
        /// </summary>
        /// <value>Status on date time</value>
        [DataMember(Name = "statusOn", EmitDefaultValue = true)]
        public DateTime StatusOn { get; set; }

        /// <summary>
        /// Page size
        /// </summary>
        /// <value>Page size</value>
        [DataMember(Name = "pageSize", EmitDefaultValue = true)]
        public int PageSize { get; set; }

        /// <summary>
        /// Page index
        /// </summary>
        /// <value>Page index</value>
        [DataMember(Name = "pageIndex", EmitDefaultValue = true)]
        public int PageIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEmpowermentsByDeauRequest {\n");
            sb.Append("  OnBehalfOf: ").Append(OnBehalfOf).Append("\n");
            sb.Append("  AuthorizerUid: ").Append(AuthorizerUid).Append("\n");
            sb.Append("  AuthorizerUidType: ").Append(AuthorizerUidType).Append("\n");
            sb.Append("  EmpoweredUid: ").Append(EmpoweredUid).Append("\n");
            sb.Append("  EmpoweredUidType: ").Append(EmpoweredUidType).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  VolumeOfRepresentation: ").Append(VolumeOfRepresentation).Append("\n");
            sb.Append("  StatusOn: ").Append(StatusOn).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
