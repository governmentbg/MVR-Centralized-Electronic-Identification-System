/*
 * eID - RO HTTP API
 *
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RoSdk.Client.FileParameter;
using OpenAPIDateConverter = RoSdk.Client.OpenAPIDateConverter;

namespace RoSdk.Model
{
    /// <summary>
    /// GetEmpowermentsByEikFilterRequest
    /// </summary>
    [DataContract(Name = "GetEmpowermentsByEikFilterRequest")]
    public partial class GetEmpowermentsByEikFilterRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public EmpowermentsByEikFilterStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets SortBy
        /// </summary>
        [DataMember(Name = "sortBy", EmitDefaultValue = true)]
        public EmpowermentsByEikSortBy? SortBy { get; set; }

        /// <summary>
        /// Gets or Sets SortDirection
        /// </summary>
        [DataMember(Name = "sortDirection", EmitDefaultValue = true)]
        public SortDirection? SortDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEmpowermentsByEikFilterRequest" /> class.
        /// </summary>
        /// <param name="eik">eik.</param>
        /// <param name="status">status.</param>
        /// <param name="providerName">providerName.</param>
        /// <param name="serviceName">serviceName.</param>
        /// <param name="validToDate">validToDate.</param>
        /// <param name="showOnlyNoExpiryDate">showOnlyNoExpiryDate.</param>
        /// <param name="authorizerUids">authorizerUids.</param>
        /// <param name="sortBy">sortBy.</param>
        /// <param name="sortDirection">sortDirection.</param>
        /// <param name="pageSize">pageSize.</param>
        /// <param name="pageIndex">pageIndex.</param>
        public GetEmpowermentsByEikFilterRequest(string eik = default, EmpowermentsByEikFilterStatus? status = default, string providerName = default, string serviceName = default, DateTime? validToDate = default, bool? showOnlyNoExpiryDate = default, List<UserIdentifierData> authorizerUids = default, EmpowermentsByEikSortBy? sortBy = default, SortDirection? sortDirection = default, int pageSize = default, int pageIndex = default)
        {
            this.Eik = eik;
            this.Status = status;
            this.ProviderName = providerName;
            this.ServiceName = serviceName;
            this.ValidToDate = validToDate;
            this.ShowOnlyNoExpiryDate = showOnlyNoExpiryDate;
            this.AuthorizerUids = authorizerUids;
            this.SortBy = sortBy;
            this.SortDirection = sortDirection;
            this.PageSize = pageSize;
            this.PageIndex = pageIndex;
        }

        /// <summary>
        /// Gets or Sets Eik
        /// </summary>
        [DataMember(Name = "eik", EmitDefaultValue = true)]
        public string Eik { get; set; }

        /// <summary>
        /// Gets or Sets ProviderName
        /// </summary>
        [DataMember(Name = "providerName", EmitDefaultValue = true)]
        public string ProviderName { get; set; }

        /// <summary>
        /// Gets or Sets ServiceName
        /// </summary>
        [DataMember(Name = "serviceName", EmitDefaultValue = true)]
        public string ServiceName { get; set; }

        /// <summary>
        /// Gets or Sets ValidToDate
        /// </summary>
        [DataMember(Name = "validToDate", EmitDefaultValue = true)]
        public DateTime? ValidToDate { get; set; }

        /// <summary>
        /// Gets or Sets ShowOnlyNoExpiryDate
        /// </summary>
        [DataMember(Name = "showOnlyNoExpiryDate", EmitDefaultValue = true)]
        public bool? ShowOnlyNoExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizerUids
        /// </summary>
        [DataMember(Name = "authorizerUids", EmitDefaultValue = true)]
        public List<UserIdentifierData> AuthorizerUids { get; set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [DataMember(Name = "pageSize", EmitDefaultValue = true)]
        public int PageSize { get; set; }

        /// <summary>
        /// Gets or Sets PageIndex
        /// </summary>
        [DataMember(Name = "pageIndex", EmitDefaultValue = true)]
        public int PageIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEmpowermentsByEikFilterRequest {\n");
            sb.Append("  Eik: ").Append(Eik).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  ValidToDate: ").Append(ValidToDate).Append("\n");
            sb.Append("  ShowOnlyNoExpiryDate: ").Append(ShowOnlyNoExpiryDate).Append("\n");
            sb.Append("  AuthorizerUids: ").Append(AuthorizerUids).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
