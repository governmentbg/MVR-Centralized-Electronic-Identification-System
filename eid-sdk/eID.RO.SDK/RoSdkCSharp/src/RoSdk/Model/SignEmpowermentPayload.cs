/*
 * eID - RO HTTP API
 *
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RoSdk.Client.FileParameter;
using OpenAPIDateConverter = RoSdk.Client.OpenAPIDateConverter;

namespace RoSdk.Model
{
    /// <summary>
    /// All user-provided necessary data for empowerment signing
    /// </summary>
    [DataContract(Name = "SignEmpowermentPayload")]
    public partial class SignEmpowermentPayload : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SignatureProvider
        /// </summary>
        [DataMember(Name = "signatureProvider", EmitDefaultValue = true)]
        public SignatureProvider? SignatureProvider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignEmpowermentPayload" /> class.
        /// </summary>
        /// <param name="signatureProvider">signatureProvider.</param>
        /// <param name="detachedSignature">Base64 encoded detached signature.</param>
        public SignEmpowermentPayload(SignatureProvider? signatureProvider = default, string detachedSignature = default)
        {
            this.SignatureProvider = signatureProvider;
            this.DetachedSignature = detachedSignature;
        }

        /// <summary>
        /// Base64 encoded detached signature
        /// </summary>
        /// <value>Base64 encoded detached signature</value>
        [DataMember(Name = "detachedSignature", EmitDefaultValue = true)]
        public string DetachedSignature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignEmpowermentPayload {\n");
            sb.Append("  SignatureProvider: ").Append(SignatureProvider).Append("\n");
            sb.Append("  DetachedSignature: ").Append(DetachedSignature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
