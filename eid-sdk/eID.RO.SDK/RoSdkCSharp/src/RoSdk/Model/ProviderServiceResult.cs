/*
 * eID - RO HTTP API
 *
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RoSdk.Client.FileParameter;
using OpenAPIDateConverter = RoSdk.Client.OpenAPIDateConverter;

namespace RoSdk.Model
{
    /// <summary>
    /// ProviderServiceResult
    /// </summary>
    [DataContract(Name = "ProviderServiceResult")]
    public partial class ProviderServiceResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderServiceResult" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="serviceNumber">serviceNumber.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="paymentInfoNormalCost">paymentInfoNormalCost.</param>
        /// <param name="isEmpowerment">isEmpowerment.</param>
        /// <param name="isDeleted">isDeleted.</param>
        public ProviderServiceResult(Guid id = default, long serviceNumber = default, string name = default, string description = default, double? paymentInfoNormalCost = default, bool isEmpowerment = default, bool isDeleted = default)
        {
            this.Id = id;
            this.ServiceNumber = serviceNumber;
            this.Name = name;
            this.Description = description;
            this.PaymentInfoNormalCost = paymentInfoNormalCost;
            this.IsEmpowerment = isEmpowerment;
            this.IsDeleted = isDeleted;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets ServiceNumber
        /// </summary>
        [DataMember(Name = "serviceNumber", EmitDefaultValue = true)]
        public long ServiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInfoNormalCost
        /// </summary>
        [DataMember(Name = "paymentInfoNormalCost", EmitDefaultValue = true)]
        public double? PaymentInfoNormalCost { get; set; }

        /// <summary>
        /// Gets or Sets IsEmpowerment
        /// </summary>
        [DataMember(Name = "isEmpowerment", EmitDefaultValue = true)]
        public bool IsEmpowerment { get; set; }

        /// <summary>
        /// Gets or Sets IsExternal
        /// </summary>
        [DataMember(Name = "isExternal", EmitDefaultValue = true)]
        public bool IsExternal { get; private set; }

        /// <summary>
        /// Returns false as IsExternal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsExternal()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets ProviderDetailsId
        /// </summary>
        [DataMember(Name = "providerDetailsId", EmitDefaultValue = true)]
        public Guid ProviderDetailsId { get; private set; }

        /// <summary>
        /// Returns false as ProviderDetailsId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProviderDetailsId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ProviderSectionId
        /// </summary>
        [DataMember(Name = "providerSectionId", EmitDefaultValue = true)]
        public Guid ProviderSectionId { get; private set; }

        /// <summary>
        /// Returns false as ProviderSectionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProviderSectionId()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProviderServiceResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ServiceNumber: ").Append(ServiceNumber).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PaymentInfoNormalCost: ").Append(PaymentInfoNormalCost).Append("\n");
            sb.Append("  IsEmpowerment: ").Append(IsEmpowerment).Append("\n");
            sb.Append("  IsExternal: ").Append(IsExternal).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  ProviderDetailsId: ").Append(ProviderDetailsId).Append("\n");
            sb.Append("  ProviderSectionId: ").Append(ProviderSectionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
