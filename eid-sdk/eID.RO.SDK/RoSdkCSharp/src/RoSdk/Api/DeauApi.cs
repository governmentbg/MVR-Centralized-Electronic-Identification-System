/*
 * eID - RO HTTP API
 *
 * Регистър на овластяванията (РО)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using RoSdk.Client;
using RoSdk.Model;

namespace RoSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeauApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Approve Unconfirmed empowerment
        /// </summary>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveEmpowermentByDeauRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid ApproveEmpowermentByDeauAsync(ApproveEmpowermentByDeauRequest approveEmpowermentByDeauRequest = default);

        /// <summary>
        /// Approve Unconfirmed empowerment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveEmpowermentByDeauRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> ApproveEmpowermentByDeauAsyncWithHttpInfo(ApproveEmpowermentByDeauRequest approveEmpowermentByDeauRequest = default);
        /// <summary>
        /// Deny both Active and Unconfirmed empowerments
        /// </summary>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="denyEmpowermentByDeauRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid DenyEmpowermentByDeauAsync(DenyEmpowermentByDeauRequest denyEmpowermentByDeauRequest = default);

        /// <summary>
        /// Deny both Active and Unconfirmed empowerments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="denyEmpowermentByDeauRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> DenyEmpowermentByDeauAsyncWithHttpInfo(DenyEmpowermentByDeauRequest denyEmpowermentByDeauRequest = default);
        /// <summary>
        /// This endpoint will validate Deau and search for a Empowerments based on filter.  It may return either a 200 OK or 202 Accepted response.    - 202 Accepted: Indicates that validation checks for legal representation are still in progress.     The response will contain an empty list. You should retry the request after a short interval.    - 200 OK: All checks have been successfully completed. The response will contain the list of empowerments.    Clients integrating with this endpoint must handle both 202 and 200 status codes appropriately.   If a 202 is received, implement retry logic (e.g., with a delay or exponential backoff)   until a 200 OK is returned with the final data.
        /// </summary>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEmpowermentsByDeauRequest"> (optional)</param>
        /// <returns>EmpowermentStatementResultIPaginatedData</returns>
        EmpowermentStatementResultIPaginatedData GetEmpowermentsByDeauAsync(GetEmpowermentsByDeauRequest getEmpowermentsByDeauRequest = default);

        /// <summary>
        /// This endpoint will validate Deau and search for a Empowerments based on filter.  It may return either a 200 OK or 202 Accepted response.    - 202 Accepted: Indicates that validation checks for legal representation are still in progress.     The response will contain an empty list. You should retry the request after a short interval.    - 200 OK: All checks have been successfully completed. The response will contain the list of empowerments.    Clients integrating with this endpoint must handle both 202 and 200 status codes appropriately.   If a 202 is received, implement retry logic (e.g., with a delay or exponential backoff)   until a 200 OK is returned with the final data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEmpowermentsByDeauRequest"> (optional)</param>
        /// <returns>ApiResponse of EmpowermentStatementResultIPaginatedData</returns>
        ApiResponse<EmpowermentStatementResultIPaginatedData> GetEmpowermentsByDeauAsyncWithHttpInfo(GetEmpowermentsByDeauRequest getEmpowermentsByDeauRequest = default);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeauApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Approve Unconfirmed empowerment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveEmpowermentByDeauRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> ApproveEmpowermentByDeauAsyncAsync(ApproveEmpowermentByDeauRequest approveEmpowermentByDeauRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Approve Unconfirmed empowerment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveEmpowermentByDeauRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> ApproveEmpowermentByDeauAsyncWithHttpInfoAsync(ApproveEmpowermentByDeauRequest approveEmpowermentByDeauRequest = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Deny both Active and Unconfirmed empowerments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="denyEmpowermentByDeauRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> DenyEmpowermentByDeauAsyncAsync(DenyEmpowermentByDeauRequest denyEmpowermentByDeauRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deny both Active and Unconfirmed empowerments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="denyEmpowermentByDeauRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> DenyEmpowermentByDeauAsyncWithHttpInfoAsync(DenyEmpowermentByDeauRequest denyEmpowermentByDeauRequest = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// This endpoint will validate Deau and search for a Empowerments based on filter.  It may return either a 200 OK or 202 Accepted response.    - 202 Accepted: Indicates that validation checks for legal representation are still in progress.     The response will contain an empty list. You should retry the request after a short interval.    - 200 OK: All checks have been successfully completed. The response will contain the list of empowerments.    Clients integrating with this endpoint must handle both 202 and 200 status codes appropriately.   If a 202 is received, implement retry logic (e.g., with a delay or exponential backoff)   until a 200 OK is returned with the final data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEmpowermentsByDeauRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmpowermentStatementResultIPaginatedData</returns>
        System.Threading.Tasks.Task<EmpowermentStatementResultIPaginatedData> GetEmpowermentsByDeauAsyncAsync(GetEmpowermentsByDeauRequest getEmpowermentsByDeauRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// This endpoint will validate Deau and search for a Empowerments based on filter.  It may return either a 200 OK or 202 Accepted response.    - 202 Accepted: Indicates that validation checks for legal representation are still in progress.     The response will contain an empty list. You should retry the request after a short interval.    - 200 OK: All checks have been successfully completed. The response will contain the list of empowerments.    Clients integrating with this endpoint must handle both 202 and 200 status codes appropriately.   If a 202 is received, implement retry logic (e.g., with a delay or exponential backoff)   until a 200 OK is returned with the final data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEmpowermentsByDeauRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmpowermentStatementResultIPaginatedData)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmpowermentStatementResultIPaginatedData>> GetEmpowermentsByDeauAsyncWithHttpInfoAsync(GetEmpowermentsByDeauRequest getEmpowermentsByDeauRequest = default, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeauApi : IDeauApiSync, IDeauApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeauApi : IDisposable, IDeauApi
    {
        private RoSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeauApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public DeauApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeauApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public DeauApi(string basePath)
        {
            this.Configuration = RoSdk.Client.Configuration.MergeConfigurations(
                RoSdk.Client.GlobalConfiguration.Instance,
                new RoSdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new RoSdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = RoSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeauApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public DeauApi(RoSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RoSdk.Client.Configuration.MergeConfigurations(
                RoSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new RoSdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = RoSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeauApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DeauApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeauApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DeauApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = RoSdk.Client.Configuration.MergeConfigurations(
                RoSdk.Client.GlobalConfiguration.Instance,
                new RoSdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new RoSdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = RoSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeauApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DeauApi(HttpClient client, RoSdk.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = RoSdk.Client.Configuration.MergeConfigurations(
                RoSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new RoSdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = RoSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeauApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public DeauApi(RoSdk.Client.ISynchronousClient client, RoSdk.Client.IAsynchronousClient asyncClient, RoSdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RoSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public RoSdk.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RoSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RoSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RoSdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RoSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Approve Unconfirmed empowerment 
        /// </summary>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveEmpowermentByDeauRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid ApproveEmpowermentByDeauAsync(ApproveEmpowermentByDeauRequest approveEmpowermentByDeauRequest = default)
        {
            RoSdk.Client.ApiResponse<Guid> localVarResponse = ApproveEmpowermentByDeauAsyncWithHttpInfo(approveEmpowermentByDeauRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Approve Unconfirmed empowerment 
        /// </summary>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveEmpowermentByDeauRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public RoSdk.Client.ApiResponse<Guid> ApproveEmpowermentByDeauAsyncWithHttpInfo(ApproveEmpowermentByDeauRequest approveEmpowermentByDeauRequest = default)
        {
            RoSdk.Client.RequestOptions localVarRequestOptions = new RoSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RoSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RoSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = approveEmpowermentByDeauRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Guid>("/api/v1/Deau/approve-empowerment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApproveEmpowermentByDeauAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve Unconfirmed empowerment 
        /// </summary>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveEmpowermentByDeauRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> ApproveEmpowermentByDeauAsyncAsync(ApproveEmpowermentByDeauRequest approveEmpowermentByDeauRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            RoSdk.Client.ApiResponse<Guid> localVarResponse = await ApproveEmpowermentByDeauAsyncWithHttpInfoAsync(approveEmpowermentByDeauRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Approve Unconfirmed empowerment 
        /// </summary>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approveEmpowermentByDeauRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<RoSdk.Client.ApiResponse<Guid>> ApproveEmpowermentByDeauAsyncWithHttpInfoAsync(ApproveEmpowermentByDeauRequest approveEmpowermentByDeauRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {

            RoSdk.Client.RequestOptions localVarRequestOptions = new RoSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RoSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RoSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = approveEmpowermentByDeauRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Guid>("/api/v1/Deau/approve-empowerment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApproveEmpowermentByDeauAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deny both Active and Unconfirmed empowerments 
        /// </summary>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="denyEmpowermentByDeauRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid DenyEmpowermentByDeauAsync(DenyEmpowermentByDeauRequest denyEmpowermentByDeauRequest = default)
        {
            RoSdk.Client.ApiResponse<Guid> localVarResponse = DenyEmpowermentByDeauAsyncWithHttpInfo(denyEmpowermentByDeauRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deny both Active and Unconfirmed empowerments 
        /// </summary>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="denyEmpowermentByDeauRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public RoSdk.Client.ApiResponse<Guid> DenyEmpowermentByDeauAsyncWithHttpInfo(DenyEmpowermentByDeauRequest denyEmpowermentByDeauRequest = default)
        {
            RoSdk.Client.RequestOptions localVarRequestOptions = new RoSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RoSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RoSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = denyEmpowermentByDeauRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Guid>("/api/v1/Deau/deny-empowerment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DenyEmpowermentByDeauAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deny both Active and Unconfirmed empowerments 
        /// </summary>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="denyEmpowermentByDeauRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> DenyEmpowermentByDeauAsyncAsync(DenyEmpowermentByDeauRequest denyEmpowermentByDeauRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            RoSdk.Client.ApiResponse<Guid> localVarResponse = await DenyEmpowermentByDeauAsyncWithHttpInfoAsync(denyEmpowermentByDeauRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deny both Active and Unconfirmed empowerments 
        /// </summary>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="denyEmpowermentByDeauRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<RoSdk.Client.ApiResponse<Guid>> DenyEmpowermentByDeauAsyncWithHttpInfoAsync(DenyEmpowermentByDeauRequest denyEmpowermentByDeauRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {

            RoSdk.Client.RequestOptions localVarRequestOptions = new RoSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RoSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RoSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = denyEmpowermentByDeauRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Guid>("/api/v1/Deau/deny-empowerment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DenyEmpowermentByDeauAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will validate Deau and search for a Empowerments based on filter.  It may return either a 200 OK or 202 Accepted response.    - 202 Accepted: Indicates that validation checks for legal representation are still in progress.     The response will contain an empty list. You should retry the request after a short interval.    - 200 OK: All checks have been successfully completed. The response will contain the list of empowerments.    Clients integrating with this endpoint must handle both 202 and 200 status codes appropriately.   If a 202 is received, implement retry logic (e.g., with a delay or exponential backoff)   until a 200 OK is returned with the final data. 
        /// </summary>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEmpowermentsByDeauRequest"> (optional)</param>
        /// <returns>EmpowermentStatementResultIPaginatedData</returns>
        public EmpowermentStatementResultIPaginatedData GetEmpowermentsByDeauAsync(GetEmpowermentsByDeauRequest getEmpowermentsByDeauRequest = default)
        {
            RoSdk.Client.ApiResponse<EmpowermentStatementResultIPaginatedData> localVarResponse = GetEmpowermentsByDeauAsyncWithHttpInfo(getEmpowermentsByDeauRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint will validate Deau and search for a Empowerments based on filter.  It may return either a 200 OK or 202 Accepted response.    - 202 Accepted: Indicates that validation checks for legal representation are still in progress.     The response will contain an empty list. You should retry the request after a short interval.    - 200 OK: All checks have been successfully completed. The response will contain the list of empowerments.    Clients integrating with this endpoint must handle both 202 and 200 status codes appropriately.   If a 202 is received, implement retry logic (e.g., with a delay or exponential backoff)   until a 200 OK is returned with the final data. 
        /// </summary>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEmpowermentsByDeauRequest"> (optional)</param>
        /// <returns>ApiResponse of EmpowermentStatementResultIPaginatedData</returns>
        public RoSdk.Client.ApiResponse<EmpowermentStatementResultIPaginatedData> GetEmpowermentsByDeauAsyncWithHttpInfo(GetEmpowermentsByDeauRequest getEmpowermentsByDeauRequest = default)
        {
            RoSdk.Client.RequestOptions localVarRequestOptions = new RoSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RoSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RoSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = getEmpowermentsByDeauRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmpowermentStatementResultIPaginatedData>("/api/v1/Deau/empowerments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmpowermentsByDeauAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will validate Deau and search for a Empowerments based on filter.  It may return either a 200 OK or 202 Accepted response.    - 202 Accepted: Indicates that validation checks for legal representation are still in progress.     The response will contain an empty list. You should retry the request after a short interval.    - 200 OK: All checks have been successfully completed. The response will contain the list of empowerments.    Clients integrating with this endpoint must handle both 202 and 200 status codes appropriately.   If a 202 is received, implement retry logic (e.g., with a delay or exponential backoff)   until a 200 OK is returned with the final data. 
        /// </summary>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEmpowermentsByDeauRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmpowermentStatementResultIPaginatedData</returns>
        public async System.Threading.Tasks.Task<EmpowermentStatementResultIPaginatedData> GetEmpowermentsByDeauAsyncAsync(GetEmpowermentsByDeauRequest getEmpowermentsByDeauRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            RoSdk.Client.ApiResponse<EmpowermentStatementResultIPaginatedData> localVarResponse = await GetEmpowermentsByDeauAsyncWithHttpInfoAsync(getEmpowermentsByDeauRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint will validate Deau and search for a Empowerments based on filter.  It may return either a 200 OK or 202 Accepted response.    - 202 Accepted: Indicates that validation checks for legal representation are still in progress.     The response will contain an empty list. You should retry the request after a short interval.    - 200 OK: All checks have been successfully completed. The response will contain the list of empowerments.    Clients integrating with this endpoint must handle both 202 and 200 status codes appropriately.   If a 202 is received, implement retry logic (e.g., with a delay or exponential backoff)   until a 200 OK is returned with the final data. 
        /// </summary>
        /// <exception cref="RoSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEmpowermentsByDeauRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmpowermentStatementResultIPaginatedData)</returns>
        public async System.Threading.Tasks.Task<RoSdk.Client.ApiResponse<EmpowermentStatementResultIPaginatedData>> GetEmpowermentsByDeauAsyncWithHttpInfoAsync(GetEmpowermentsByDeauRequest getEmpowermentsByDeauRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {

            RoSdk.Client.RequestOptions localVarRequestOptions = new RoSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RoSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RoSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = getEmpowermentsByDeauRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EmpowermentStatementResultIPaginatedData>("/api/v1/Deau/empowerments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmpowermentsByDeauAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
