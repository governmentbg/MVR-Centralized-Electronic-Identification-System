/*
 * eID - PAN Public HTTP API
 *
 * Подсистема за автоматични нотификации (ПАН) Публична
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using PanSdk.Client;
using PanSdk.Api;
// uncomment below to import models
//using PanSdk.Model;

namespace PanSdk.Test.Api
{
    /// <summary>
    ///  Class for testing NotificationChannelsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class NotificationChannelsApiTests : IDisposable
    {
        private NotificationChannelsApi instance;

        public NotificationChannelsApiTests()
        {
            instance = new NotificationChannelsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of NotificationChannelsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' NotificationChannelsApi
            //Assert.IsType<NotificationChannelsApi>(instance);
        }

        /// <summary>
        /// Test ApiV1NotificationChannelsGet
        /// </summary>
        [Fact]
        public void ApiV1NotificationChannelsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? pageIndex = null;
            //string channelName = null;
            //var response = instance.ApiV1NotificationChannelsGet(pageSize, pageIndex, channelName);
            //Assert.IsType<UserNotificationChannelResultIPaginatedData>(response);
        }

        /// <summary>
        /// Test ApiV1NotificationChannelsIdPut
        /// </summary>
        [Fact]
        public void ApiV1NotificationChannelsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //NotificationChannelPayload notificationChannelPayload = null;
            //instance.ApiV1NotificationChannelsIdPut(id, notificationChannelPayload);
        }

        /// <summary>
        /// Test ApiV1NotificationChannelsSelectedGet
        /// </summary>
        [Fact]
        public void ApiV1NotificationChannelsSelectedGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? pageIndex = null;
            //var response = instance.ApiV1NotificationChannelsSelectedGet(pageSize, pageIndex);
            //Assert.IsType<GuidIPaginatedData>(response);
        }

        /// <summary>
        /// Test ApiV1NotificationChannelsSelectionPost
        /// </summary>
        [Fact]
        public void ApiV1NotificationChannelsSelectionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Guid> requestBody = null;
            //instance.ApiV1NotificationChannelsSelectionPost(requestBody);
        }

        /// <summary>
        /// Test RegisterAsync
        /// </summary>
        [Fact]
        public void RegisterAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RegisterNotificationChannelRequest registerNotificationChannelRequest = null;
            //var response = instance.RegisterAsync(registerNotificationChannelRequest);
            //Assert.IsType<Guid>(response);
        }
    }
}
