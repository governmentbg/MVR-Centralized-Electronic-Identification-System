/*
 * eID - PAN Public HTTP API
 *
 * Подсистема за автоматични нотификации (ПАН) Публична
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using PanSdk.Client;
using PanSdk.Model;

namespace PanSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationChannelsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all notification channels
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <param name="channelName"> (optional)</param>
        /// <returns>UserNotificationChannelResultIPaginatedData</returns>
        UserNotificationChannelResultIPaginatedData ApiV1NotificationChannelsGet(int? pageSize = default, int? pageIndex = default, string channelName = default);

        /// <summary>
        /// Get all notification channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <param name="channelName"> (optional)</param>
        /// <returns>ApiResponse of UserNotificationChannelResultIPaginatedData</returns>
        ApiResponse<UserNotificationChannelResultIPaginatedData> ApiV1NotificationChannelsGetWithHttpInfo(int? pageSize = default, int? pageIndex = default, string channelName = default);
        /// <summary>
        /// Update existing approved notification channel.   New version is added in Pending table. Name must be unique against approved channels.
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="notificationChannelPayload"> (optional)</param>
        /// <returns></returns>
        void ApiV1NotificationChannelsIdPut(Guid id, NotificationChannelPayload notificationChannelPayload = default);

        /// <summary>
        /// Update existing approved notification channel.   New version is added in Pending table. Name must be unique against approved channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="notificationChannelPayload"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1NotificationChannelsIdPutWithHttpInfo(Guid id, NotificationChannelPayload notificationChannelPayload = default);
        /// <summary>
        /// Get user selected notification channels
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <returns>GuidIPaginatedData</returns>
        GuidIPaginatedData ApiV1NotificationChannelsSelectedGet(int? pageSize = default, int? pageIndex = default);

        /// <summary>
        /// Get user selected notification channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <returns>ApiResponse of GuidIPaginatedData</returns>
        ApiResponse<GuidIPaginatedData> ApiV1NotificationChannelsSelectedGetWithHttpInfo(int? pageSize = default, int? pageIndex = default);
        /// <summary>
        /// Register selection of user notification channels
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns></returns>
        void ApiV1NotificationChannelsSelectionPost(List<Guid> requestBody = default);

        /// <summary>
        /// Register selection of user notification channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1NotificationChannelsSelectionPostWithHttpInfo(List<Guid> requestBody = default);
        /// <summary>
        /// Add new notification channel in Pending table. Name must be unique against approved channels.
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNotificationChannelRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid RegisterAsync(RegisterNotificationChannelRequest registerNotificationChannelRequest = default);

        /// <summary>
        /// Add new notification channel in Pending table. Name must be unique against approved channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNotificationChannelRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> RegisterAsyncWithHttpInfo(RegisterNotificationChannelRequest registerNotificationChannelRequest = default);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationChannelsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get all notification channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <param name="channelName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserNotificationChannelResultIPaginatedData</returns>
        System.Threading.Tasks.Task<UserNotificationChannelResultIPaginatedData> ApiV1NotificationChannelsGetAsync(int? pageSize = default, int? pageIndex = default, string channelName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all notification channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <param name="channelName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserNotificationChannelResultIPaginatedData)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserNotificationChannelResultIPaginatedData>> ApiV1NotificationChannelsGetWithHttpInfoAsync(int? pageSize = default, int? pageIndex = default, string channelName = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update existing approved notification channel.   New version is added in Pending table. Name must be unique against approved channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="notificationChannelPayload"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1NotificationChannelsIdPutAsync(Guid id, NotificationChannelPayload notificationChannelPayload = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update existing approved notification channel.   New version is added in Pending table. Name must be unique against approved channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="notificationChannelPayload"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1NotificationChannelsIdPutWithHttpInfoAsync(Guid id, NotificationChannelPayload notificationChannelPayload = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get user selected notification channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GuidIPaginatedData</returns>
        System.Threading.Tasks.Task<GuidIPaginatedData> ApiV1NotificationChannelsSelectedGetAsync(int? pageSize = default, int? pageIndex = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get user selected notification channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GuidIPaginatedData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GuidIPaginatedData>> ApiV1NotificationChannelsSelectedGetWithHttpInfoAsync(int? pageSize = default, int? pageIndex = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Register selection of user notification channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1NotificationChannelsSelectionPostAsync(List<Guid> requestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Register selection of user notification channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1NotificationChannelsSelectionPostWithHttpInfoAsync(List<Guid> requestBody = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Add new notification channel in Pending table. Name must be unique against approved channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNotificationChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> RegisterAsyncAsync(RegisterNotificationChannelRequest registerNotificationChannelRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add new notification channel in Pending table. Name must be unique against approved channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNotificationChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> RegisterAsyncWithHttpInfoAsync(RegisterNotificationChannelRequest registerNotificationChannelRequest = default, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationChannelsApi : INotificationChannelsApiSync, INotificationChannelsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotificationChannelsApi : IDisposable, INotificationChannelsApi
    {
        private PanSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationChannelsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public NotificationChannelsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationChannelsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public NotificationChannelsApi(string basePath)
        {
            this.Configuration = PanSdk.Client.Configuration.MergeConfigurations(
                PanSdk.Client.GlobalConfiguration.Instance,
                new PanSdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PanSdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PanSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationChannelsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public NotificationChannelsApi(PanSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PanSdk.Client.Configuration.MergeConfigurations(
                PanSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PanSdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PanSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationChannelsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public NotificationChannelsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationChannelsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public NotificationChannelsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PanSdk.Client.Configuration.MergeConfigurations(
                PanSdk.Client.GlobalConfiguration.Instance,
                new PanSdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PanSdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PanSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationChannelsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public NotificationChannelsApi(HttpClient client, PanSdk.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PanSdk.Client.Configuration.MergeConfigurations(
                PanSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PanSdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PanSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationChannelsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public NotificationChannelsApi(PanSdk.Client.ISynchronousClient client, PanSdk.Client.IAsynchronousClient asyncClient, PanSdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PanSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public PanSdk.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PanSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PanSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PanSdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PanSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get all notification channels 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <param name="channelName"> (optional)</param>
        /// <returns>UserNotificationChannelResultIPaginatedData</returns>
        public UserNotificationChannelResultIPaginatedData ApiV1NotificationChannelsGet(int? pageSize = default, int? pageIndex = default, string channelName = default)
        {
            PanSdk.Client.ApiResponse<UserNotificationChannelResultIPaginatedData> localVarResponse = ApiV1NotificationChannelsGetWithHttpInfo(pageSize, pageIndex, channelName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all notification channels 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <param name="channelName"> (optional)</param>
        /// <returns>ApiResponse of UserNotificationChannelResultIPaginatedData</returns>
        public PanSdk.Client.ApiResponse<UserNotificationChannelResultIPaginatedData> ApiV1NotificationChannelsGetWithHttpInfo(int? pageSize = default, int? pageIndex = default, string channelName = default)
        {
            PanSdk.Client.RequestOptions localVarRequestOptions = new PanSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PanSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PanSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(PanSdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(PanSdk.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (channelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(PanSdk.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserNotificationChannelResultIPaginatedData>("/api/v1/NotificationChannels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1NotificationChannelsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all notification channels 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <param name="channelName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserNotificationChannelResultIPaginatedData</returns>
        public async System.Threading.Tasks.Task<UserNotificationChannelResultIPaginatedData> ApiV1NotificationChannelsGetAsync(int? pageSize = default, int? pageIndex = default, string channelName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            PanSdk.Client.ApiResponse<UserNotificationChannelResultIPaginatedData> localVarResponse = await ApiV1NotificationChannelsGetWithHttpInfoAsync(pageSize, pageIndex, channelName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all notification channels 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <param name="channelName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserNotificationChannelResultIPaginatedData)</returns>
        public async System.Threading.Tasks.Task<PanSdk.Client.ApiResponse<UserNotificationChannelResultIPaginatedData>> ApiV1NotificationChannelsGetWithHttpInfoAsync(int? pageSize = default, int? pageIndex = default, string channelName = default, System.Threading.CancellationToken cancellationToken = default)
        {

            PanSdk.Client.RequestOptions localVarRequestOptions = new PanSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PanSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PanSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(PanSdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(PanSdk.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (channelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(PanSdk.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserNotificationChannelResultIPaginatedData>("/api/v1/NotificationChannels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1NotificationChannelsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing approved notification channel.   New version is added in Pending table. Name must be unique against approved channels. 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="notificationChannelPayload"> (optional)</param>
        /// <returns></returns>
        public void ApiV1NotificationChannelsIdPut(Guid id, NotificationChannelPayload notificationChannelPayload = default)
        {
            ApiV1NotificationChannelsIdPutWithHttpInfo(id, notificationChannelPayload);
        }

        /// <summary>
        /// Update existing approved notification channel.   New version is added in Pending table. Name must be unique against approved channels. 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="notificationChannelPayload"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PanSdk.Client.ApiResponse<Object> ApiV1NotificationChannelsIdPutWithHttpInfo(Guid id, NotificationChannelPayload notificationChannelPayload = default)
        {
            PanSdk.Client.RequestOptions localVarRequestOptions = new PanSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PanSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PanSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PanSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = notificationChannelPayload;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v1/NotificationChannels/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1NotificationChannelsIdPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing approved notification channel.   New version is added in Pending table. Name must be unique against approved channels. 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="notificationChannelPayload"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1NotificationChannelsIdPutAsync(Guid id, NotificationChannelPayload notificationChannelPayload = default, System.Threading.CancellationToken cancellationToken = default)
        {
            await ApiV1NotificationChannelsIdPutWithHttpInfoAsync(id, notificationChannelPayload, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update existing approved notification channel.   New version is added in Pending table. Name must be unique against approved channels. 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="notificationChannelPayload"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PanSdk.Client.ApiResponse<Object>> ApiV1NotificationChannelsIdPutWithHttpInfoAsync(Guid id, NotificationChannelPayload notificationChannelPayload = default, System.Threading.CancellationToken cancellationToken = default)
        {

            PanSdk.Client.RequestOptions localVarRequestOptions = new PanSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PanSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PanSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PanSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = notificationChannelPayload;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v1/NotificationChannels/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1NotificationChannelsIdPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user selected notification channels 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <returns>GuidIPaginatedData</returns>
        public GuidIPaginatedData ApiV1NotificationChannelsSelectedGet(int? pageSize = default, int? pageIndex = default)
        {
            PanSdk.Client.ApiResponse<GuidIPaginatedData> localVarResponse = ApiV1NotificationChannelsSelectedGetWithHttpInfo(pageSize, pageIndex);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user selected notification channels 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <returns>ApiResponse of GuidIPaginatedData</returns>
        public PanSdk.Client.ApiResponse<GuidIPaginatedData> ApiV1NotificationChannelsSelectedGetWithHttpInfo(int? pageSize = default, int? pageIndex = default)
        {
            PanSdk.Client.RequestOptions localVarRequestOptions = new PanSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PanSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PanSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(PanSdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(PanSdk.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GuidIPaginatedData>("/api/v1/NotificationChannels/selected", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1NotificationChannelsSelectedGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user selected notification channels 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GuidIPaginatedData</returns>
        public async System.Threading.Tasks.Task<GuidIPaginatedData> ApiV1NotificationChannelsSelectedGetAsync(int? pageSize = default, int? pageIndex = default, System.Threading.CancellationToken cancellationToken = default)
        {
            PanSdk.Client.ApiResponse<GuidIPaginatedData> localVarResponse = await ApiV1NotificationChannelsSelectedGetWithHttpInfoAsync(pageSize, pageIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user selected notification channels 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="pageIndex"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GuidIPaginatedData)</returns>
        public async System.Threading.Tasks.Task<PanSdk.Client.ApiResponse<GuidIPaginatedData>> ApiV1NotificationChannelsSelectedGetWithHttpInfoAsync(int? pageSize = default, int? pageIndex = default, System.Threading.CancellationToken cancellationToken = default)
        {

            PanSdk.Client.RequestOptions localVarRequestOptions = new PanSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PanSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PanSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(PanSdk.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(PanSdk.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GuidIPaginatedData>("/api/v1/NotificationChannels/selected", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1NotificationChannelsSelectedGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register selection of user notification channels 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns></returns>
        public void ApiV1NotificationChannelsSelectionPost(List<Guid> requestBody = default)
        {
            ApiV1NotificationChannelsSelectionPostWithHttpInfo(requestBody);
        }

        /// <summary>
        /// Register selection of user notification channels 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PanSdk.Client.ApiResponse<Object> ApiV1NotificationChannelsSelectionPostWithHttpInfo(List<Guid> requestBody = default)
        {
            PanSdk.Client.RequestOptions localVarRequestOptions = new PanSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PanSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PanSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestBody;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/NotificationChannels/selection", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1NotificationChannelsSelectionPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register selection of user notification channels 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1NotificationChannelsSelectionPostAsync(List<Guid> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            await ApiV1NotificationChannelsSelectionPostWithHttpInfoAsync(requestBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register selection of user notification channels 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PanSdk.Client.ApiResponse<Object>> ApiV1NotificationChannelsSelectionPostWithHttpInfoAsync(List<Guid> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {

            PanSdk.Client.RequestOptions localVarRequestOptions = new PanSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PanSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PanSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestBody;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/NotificationChannels/selection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1NotificationChannelsSelectionPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new notification channel in Pending table. Name must be unique against approved channels. 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNotificationChannelRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid RegisterAsync(RegisterNotificationChannelRequest registerNotificationChannelRequest = default)
        {
            PanSdk.Client.ApiResponse<Guid> localVarResponse = RegisterAsyncWithHttpInfo(registerNotificationChannelRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add new notification channel in Pending table. Name must be unique against approved channels. 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNotificationChannelRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public PanSdk.Client.ApiResponse<Guid> RegisterAsyncWithHttpInfo(RegisterNotificationChannelRequest registerNotificationChannelRequest = default)
        {
            PanSdk.Client.RequestOptions localVarRequestOptions = new PanSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PanSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PanSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = registerNotificationChannelRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Guid>("/api/v1/NotificationChannels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new notification channel in Pending table. Name must be unique against approved channels. 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNotificationChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> RegisterAsyncAsync(RegisterNotificationChannelRequest registerNotificationChannelRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            PanSdk.Client.ApiResponse<Guid> localVarResponse = await RegisterAsyncWithHttpInfoAsync(registerNotificationChannelRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add new notification channel in Pending table. Name must be unique against approved channels. 
        /// </summary>
        /// <exception cref="PanSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNotificationChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<PanSdk.Client.ApiResponse<Guid>> RegisterAsyncWithHttpInfoAsync(RegisterNotificationChannelRequest registerNotificationChannelRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {

            PanSdk.Client.RequestOptions localVarRequestOptions = new PanSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PanSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PanSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = registerNotificationChannelRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Guid>("/api/v1/NotificationChannels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
