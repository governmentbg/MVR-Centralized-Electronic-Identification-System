/*
 * eID - PAN Public HTTP API
 * Подсистема за автоматични нотификации (ПАН) Публична
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.TranslationResult;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eid.sdk.pan.JSON;

/**
 * SystemEventResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-11T13:49:58.753764600+03:00[Europe/Kiev]", comments = "Generator version: 7.13.0")
public class SystemEventResult {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private String code;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modifiedOn";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedOn;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "modifiedBy";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  @javax.annotation.Nullable
  private String modifiedBy;

  public static final String SERIALIZED_NAME_IS_MANDATORY = "isMandatory";
  @SerializedName(SERIALIZED_NAME_IS_MANDATORY)
  @javax.annotation.Nullable
  private Boolean isMandatory;

  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  @javax.annotation.Nullable
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_TRANSLATIONS = "translations";
  @SerializedName(SERIALIZED_NAME_TRANSLATIONS)
  @javax.annotation.Nullable
  private List<TranslationResult> translations;

  public SystemEventResult() {
  }

  public SystemEventResult id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public SystemEventResult code(@javax.annotation.Nullable String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable String code) {
    this.code = code;
  }


  public SystemEventResult modifiedOn(@javax.annotation.Nullable OffsetDateTime modifiedOn) {
    this.modifiedOn = modifiedOn;
    return this;
  }

  /**
   * Get modifiedOn
   * @return modifiedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }

  public void setModifiedOn(@javax.annotation.Nullable OffsetDateTime modifiedOn) {
    this.modifiedOn = modifiedOn;
  }


  public SystemEventResult modifiedBy(@javax.annotation.Nullable String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

  /**
   * Get modifiedBy
   * @return modifiedBy
   */
  @javax.annotation.Nullable
  public String getModifiedBy() {
    return modifiedBy;
  }

  public void setModifiedBy(@javax.annotation.Nullable String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public SystemEventResult isMandatory(@javax.annotation.Nullable Boolean isMandatory) {
    this.isMandatory = isMandatory;
    return this;
  }

  /**
   * Get isMandatory
   * @return isMandatory
   */
  @javax.annotation.Nullable
  public Boolean getIsMandatory() {
    return isMandatory;
  }

  public void setIsMandatory(@javax.annotation.Nullable Boolean isMandatory) {
    this.isMandatory = isMandatory;
  }


  public SystemEventResult isDeleted(@javax.annotation.Nullable Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Get isDeleted
   * @return isDeleted
   */
  @javax.annotation.Nullable
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(@javax.annotation.Nullable Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public SystemEventResult translations(@javax.annotation.Nullable List<TranslationResult> translations) {
    this.translations = translations;
    return this;
  }

  public SystemEventResult addTranslationsItem(TranslationResult translationsItem) {
    if (this.translations == null) {
      this.translations = new ArrayList<>();
    }
    this.translations.add(translationsItem);
    return this;
  }

  /**
   * Get translations
   * @return translations
   */
  @javax.annotation.Nullable
  public List<TranslationResult> getTranslations() {
    return translations;
  }

  public void setTranslations(@javax.annotation.Nullable List<TranslationResult> translations) {
    this.translations = translations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemEventResult systemEventResult = (SystemEventResult) o;
    return Objects.equals(this.id, systemEventResult.id) &&
        Objects.equals(this.code, systemEventResult.code) &&
        Objects.equals(this.modifiedOn, systemEventResult.modifiedOn) &&
        Objects.equals(this.modifiedBy, systemEventResult.modifiedBy) &&
        Objects.equals(this.isMandatory, systemEventResult.isMandatory) &&
        Objects.equals(this.isDeleted, systemEventResult.isDeleted) &&
        Objects.equals(this.translations, systemEventResult.translations);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, code, modifiedOn, modifiedBy, isMandatory, isDeleted, translations);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemEventResult {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    isMandatory: ").append(toIndentedString(isMandatory)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("code");
    openapiFields.add("modifiedOn");
    openapiFields.add("modifiedBy");
    openapiFields.add("isMandatory");
    openapiFields.add("isDeleted");
    openapiFields.add("translations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SystemEventResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SystemEventResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SystemEventResult is not found in the empty JSON string", SystemEventResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SystemEventResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SystemEventResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("modifiedBy") != null && !jsonObj.get("modifiedBy").isJsonNull()) && !jsonObj.get("modifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedBy").toString()));
      }
      if (jsonObj.get("translations") != null && !jsonObj.get("translations").isJsonNull()) {
        JsonArray jsonArraytranslations = jsonObj.getAsJsonArray("translations");
        if (jsonArraytranslations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("translations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `translations` to be an array in the JSON string but got `%s`", jsonObj.get("translations").toString()));
          }

          // validate the optional field `translations` (array)
          for (int i = 0; i < jsonArraytranslations.size(); i++) {
            TranslationResult.validateJsonElement(jsonArraytranslations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SystemEventResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SystemEventResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SystemEventResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SystemEventResult.class));

       return (TypeAdapter<T>) new TypeAdapter<SystemEventResult>() {
           @Override
           public void write(JsonWriter out, SystemEventResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SystemEventResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SystemEventResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SystemEventResult
   * @throws IOException if the JSON string is invalid with respect to SystemEventResult
   */
  public static SystemEventResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SystemEventResult.class);
  }

  /**
   * Convert an instance of SystemEventResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

