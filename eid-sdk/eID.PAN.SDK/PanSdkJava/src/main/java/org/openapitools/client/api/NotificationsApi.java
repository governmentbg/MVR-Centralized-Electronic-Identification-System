/*
 * eID - PAN Public HTTP API
 * Подсистема за автоматични нотификации (ПАН) Публична
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import eid.sdk.pan.ApiCallback;
import eid.sdk.pan.ApiClient;
import eid.sdk.pan.ApiException;
import eid.sdk.pan.ApiResponse;
import eid.sdk.pan.Configuration;
import eid.sdk.pan.Pair;
import eid.sdk.pan.ProgressRequestBody;
import eid.sdk.pan.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GuidIPaginatedData;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.RegisterSystemRequest;
import org.openapitools.client.model.RegisteredSystemResultIPaginatedData;
import org.openapitools.client.model.SendNotificationRequestInput;
import java.util.Set;
import java.util.UUID;
import org.openapitools.client.model.ValidationProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV1NotificationsDeactivatePost
     * @param UUID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NotificationsDeactivatePostCall(@javax.annotation.Nullable Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/v1/Notifications/deactivate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NotificationsDeactivatePostValidateBeforeCall(@javax.annotation.Nullable Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        return apiV1NotificationsDeactivatePostCall(UUID, _callback);

    }

    /**
     * Register deactivated user events
     * 
     * @param UUID  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1NotificationsDeactivatePost(@javax.annotation.Nullable Set<UUID> UUID) throws ApiException {
        apiV1NotificationsDeactivatePostWithHttpInfo(UUID);
    }

    /**
     * Register deactivated user events
     * 
     * @param UUID  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1NotificationsDeactivatePostWithHttpInfo(@javax.annotation.Nullable Set<UUID> UUID) throws ApiException {
        okhttp3.Call localVarCall = apiV1NotificationsDeactivatePostValidateBeforeCall(UUID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register deactivated user events (asynchronously)
     * 
     * @param UUID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NotificationsDeactivatePostAsync(@javax.annotation.Nullable Set<UUID> UUID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NotificationsDeactivatePostValidateBeforeCall(UUID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NotificationsDeactivatedGet
     * @param pageSize  (optional, default to 1000)
     * @param pageIndex  (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NotificationsDeactivatedGetCall(@javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer pageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Notifications/deactivated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NotificationsDeactivatedGetValidateBeforeCall(@javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer pageIndex, final ApiCallback _callback) throws ApiException {
        return apiV1NotificationsDeactivatedGetCall(pageSize, pageIndex, _callback);

    }

    /**
     * Get deactivated user notifications
     * 
     * @param pageSize  (optional, default to 1000)
     * @param pageIndex  (optional, default to 1)
     * @return GuidIPaginatedData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GuidIPaginatedData apiV1NotificationsDeactivatedGet(@javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer pageIndex) throws ApiException {
        ApiResponse<GuidIPaginatedData> localVarResp = apiV1NotificationsDeactivatedGetWithHttpInfo(pageSize, pageIndex);
        return localVarResp.getData();
    }

    /**
     * Get deactivated user notifications
     * 
     * @param pageSize  (optional, default to 1000)
     * @param pageIndex  (optional, default to 1)
     * @return ApiResponse&lt;GuidIPaginatedData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GuidIPaginatedData> apiV1NotificationsDeactivatedGetWithHttpInfo(@javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer pageIndex) throws ApiException {
        okhttp3.Call localVarCall = apiV1NotificationsDeactivatedGetValidateBeforeCall(pageSize, pageIndex, null);
        Type localVarReturnType = new TypeToken<GuidIPaginatedData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get deactivated user notifications (asynchronously)
     * 
     * @param pageSize  (optional, default to 1000)
     * @param pageIndex  (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NotificationsDeactivatedGetAsync(@javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer pageIndex, final ApiCallback<GuidIPaginatedData> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NotificationsDeactivatedGetValidateBeforeCall(pageSize, pageIndex, _callback);
        Type localVarReturnType = new TypeToken<GuidIPaginatedData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NotificationsGet
     * @param pageSize  (optional, default to 50)
     * @param pageIndex  (optional, default to 1)
     * @param systemName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NotificationsGetCall(@javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer pageIndex, @javax.annotation.Nullable String systemName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (systemName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("systemName", systemName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NotificationsGetValidateBeforeCall(@javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer pageIndex, @javax.annotation.Nullable String systemName, final ApiCallback _callback) throws ApiException {
        return apiV1NotificationsGetCall(pageSize, pageIndex, systemName, _callback);

    }

    /**
     * Get all Systems and notifications
     * 
     * @param pageSize  (optional, default to 50)
     * @param pageIndex  (optional, default to 1)
     * @param systemName  (optional)
     * @return RegisteredSystemResultIPaginatedData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RegisteredSystemResultIPaginatedData apiV1NotificationsGet(@javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer pageIndex, @javax.annotation.Nullable String systemName) throws ApiException {
        ApiResponse<RegisteredSystemResultIPaginatedData> localVarResp = apiV1NotificationsGetWithHttpInfo(pageSize, pageIndex, systemName);
        return localVarResp.getData();
    }

    /**
     * Get all Systems and notifications
     * 
     * @param pageSize  (optional, default to 50)
     * @param pageIndex  (optional, default to 1)
     * @param systemName  (optional)
     * @return ApiResponse&lt;RegisteredSystemResultIPaginatedData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisteredSystemResultIPaginatedData> apiV1NotificationsGetWithHttpInfo(@javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer pageIndex, @javax.annotation.Nullable String systemName) throws ApiException {
        okhttp3.Call localVarCall = apiV1NotificationsGetValidateBeforeCall(pageSize, pageIndex, systemName, null);
        Type localVarReturnType = new TypeToken<RegisteredSystemResultIPaginatedData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Systems and notifications (asynchronously)
     * 
     * @param pageSize  (optional, default to 50)
     * @param pageIndex  (optional, default to 1)
     * @param systemName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NotificationsGetAsync(@javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer pageIndex, @javax.annotation.Nullable String systemName, final ApiCallback<RegisteredSystemResultIPaginatedData> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NotificationsGetValidateBeforeCall(pageSize, pageIndex, systemName, _callback);
        Type localVarReturnType = new TypeToken<RegisteredSystemResultIPaginatedData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerOrUpdateSystemAsync
     * @param registerSystemRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns id of the newly registered or updated system </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerOrUpdateSystemAsyncCall(@javax.annotation.Nullable RegisterSystemRequest registerSystemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerSystemRequest;

        // create path and map variables
        String localVarPath = "/api/v1/Notifications/systems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerOrUpdateSystemAsyncValidateBeforeCall(@javax.annotation.Nullable RegisterSystemRequest registerSystemRequest, final ApiCallback _callback) throws ApiException {
        return registerOrUpdateSystemAsyncCall(registerSystemRequest, _callback);

    }

    /**
     * Register or update a system with its events.
     * 
     * @param registerSystemRequest  (optional)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns id of the newly registered or updated system </td><td>  -  </td></tr>
     </table>
     */
    public UUID registerOrUpdateSystemAsync(@javax.annotation.Nullable RegisterSystemRequest registerSystemRequest) throws ApiException {
        ApiResponse<UUID> localVarResp = registerOrUpdateSystemAsyncWithHttpInfo(registerSystemRequest);
        return localVarResp.getData();
    }

    /**
     * Register or update a system with its events.
     * 
     * @param registerSystemRequest  (optional)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns id of the newly registered or updated system </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> registerOrUpdateSystemAsyncWithHttpInfo(@javax.annotation.Nullable RegisterSystemRequest registerSystemRequest) throws ApiException {
        okhttp3.Call localVarCall = registerOrUpdateSystemAsyncValidateBeforeCall(registerSystemRequest, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register or update a system with its events. (asynchronously)
     * 
     * @param registerSystemRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns id of the newly registered or updated system </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerOrUpdateSystemAsyncAsync(@javax.annotation.Nullable RegisterSystemRequest registerSystemRequest, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerOrUpdateSystemAsyncValidateBeforeCall(registerSystemRequest, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendNotificationAsync
     * @param sendNotificationRequestInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Returns true if the system managed to queue the notification for sending </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendNotificationAsyncCall(@javax.annotation.Nullable SendNotificationRequestInput sendNotificationRequestInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendNotificationRequestInput;

        // create path and map variables
        String localVarPath = "/api/v1/Notifications/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendNotificationAsyncValidateBeforeCall(@javax.annotation.Nullable SendNotificationRequestInput sendNotificationRequestInput, final ApiCallback _callback) throws ApiException {
        return sendNotificationAsyncCall(sendNotificationRequestInput, _callback);

    }

    /**
     * Send notification to a user via users&#39; selected channels or fallback to default(SMTP) channel.
     * 
     * @param sendNotificationRequestInput  (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Returns true if the system managed to queue the notification for sending </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public Boolean sendNotificationAsync(@javax.annotation.Nullable SendNotificationRequestInput sendNotificationRequestInput) throws ApiException {
        ApiResponse<Boolean> localVarResp = sendNotificationAsyncWithHttpInfo(sendNotificationRequestInput);
        return localVarResp.getData();
    }

    /**
     * Send notification to a user via users&#39; selected channels or fallback to default(SMTP) channel.
     * 
     * @param sendNotificationRequestInput  (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Returns true if the system managed to queue the notification for sending </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> sendNotificationAsyncWithHttpInfo(@javax.annotation.Nullable SendNotificationRequestInput sendNotificationRequestInput) throws ApiException {
        okhttp3.Call localVarCall = sendNotificationAsyncValidateBeforeCall(sendNotificationRequestInput, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send notification to a user via users&#39; selected channels or fallback to default(SMTP) channel. (asynchronously)
     * 
     * @param sendNotificationRequestInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Returns true if the system managed to queue the notification for sending </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendNotificationAsyncAsync(@javax.annotation.Nullable SendNotificationRequestInput sendNotificationRequestInput, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendNotificationAsyncValidateBeforeCall(sendNotificationRequestInput, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
