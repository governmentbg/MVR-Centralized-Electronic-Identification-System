/*
 * eID - PAN Public HTTP API
 * Подсистема за автоматични нотификации (ПАН) Публична
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import eid.sdk.pan.ApiException;
import org.openapitools.client.model.GuidIPaginatedData;
import org.openapitools.client.model.NotificationChannelPayload;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.RegisterNotificationChannelRequest;
import java.util.Set;
import java.util.UUID;
import org.openapitools.client.model.UserNotificationChannelResultIPaginatedData;
import org.openapitools.client.model.ValidationProblemDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationChannelsApi
 */
@Disabled
public class NotificationChannelsApiTest {

    private final NotificationChannelsApi api = new NotificationChannelsApi();

    /**
     * Get all notification channels
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NotificationChannelsGetTest() throws ApiException {
        Integer pageSize = null;
        Integer pageIndex = null;
        String channelName = null;
        UserNotificationChannelResultIPaginatedData response = api.apiV1NotificationChannelsGet(pageSize, pageIndex, channelName);
        // TODO: test validations
    }

    /**
     * Update existing approved notification channel.   New version is added in Pending table. Name must be unique against approved channels.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NotificationChannelsIdPutTest() throws ApiException {
        UUID id = null;
        NotificationChannelPayload notificationChannelPayload = null;
        api.apiV1NotificationChannelsIdPut(id, notificationChannelPayload);
        // TODO: test validations
    }

    /**
     * Get user selected notification channels
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NotificationChannelsSelectedGetTest() throws ApiException {
        Integer pageSize = null;
        Integer pageIndex = null;
        GuidIPaginatedData response = api.apiV1NotificationChannelsSelectedGet(pageSize, pageIndex);
        // TODO: test validations
    }

    /**
     * Register selection of user notification channels
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NotificationChannelsSelectionPostTest() throws ApiException {
        Set<UUID> UUID = null;
        api.apiV1NotificationChannelsSelectionPost(UUID);
        // TODO: test validations
    }

    /**
     * Add new notification channel in Pending table. Name must be unique against approved channels.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerAsyncTest() throws ApiException {
        RegisterNotificationChannelRequest registerNotificationChannelRequest = null;
        UUID response = api.registerAsync(registerNotificationChannelRequest);
        // TODO: test validations
    }

}
