//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=4.8.3928.0.
// 
namespace eID.PIVR.Service.RegiXResponses {
    using System.Xml.Serialization;
    using eID.PIVR.API.Requests;
    using FluentValidation;
    using Newtonsoft.Json;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.bulstat.bg/GetStateOfPlayRequest")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.bulstat.bg/GetStateOfPlayRequest", IsNullable=false)]
    public partial class GetStateOfPlayRequest : IValidatableRequest
    {
        public virtual IValidator GetValidator() => new GetStateOfPlayRequestValidator();

        private string uICField;
        
        private GetStateOfPlayRequestCase caseField;

        /// <remarks/>
        [JsonProperty(PropertyName = "UIC")]
        public string UIC {
            get {
                return this.uICField;
            }
            set {
                this.uICField = value;
            }
        }

        /// <remarks/>
        public GetStateOfPlayRequestCase Case {
            get {
                return this.caseField;
            }
            set {
                this.caseField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.bulstat.bg/GetStateOfPlayRequest")]
    public partial class GetStateOfPlayRequestCase {
        
        private NomenclatureEntry courtField;
        
        private int yearField;
        
        private string numberField;

        /// <remarks/>
        [JsonProperty(PropertyName = "CaseCourt")]
        public NomenclatureEntry Court {
            get {
                return this.courtField;
            }
            set {
                this.courtField = value;
            }
        }

        /// <remarks/>
        [JsonProperty(PropertyName = "CaseYear")]
        public int Year {
            get {
                return this.yearField;
            }
            set {
                this.yearField = value;
            }
        }

        /// <remarks/>
        [JsonProperty(PropertyName = "CaseNumber")]
        public string Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.bulstat.bg/NomenclatureEntry")]
    public partial class NomenclatureEntry {
        
        private string codeField;

        /// <remarks/>
        [JsonProperty(PropertyName = "CaseCode")]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
    }

    internal class GetStateOfPlayRequestValidator : AbstractValidator<GetStateOfPlayRequest>
    {

        public GetStateOfPlayRequestValidator()
        {
            //Need this to stop rules verification after first failure
            ClassLevelCascadeMode = CascadeMode.Stop;
            RuleLevelCascadeMode = CascadeMode.Stop;

            When(r => r.Case is null || r.UIC != null, () => {
                RuleFor(r => r.Case).Null();
                RuleFor(r => r.UIC)
                    .NotEmpty()
                    .Must(uid => ValidatorHelpers.IsLawfulAge(uid)).WithMessage("{PropertyName} is not valid.")
                        .When(r => r.UIC.Length == 10, ApplyConditionTo.CurrentValidator)
                    .Must(uic => uic.Length == 9 || uic.Length == 13).WithMessage("{PropertyName} is not valid.")
                        .When(r => r.UIC.Length != 10, ApplyConditionTo.CurrentValidator);
            }).Otherwise(() => {
                /* Тук Case НЕ е null */
                RuleFor(r => r.UIC).Empty();
                RuleFor(r => r.Case).NotNull();
                RuleFor(r => r.Case.Court).NotNull();
                RuleFor(r => r.Case.Court.Code).NotEmpty();
                RuleFor(r => r.Case.Year)
                    .NotEmpty()
                    .LessThanOrEqualTo(DateTime.UtcNow.Year);

                RuleFor(r => r.Case.Number).NotNull();
            });
       }
    }
}
