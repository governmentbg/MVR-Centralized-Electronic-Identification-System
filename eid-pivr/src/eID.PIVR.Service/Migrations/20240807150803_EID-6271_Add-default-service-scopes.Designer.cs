// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using eID.PIVR.Service.Database;

#nullable disable

namespace eID.PIVR.Service.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240807150803_EID-6271_Add-default-service-scopes")]
    partial class EID6271_Adddefaultservicescopes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("eID.PIVR.Service.Entities.DateOfDeath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UidType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("PersonalId", "CreatedOn")
                        .IsDescending(false, true);

                    b.ToTable("DatesOfDeath", (string)null);
                });

            modelBuilder.Entity("eID.PIVR.Service.Entities.DateOfProhibition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionOfProhibition")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeOfProhibition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("UidType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("DatesOfProhibition", (string)null);
                });

            modelBuilder.Entity("eID.PIVR.Service.Entities.DefaultServiceScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("IISDAServices.Scopes.Defaults", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c215ecf2-f15c-430d-8061-41f3c0595629"),
                            Name = "Заявяване на услугата"
                        },
                        new
                        {
                            Id = new Guid("42cbea41-ba99-4223-820b-6ff03b67d56e"),
                            Name = "Заявяване представянето на информация и документи"
                        },
                        new
                        {
                            Id = new Guid("c73d44f7-3fae-43f3-8413-fd9e18505e75"),
                            Name = "Получаване на съобщения, свързани с електронната административна услуга"
                        },
                        new
                        {
                            Id = new Guid("51994550-9e34-4546-9e33-7dbd586b9532"),
                            Name = "Получаване на резултатите от услугата"
                        },
                        new
                        {
                            Id = new Guid("20ab27de-c94b-4b35-b596-265db6e1051c"),
                            Name = "Обжалване на административния акт, резултат от услугата, или на отказа от издаването на такъв"
                        },
                        new
                        {
                            Id = new Guid("2f40f241-98f1-4308-8090-b2eac2626049"),
                            Name = "Оттегляне на заявлението"
                        });
                });

            modelBuilder.Entity("eID.PIVR.Service.Entities.IISDABatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UIC")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.HasKey("Id");

                    b.HasIndex("IdentificationNumber")
                        .IsUnique();

                    b.HasIndex("Name", "IsDeleted");

                    b.ToTable("IISDABatches", (string)null);
                });

            modelBuilder.Entity("eID.PIVR.Service.Entities.IISDASection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Name", "IsDeleted");

                    b.ToTable("IISDASections", (string)null);
                });

            modelBuilder.Entity("eID.PIVR.Service.Entities.IISDAService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<Guid>("IISDABatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IISDASectionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmpowerment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<decimal?>("PaymentInfoNormalCost")
                        .HasColumnType("numeric");

                    b.Property<long>("ServiceNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IISDASectionId");

                    b.HasIndex("IISDABatchId", "ServiceNumber")
                        .IsUnique();

                    b.HasIndex("ServiceNumber", "Name", "IsEmpowerment", "IsDeleted");

                    b.ToTable("IISDAServices", (string)null);
                });

            modelBuilder.Entity("eID.PIVR.Service.Entities.ServiceScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IISDAServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("IISDAServiceId", "Name")
                        .IsUnique();

                    b.ToTable("IISDAServices.Scopes", (string)null);
                });

            modelBuilder.Entity("eID.PIVR.Service.Entities.IISDAService", b =>
                {
                    b.HasOne("eID.PIVR.Service.Entities.IISDABatch", "IISDABatch")
                        .WithMany("IISDAServices")
                        .HasForeignKey("IISDABatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eID.PIVR.Service.Entities.IISDASection", "IISDASection")
                        .WithMany("IISDAServices")
                        .HasForeignKey("IISDASectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IISDABatch");

                    b.Navigation("IISDASection");
                });

            modelBuilder.Entity("eID.PIVR.Service.Entities.ServiceScope", b =>
                {
                    b.HasOne("eID.PIVR.Service.Entities.IISDAService", "IISDAService")
                        .WithMany("ServiceScopes")
                        .HasForeignKey("IISDAServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IISDAService");
                });

            modelBuilder.Entity("eID.PIVR.Service.Entities.IISDABatch", b =>
                {
                    b.Navigation("IISDAServices");
                });

            modelBuilder.Entity("eID.PIVR.Service.Entities.IISDASection", b =>
                {
                    b.Navigation("IISDAServices");
                });

            modelBuilder.Entity("eID.PIVR.Service.Entities.IISDAService", b =>
                {
                    b.Navigation("ServiceScopes");
                });
#pragma warning restore 612, 618
        }
    }
}
