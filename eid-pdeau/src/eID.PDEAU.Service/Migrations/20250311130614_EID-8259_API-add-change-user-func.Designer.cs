// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using eID.PDEAU.Service.Database;

#nullable disable

namespace eID.PDEAU.Service.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250311130614_EID-8259_API-add-change-user-func")]
    partial class EID8259_APIaddchangeuserfunc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("eID.PDEAU.Service.Entities.AISInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DestinationIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("DestinationIpType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Project")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProtocolPort")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId")
                        .IsUnique();

                    b.ToTable("Providers.AISInformations", (string)null);
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.AdministratorAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<string>("AdministratorFullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("AdministratorUid")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<int>("AdministratorUidType")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Providers.Users.AdministratorActions", (string)null);
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.AdministratorPromotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IssuerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PromotedUserId")
                        .HasMaxLength(200)
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Providers.AdministratorPromotions", (string)null);
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.DefaultServiceScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Providers.Details.Sections.Services.Scopes.Defaults", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c215ecf2-f15c-430d-8061-41f3c0595629"),
                            Name = "Заявяване на услугата"
                        },
                        new
                        {
                            Id = new Guid("42cbea41-ba99-4223-820b-6ff03b67d56e"),
                            Name = "Заявяване представянето на информация и документи"
                        },
                        new
                        {
                            Id = new Guid("c73d44f7-3fae-43f3-8413-fd9e18505e75"),
                            Name = "Получаване на съобщения, свързани с електронната административна услуга"
                        },
                        new
                        {
                            Id = new Guid("51994550-9e34-4546-9e33-7dbd586b9532"),
                            Name = "Получаване на резултатите от услугата"
                        },
                        new
                        {
                            Id = new Guid("20ab27de-c94b-4b35-b596-265db6e1051c"),
                            Name = "Обжалване на административния акт, резултат от услугата, или на отказа от издаването на такъв"
                        },
                        new
                        {
                            Id = new Guid("2f40f241-98f1-4308-8090-b2eac2626049"),
                            Name = "Оттегляне на заявлението"
                        });
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.NumberRegister", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Current")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("LastChange")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Providers.NumbersRegister", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "REGNOID",
                            Current = 0,
                            LastChange = new DateOnly(2025, 3, 11)
                        });
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AISInformationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Bulstat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByAdministratorId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByAdministratorName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DetailsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ExternalNumber")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("GeneralInformation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Headquarters")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("IssuerName")
                        .HasColumnType("text");

                    b.Property<string>("IssuerUid")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<int>("IssuerUidType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("XMLRepresentation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DetailsId");

                    b.ToTable("Providers", (string)null);
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Headquarters")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("SyncedFromOnlineRegistry")
                        .HasColumnType("boolean");

                    b.Property<string>("UIC")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.HasKey("Id");

                    b.HasIndex("IdentificationNumber")
                        .IsUnique()
                        .HasFilter("\"IdentificationNumber\" IS NOT NULL");

                    b.HasIndex("Name", "IsDeleted");

                    b.ToTable("Providers.Details", (string)null);
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UploadedOn")
                        .HasMaxLength(200)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UploaderName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UploaderUid")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<int>("UploaderUidType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Providers.Files", (string)null);
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderOffice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Providers.Offices", (string)null);
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("ProviderDetailsId")
                        .HasColumnType("uuid");

                    b.Property<bool>("SyncedFromOnlineRegistry")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ProviderDetailsId");

                    b.HasIndex("Name", "IsDeleted");

                    b.HasIndex("Name", "ProviderDetailsId")
                        .IsUnique();

                    b.ToTable("Providers.Details.Sections", (string)null);
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<string>("DenialReason")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmpowerment")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MinimumLevelOfAssurance")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<decimal?>("PaymentInfoNormalCost")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProviderDetailsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProviderSectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("RequiredPersonalInformation")
                        .HasColumnType("text");

                    b.Property<string>("ReviewerFullName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("ServiceNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("SyncedFromOnlineRegistry")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ProviderSectionId");

                    b.HasIndex("ProviderDetailsId", "ServiceNumber")
                        .IsUnique()
                        .HasFilter("\"ServiceNumber\" != 0");

                    b.HasIndex("ServiceNumber", "Name", "IsEmpowerment", "IsDeleted");

                    b.ToTable("Providers.Details.Sections.Services", (string)null);
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifierFullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ModifierUid")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<int>("ModifierUidType")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Providers.StatusHistory", (string)null);
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderTimestamp", b =>
                {
                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProviderId");

                    b.ToTable("Providers.Timestamps", (string)null);
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ServiceScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<Guid>("ProviderServiceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProviderServiceId", "Name")
                        .IsUnique();

                    b.ToTable("Providers.Details.Sections.Services.Scopes", (string)null);
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EID")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<int>("UidType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Providers.Users", (string)null);
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.AISInformation", b =>
                {
                    b.HasOne("eID.PDEAU.Service.Entities.Provider", "Provider")
                        .WithOne("AISInformation")
                        .HasForeignKey("eID.PDEAU.Service.Entities.AISInformation", "ProviderId");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.AdministratorAction", b =>
                {
                    b.HasOne("eID.PDEAU.Service.Entities.User", "User")
                        .WithMany("AdministratorActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.Provider", b =>
                {
                    b.HasOne("eID.PDEAU.Service.Entities.ProviderDetails", "Details")
                        .WithMany("Providers")
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Details");
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderFile", b =>
                {
                    b.HasOne("eID.PDEAU.Service.Entities.Provider", "Provider")
                        .WithMany("Files")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderOffice", b =>
                {
                    b.HasOne("eID.PDEAU.Service.Entities.Provider", "Provider")
                        .WithMany("Offices")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderSection", b =>
                {
                    b.HasOne("eID.PDEAU.Service.Entities.ProviderDetails", "ProviderDetails")
                        .WithMany()
                        .HasForeignKey("ProviderDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProviderDetails");
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderService", b =>
                {
                    b.HasOne("eID.PDEAU.Service.Entities.ProviderDetails", "ProviderDetails")
                        .WithMany("ProviderServices")
                        .HasForeignKey("ProviderDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eID.PDEAU.Service.Entities.ProviderSection", "ProviderSection")
                        .WithMany("ProviderServices")
                        .HasForeignKey("ProviderSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProviderDetails");

                    b.Navigation("ProviderSection");
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderStatusHistory", b =>
                {
                    b.HasOne("eID.PDEAU.Service.Entities.Provider", "Provider")
                        .WithMany("StatusHistory")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderTimestamp", b =>
                {
                    b.HasOne("eID.PDEAU.Service.Entities.Provider", "Provider")
                        .WithOne("Timestamp")
                        .HasForeignKey("eID.PDEAU.Service.Entities.ProviderTimestamp", "ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ServiceScope", b =>
                {
                    b.HasOne("eID.PDEAU.Service.Entities.ProviderService", "ProviderService")
                        .WithMany("ServiceScopes")
                        .HasForeignKey("ProviderServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProviderService");
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.User", b =>
                {
                    b.HasOne("eID.PDEAU.Service.Entities.Provider", "Provider")
                        .WithMany("Users")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.Provider", b =>
                {
                    b.Navigation("AISInformation");

                    b.Navigation("Files");

                    b.Navigation("Offices");

                    b.Navigation("StatusHistory");

                    b.Navigation("Timestamp");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderDetails", b =>
                {
                    b.Navigation("ProviderServices");

                    b.Navigation("Providers");
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderSection", b =>
                {
                    b.Navigation("ProviderServices");
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.ProviderService", b =>
                {
                    b.Navigation("ServiceScopes");
                });

            modelBuilder.Entity("eID.PDEAU.Service.Entities.User", b =>
                {
                    b.Navigation("AdministratorActions");
                });
#pragma warning restore 612, 618
        }
    }
}
