using eID.PJS.API.Public.Options;
using eID.PJS.API.Public.Requests;
using eID.PJS.AuditLogging;
using eID.PJS.Contracts;
using eID.PJS.Contracts.Commands;
using eID.PJS.Contracts.Results;
using MassTransit;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;

namespace eID.PJS.API.Public.Controllers;

public class LogController : BaseV1Controller
{
    private FilterOptions _filterOptions;

    public LogController(ILogger<LogController> logger, IConfiguration configuration, AuditLogger auditLogger, IOptions<FilterOptions> filterOptions) :
        base(logger, configuration, auditLogger)
    {
        _filterOptions = filterOptions?.Value ?? throw new ArgumentNullException(nameof(filterOptions));
    }

    /// <summary>
    /// This endpoint gets log information generated by calling user's activity in the system
    /// </summary>
    /// <param name="client"></param>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    [HttpPost("from")]
    [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(CursorResult<LogUserFromMeResult>))]
    public async Task<IActionResult> GetLogUserFromMeAsync(
        [FromServices] IRequestClient<GetLogUserFromMe> client,
        GetLogUserFromMeRequest request,
        CancellationToken cancellationToken)
    {
        var logEventCode = LogEventCode.GET_LOG_USER_FROM_ME;
        var userId = GetUserId();
        var eventPayload = BeginAuditLog(logEventCode, request, targetUserId: userId);
        if (!request.IsValid())
        {
            return BadRequestWithAuditLog(request, logEventCode, eventPayload, targetUserId: userId);
        }

        var serviceResult = await GetResponseAsync(() =>
            client.GetResponse<ServiceResult<CursorResult<LogUserFromMeResult>>>(
                new
                {
                    CorrelationId = RequestId,
                    UserId = userId,
                    UserUid = GetUid(),
                    UserUidType = GetUidType(),
                    request.StartDate,
                    request.EndDate,
                    request.EventTypes,
                    _filterOptions.ExcludedEventTypes,
                    request.CursorSize,
                    request.CursorSearchAfter
                }, cancellationToken));

        return ResultWithAuditLog(serviceResult, logEventCode, eventPayload, targetUserId: userId);
    }

    /// <summary>
    /// This endpoint gets log information for every action targeting the calling user
    /// </summary>
    /// <param name="client"></param>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    [HttpPost("to")]
    [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(CursorResult<LogUserToMeResult>))]
    public async Task<IActionResult> GetLogUserToMeAsync(
        [FromServices] IRequestClient<GetLogUserToMe> client,
        GetLogUserToMeRequest request,
        CancellationToken cancellationToken)
    {
        var logEventCode = LogEventCode.GET_LOG_USER_TO_ME;
        var userId = GetUserId();
        var eventPayload = BeginAuditLog(logEventCode, request, targetUserId: userId);
        if (!request.IsValid())
        {
            return BadRequestWithAuditLog(request, logEventCode, eventPayload, targetUserId: userId);
        }

        var serviceResult = await GetResponseAsync(() =>
            client.GetResponse<ServiceResult<CursorResult<LogUserToMeResult>>>(
                new
                {
                    CorrelationId = RequestId,
                    UserEid = GetUserEid(),
                    UserId = userId,
                    UserUid = GetUid(),
                    UserUidType = GetUidType(),
                    request.StartDate,
                    request.EndDate,
                    request.EventTypes,
                    _filterOptions.ExcludedEventTypes,
                    request.CursorSize,
                    request.CursorSearchAfter
                }, cancellationToken)); ;

        return ResultWithAuditLog(serviceResult, logEventCode, eventPayload, targetUserId: userId);
    }

    /// <summary>
    /// This endpoint gets log information generated by caller's DEAU in the system
    /// </summary>
    /// <param name="client"></param>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    [HttpPost("deau")]
    [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(CursorResult<LogDeauResult>))]
    public async Task<IActionResult> GetLogDeauAsync(
        [FromServices] IRequestClient<GetLogDeau> client,
        GetLogDeauRequest request,
        CancellationToken cancellationToken)
    {
        var logEventCode = LogEventCode.GET_LOG_DEAU;
        var eventPayload = BeginAuditLog(logEventCode, request);
        if (!request.IsValid())
        {
            return BadRequestWithAuditLog(request, logEventCode, eventPayload);
        }

        var serviceResult = await GetResponseAsync(() =>
            client.GetResponse<ServiceResult<CursorResult<LogDeauResult>>>(
                new
                {
                    CorrelationId = RequestId,
                    SystemId = GetSystemId(),
                    request.CursorSize,
                    request.CursorSearchAfter
                }, cancellationToken));

        return ResultWithAuditLog(serviceResult, logEventCode, eventPayload);
    }
}
